openapi: 3.1.0
info:
  title: OpenSearch API Specification
  version: 0.2.0
  x-api-version: 2.16.0
paths:
  /{index}/_bulk:
    post:
      operationId: bulk
      x-operation-group: bulk
      x-version-added: '1.0'
      description: Allows to perform multiple index/update/delete operations in a single request.
      externalDocs:
        url: https://opensearch.org/docs/latest/api-reference/document-apis/bulk/
      parameters:
        - $ref: '#/components/parameters/bulk___path.index'
        - $ref: '#/components/parameters/bulk___query._source'
        - $ref: '#/components/parameters/bulk___query._source_excludes'
        - $ref: '#/components/parameters/bulk___query._source_includes'
        - $ref: '#/components/parameters/bulk___query.pipeline'
        - $ref: '#/components/parameters/bulk___query.refresh'
        - $ref: '#/components/parameters/bulk___query.require_alias'
        - $ref: '#/components/parameters/bulk___query.routing'
        - $ref: '#/components/parameters/bulk___query.timeout'
        - $ref: '#/components/parameters/bulk___query.type'
        - $ref: '#/components/parameters/bulk___query.wait_for_active_shards'
        - $ref: '#/components/parameters/_global___query.pretty'
        - $ref: '#/components/parameters/_global___query.human'
        - $ref: '#/components/parameters/_global___query.error_trace'
        - $ref: '#/components/parameters/_global___query.source'
        - $ref: '#/components/parameters/_global___query.filter_path'
      requestBody:
        $ref: '#/components/requestBodies/bulk'
      responses:
        '200':
          $ref: '#/components/responses/bulk___200'
  /{index}/_search:
    get:
      operationId: search
      x-operation-group: search
      x-version-added: '1.0'
      description: Returns results matching a query.
      externalDocs:
        url: https://opensearch.org/docs/latest/api-reference/search/
      parameters:
        - $ref: '#/components/parameters/search___path.index'
        - $ref: '#/components/parameters/search___query._source'
        - $ref: '#/components/parameters/search___query._source_excludes'
        - $ref: '#/components/parameters/search___query._source_includes'
        - $ref: '#/components/parameters/search___query.allow_no_indices'
        - $ref: '#/components/parameters/search___query.allow_partial_search_results'
        - $ref: '#/components/parameters/search___query.analyze_wildcard'
        - $ref: '#/components/parameters/search___query.analyzer'
        - $ref: '#/components/parameters/search___query.batched_reduce_size'
        - $ref: '#/components/parameters/search___query.cancel_after_time_interval'
        - $ref: '#/components/parameters/search___query.ccs_minimize_roundtrips'
        - $ref: '#/components/parameters/search___query.default_operator'
        - $ref: '#/components/parameters/search___query.df'
        - $ref: '#/components/parameters/search___query.docvalue_fields'
        - $ref: '#/components/parameters/search___query.expand_wildcards'
        - $ref: '#/components/parameters/search___query.explain'
        - $ref: '#/components/parameters/search___query.from'
        - $ref: '#/components/parameters/search___query.ignore_throttled'
        - $ref: '#/components/parameters/search___query.ignore_unavailable'
        - $ref: '#/components/parameters/search___query.include_named_queries_score'
        - $ref: '#/components/parameters/search___query.lenient'
        - $ref: '#/components/parameters/search___query.max_concurrent_shard_requests'
        - $ref: '#/components/parameters/search___query.phase_took'
        - $ref: '#/components/parameters/search___query.pre_filter_shard_size'
        - $ref: '#/components/parameters/search___query.preference'
        - $ref: '#/components/parameters/search___query.q'
        - $ref: '#/components/parameters/search___query.request_cache'
        - $ref: '#/components/parameters/search___query.rest_total_hits_as_int'
        - $ref: '#/components/parameters/search___query.routing'
        - $ref: '#/components/parameters/search___query.scroll'
        - $ref: '#/components/parameters/search___query.search_pipeline'
        - $ref: '#/components/parameters/search___query.search_type'
        - $ref: '#/components/parameters/search___query.seq_no_primary_term'
        - $ref: '#/components/parameters/search___query.size'
        - $ref: '#/components/parameters/search___query.sort'
        - $ref: '#/components/parameters/search___query.stats'
        - $ref: '#/components/parameters/search___query.stored_fields'
        - $ref: '#/components/parameters/search___query.suggest_field'
        - $ref: '#/components/parameters/search___query.suggest_mode'
        - $ref: '#/components/parameters/search___query.suggest_size'
        - $ref: '#/components/parameters/search___query.suggest_text'
        - $ref: '#/components/parameters/search___query.terminate_after'
        - $ref: '#/components/parameters/search___query.timeout'
        - $ref: '#/components/parameters/search___query.track_scores'
        - $ref: '#/components/parameters/search___query.track_total_hits'
        - $ref: '#/components/parameters/search___query.typed_keys'
        - $ref: '#/components/parameters/search___query.version'
        - $ref: '#/components/parameters/_global___query.pretty'
        - $ref: '#/components/parameters/_global___query.human'
        - $ref: '#/components/parameters/_global___query.error_trace'
        - $ref: '#/components/parameters/_global___query.source'
        - $ref: '#/components/parameters/_global___query.filter_path'
      requestBody:
        $ref: '#/components/requestBodies/search'
      responses:
        '200':
          $ref: '#/components/responses/search___200'
        '400':
          $ref: '#/components/responses/search___400'
        '404':
          $ref: '#/components/responses/search___404'
  /{index}/_create/{id}:
    post:
      operationId: create
      x-operation-group: create
      x-version-added: '1.0'
      description: |-
        Creates a new document in the index.

        Returns a 409 response when a document with a same ID already exists in the index.
      externalDocs:
        url: https://opensearch.org/docs/latest/api-reference/document-apis/index-document/
      parameters:
        - $ref: '#/components/parameters/create___path.id'
        - $ref: '#/components/parameters/create___path.index'
        - $ref: '#/components/parameters/create___query.pipeline'
        - $ref: '#/components/parameters/create___query.refresh'
        - $ref: '#/components/parameters/create___query.routing'
        - $ref: '#/components/parameters/create___query.timeout'
        - $ref: '#/components/parameters/create___query.version'
        - $ref: '#/components/parameters/create___query.version_type'
        - $ref: '#/components/parameters/create___query.wait_for_active_shards'
        - $ref: '#/components/parameters/_global___query.pretty'
        - $ref: '#/components/parameters/_global___query.human'
        - $ref: '#/components/parameters/_global___query.error_trace'
        - $ref: '#/components/parameters/_global___query.source'
        - $ref: '#/components/parameters/_global___query.filter_path'
      requestBody:
        $ref: '#/components/requestBodies/create'
      responses:
        '201':
          $ref: '#/components/responses/create___201'
  /{index}/_doc/{id}:
    get:
      operationId: get
      x-operation-group: get
      x-version-added: '1.0'
      description: Returns a document.
      externalDocs:
        url: https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/
      parameters:
        - $ref: '#/components/parameters/get___path.id'
        - $ref: '#/components/parameters/get___path.index'
        - $ref: '#/components/parameters/get___query._source'
        - $ref: '#/components/parameters/get___query._source_excludes'
        - $ref: '#/components/parameters/get___query._source_includes'
        - $ref: '#/components/parameters/get___query.preference'
        - $ref: '#/components/parameters/get___query.realtime'
        - $ref: '#/components/parameters/get___query.refresh'
        - $ref: '#/components/parameters/get___query.routing'
        - $ref: '#/components/parameters/get___query.stored_fields'
        - $ref: '#/components/parameters/get___query.version'
        - $ref: '#/components/parameters/get___query.version_type'
        - $ref: '#/components/parameters/_global___query.pretty'
        - $ref: '#/components/parameters/_global___query.human'
        - $ref: '#/components/parameters/_global___query.error_trace'
        - $ref: '#/components/parameters/_global___query.source'
        - $ref: '#/components/parameters/_global___query.filter_path'
      responses:
        '200':
          $ref: '#/components/responses/get___200'
        '404':
          $ref: '#/components/responses/get___404'
  /{index}/_explain/{id}:
    get:
      operationId: explain
      x-operation-group: explain
      x-version-added: '1.0'
      description: Returns information about why a specific matches (or doesn't match) a query.
      externalDocs:
        url: https://opensearch.org/docs/latest/api-reference/explain/
      parameters:
        - $ref: '#/components/parameters/explain___path.id'
        - $ref: '#/components/parameters/explain___path.index'
        - $ref: '#/components/parameters/explain___query._source'
        - $ref: '#/components/parameters/explain___query._source_excludes'
        - $ref: '#/components/parameters/explain___query._source_includes'
        - $ref: '#/components/parameters/explain___query.analyze_wildcard'
        - $ref: '#/components/parameters/explain___query.analyzer'
        - $ref: '#/components/parameters/explain___query.default_operator'
        - $ref: '#/components/parameters/explain___query.df'
        - $ref: '#/components/parameters/explain___query.lenient'
        - $ref: '#/components/parameters/explain___query.preference'
        - $ref: '#/components/parameters/explain___query.q'
        - $ref: '#/components/parameters/explain___query.routing'
        - $ref: '#/components/parameters/explain___query.stored_fields'
        - $ref: '#/components/parameters/_global___query.pretty'
        - $ref: '#/components/parameters/_global___query.human'
        - $ref: '#/components/parameters/_global___query.error_trace'
        - $ref: '#/components/parameters/_global___query.source'
        - $ref: '#/components/parameters/_global___query.filter_path'
      requestBody:
        $ref: '#/components/requestBodies/explain'
      responses:
        '200':
          $ref: '#/components/responses/explain___200'
  /{index}/_source/{id}:
    get:
      operationId: get_source
      x-operation-group: get_source
      x-version-added: '1.0'
      description: Returns the source of a document.
      externalDocs:
        url: https://opensearch.org/docs/latest/api-reference/document-apis/get-documents/
      parameters:
        - $ref: '#/components/parameters/get_source___path.id'
        - $ref: '#/components/parameters/get_source___path.index'
        - $ref: '#/components/parameters/get_source___query._source'
        - $ref: '#/components/parameters/get_source___query._source_excludes'
        - $ref: '#/components/parameters/get_source___query._source_includes'
        - $ref: '#/components/parameters/get_source___query.preference'
        - $ref: '#/components/parameters/get_source___query.realtime'
        - $ref: '#/components/parameters/get_source___query.refresh'
        - $ref: '#/components/parameters/get_source___query.routing'
        - $ref: '#/components/parameters/get_source___query.version'
        - $ref: '#/components/parameters/get_source___query.version_type'
        - $ref: '#/components/parameters/_global___query.pretty'
        - $ref: '#/components/parameters/_global___query.human'
        - $ref: '#/components/parameters/_global___query.error_trace'
        - $ref: '#/components/parameters/_global___query.source'
        - $ref: '#/components/parameters/_global___query.filter_path'
      responses:
        '200':
          $ref: '#/components/responses/get_source___200'
        '404':
          $ref: '#/components/responses/get_source___404'
  /{index}/_update/{id}:
    post:
      operationId: update
      x-operation-group: update
      x-version-added: '1.0'
      description: Updates a document with a script or partial document.
      externalDocs:
        url: https://opensearch.org/docs/latest/api-reference/document-apis/update-document/
      parameters:
        - $ref: '#/components/parameters/update___path.id'
        - $ref: '#/components/parameters/update___path.index'
        - $ref: '#/components/parameters/update___query._source'
        - $ref: '#/components/parameters/update___query._source_excludes'
        - $ref: '#/components/parameters/update___query._source_includes'
        - $ref: '#/components/parameters/update___query.if_primary_term'
        - $ref: '#/components/parameters/update___query.if_seq_no'
        - $ref: '#/components/parameters/update___query.lang'
        - $ref: '#/components/parameters/update___query.refresh'
        - $ref: '#/components/parameters/update___query.require_alias'
        - $ref: '#/components/parameters/update___query.retry_on_conflict'
        - $ref: '#/components/parameters/update___query.routing'
        - $ref: '#/components/parameters/update___query.timeout'
        - $ref: '#/components/parameters/update___query.wait_for_active_shards'
        - $ref: '#/components/parameters/_global___query.pretty'
        - $ref: '#/components/parameters/_global___query.human'
        - $ref: '#/components/parameters/_global___query.error_trace'
        - $ref: '#/components/parameters/_global___query.source'
        - $ref: '#/components/parameters/_global___query.filter_path'
      requestBody:
        $ref: '#/components/requestBodies/update'
      responses:
        '200':
          $ref: '#/components/responses/update___200'
components:
  parameters:
    bulk___path.index:
      in: path
      name: index
      description: Name of the data stream, index, or index alias to perform bulk actions on.
      required: true
      schema:
        $ref: '#/components/schemas/IndexName'
      style: simple
    bulk___query._source:
      in: query
      name: underscore_source
      description: '`true` or `false` to return the `_source` field or not, or a list of fields to return.'
      schema:
        $ref: '#/components/schemas/SourceConfigParam'
      style: form
    bulk___query._source_excludes:
      in: query
      name: underscore_source_excludes
      description: A comma-separated list of source fields to exclude from the response.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    bulk___query._source_includes:
      in: query
      name: underscore_source_includes
      description: A comma-separated list of source fields to include in the response.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    bulk___query.pipeline:
      in: query
      name: pipeline
      description: |-
        ID of the pipeline to use to preprocess incoming documents.
        If the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request.
        If a final pipeline is configured it will always run, regardless of the value of this parameter.
      schema:
        type: string
      style: form
    bulk___query.refresh:
      in: query
      name: refresh
      description: |-
        If `true`, OpenSearch refreshes the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` do nothing with refreshes.
        Valid values: `true`, `false`, `wait_for`.
      schema:
        $ref: '#/components/schemas/Refresh'
      style: form
    bulk___query.require_alias:
      in: query
      name: require_alias
      description: If `true`, the request's actions must target an index alias.
      schema:
        type: boolean
        default: false
      style: form
    bulk___query.routing:
      in: query
      name: routing
      description: Custom value used to route operations to a specific shard.
      schema:
        $ref: '#/components/schemas/RoutingInQueryString'
      style: form
    bulk___query.timeout:
      in: query
      name: timeout
      description: 'Period each action waits for the following operations: automatic index creation, dynamic mapping updates, waiting for active shards.'
      schema:
        $ref: '#/components/schemas/Duration'
      style: form
    bulk___query.type:
      name: type
      in: query
      description: Default document type for items which don't provide one.
      schema:
        type: string
        description: Default document type for items which don't provide one.
    bulk___query.wait_for_active_shards:
      in: query
      name: wait_for_active_shards
      description: |-
        The number of shard copies that must be active before proceeding with the operation.
        Set to all or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).
      schema:
        $ref: '#/components/schemas/WaitForActiveShards'
      style: form
      x-default: '1'
    _global___query.pretty:
      name: pretty
      in: query
      description: Whether to pretty format the returned JSON response.
      schema:
        type: boolean
        default: false
      x-global: true
    _global___query.human:
      name: human
      in: query
      description: Whether to return human readable values for statistics.
      schema:
        type: boolean
        default: true
      x-global: true
    _global___query.error_trace:
      name: error_trace
      in: query
      description: Whether to include the stack trace of returned errors.
      schema:
        type: boolean
        default: false
      x-global: true
    _global___query.source:
      name: source
      in: query
      description: The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
      schema:
        type: string
      x-global: true
    _global___query.filter_path:
      name: filter_path
      in: query
      description: Used to reduce the response. This parameter takes a comma-separated list of filters. It supports using wildcards to match any field or part of a field’s name. You can also exclude fields with "-".
      schema:
        $ref: '#/components/schemas/StringOrStringArray'
      x-global: true
    search___path.index:
      in: path
      name: index
      description: |-
        Comma-separated list of data streams, indexes, and aliases to search.
        Supports wildcards (`*`).
        To search all data streams and indexes, omit this parameter or use `*` or `_all`.
      required: true
      schema:
        $ref: '#/components/schemas/Indices'
      style: simple
    search___query._source:
      in: query
      name: underscore_source
      description: |-
        Indicates which source fields are returned for matching documents.
        These fields are returned in the `hits._source` property of the search response.
        Valid values are:
        `true` to return the entire document source;
        `false` to not return the document source;
        `<string>` to return the source fields that are specified as a comma-separated list (supports wildcard (`*`) patterns).
      schema:
        $ref: '#/components/schemas/SourceConfigParam'
      style: form
    search___query._source_excludes:
      in: query
      name: underscore_source_excludes
      description: |-
        A comma-separated list of source fields to exclude from the response.
        You can also use this parameter to exclude fields from the subset specified in `_source_includes` query parameter.
        If the `_source` parameter is `false`, this parameter is ignored.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    search___query._source_includes:
      in: query
      name: underscore_source_includes
      description: |-
        A comma-separated list of source fields to include in the response.
        If this parameter is specified, only these source fields are returned.
        You can exclude fields from this subset using the `_source_excludes` query parameter.
        If the `_source` parameter is `false`, this parameter is ignored.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    search___query.allow_no_indices:
      in: query
      name: allow_no_indices
      description: |-
        If `false`, the request returns an error if any wildcard expression, index alias, or `_all` value targets only missing or closed indexes.
        This behavior applies even if the request targets other open indexes.
        For example, a request targeting `foo*,bar*` returns an error if an index starts with `foo` but no index starts with `bar`.
      schema:
        type: boolean
      style: form
    search___query.allow_partial_search_results:
      in: query
      name: allow_partial_search_results
      description: If `true`, returns partial results if there are shard request timeouts or shard failures. If `false`, returns an error with no partial results.
      schema:
        type: boolean
        default: true
      style: form
    search___query.analyze_wildcard:
      in: query
      name: analyze_wildcard
      description: |-
        If `true`, wildcard and prefix queries are analyzed.
        This parameter can only be used when the q query string parameter is specified.
      schema:
        type: boolean
        default: false
      style: form
    search___query.analyzer:
      in: query
      name: analyzer
      description: |-
        Analyzer to use for the query string.
        This parameter can only be used when the q query string parameter is specified.
      schema:
        type: string
      style: form
    search___query.batched_reduce_size:
      in: query
      name: batched_reduce_size
      description: |-
        The number of shard results that should be reduced at once on the coordinating node.
        This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.
      schema:
        type: integer
        format: int32
        default: 512
      style: form
    search___query.cancel_after_time_interval:
      in: query
      name: cancel_after_time_interval
      description: |-
        The time after which the search request will be canceled.
        Request-level parameter takes precedence over `cancel_after_time_interval` cluster setting.
      schema:
        $ref: '#/components/schemas/Duration'
      style: form
    search___query.ccs_minimize_roundtrips:
      in: query
      name: ccs_minimize_roundtrips
      description: If `true`, network round-trips between the coordinating node and the remote clusters are minimized when executing cross-cluster search (CCS) requests.
      schema:
        type: boolean
        default: true
      style: form
    search___query.default_operator:
      in: query
      name: default_operator
      description: |-
        The default operator for query string query: AND or OR.
        This parameter can only be used when the `q` query string parameter is specified.
      schema:
        $ref: '#/components/schemas/Operator'
      style: form
    search___query.df:
      in: query
      name: df
      description: |-
        Field to use as default where no field prefix is given in the query string.
        This parameter can only be used when the q query string parameter is specified.
      schema:
        type: string
      style: form
    search___query.docvalue_fields:
      in: query
      name: docvalue_fields
      description: A comma-separated list of fields to return as the docvalue representation for each hit.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    search___query.expand_wildcards:
      in: query
      name: expand_wildcards
      description: |-
        Type of index that wildcard patterns can match.
        If the request can target data streams, this argument determines whether wildcard expressions match hidden data streams.
        Supports comma-separated values, such as `open,hidden`.
      schema:
        $ref: '#/components/schemas/ExpandWildcards'
      style: form
    search___query.explain:
      in: query
      name: explain
      description: If `true`, returns detailed information about score computation as part of a hit.
      schema:
        type: boolean
      style: form
    search___query.from:
      in: query
      name: from
      description: |-
        Starting document offset.
        Needs to be non-negative.
        By default, you cannot page through more than 10,000 hits using the `from` and `size` parameters.
        To page through more hits, use the `search_after` parameter.
      schema:
        type: integer
        format: int32
        default: 0
      style: form
    search___query.ignore_throttled:
      in: query
      name: ignore_throttled
      description: If `true`, concrete, expanded or aliased indexes will be ignored when frozen.
      schema:
        type: boolean
      style: form
    search___query.ignore_unavailable:
      in: query
      name: ignore_unavailable
      description: If `false`, the request returns an error if it targets a missing or closed index.
      schema:
        type: boolean
      style: form
    search___query.include_named_queries_score:
      name: include_named_queries_score
      in: query
      description: Indicates whether `hit.matched_queries` should be rendered as a map that includes the name of the matched query associated with its score (true) or as an array containing the name of the matched queries (false)
      schema:
        type: boolean
        default: false
        description: Indicates whether `hit.matched_queries` should be rendered as a map that includes the name of the matched query associated with its score (true) or as an array containing the name of the matched queries (false)
    search___query.lenient:
      in: query
      name: lenient
      description: |-
        If `true`, format-based query failures (such as providing text to a numeric field) in the query string will be ignored.
        This parameter can only be used when the `q` query string parameter is specified.
      schema:
        type: boolean
      style: form
    search___query.max_concurrent_shard_requests:
      in: query
      name: max_concurrent_shard_requests
      description: |-
        Defines the number of concurrent shard requests per node this search executes concurrently.
        This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.
      schema:
        type: integer
        format: int32
        default: 5
      style: form
    search___query.phase_took:
      name: phase_took
      in: query
      description: Indicates whether to return phase-level `took` time values in the response.
      schema:
        type: boolean
        default: false
      style: form
    search___query.pre_filter_shard_size:
      in: query
      name: pre_filter_shard_size
      description: |-
        Defines a threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold.
        This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method (if date filters are mandatory to match but the shard bounds and the query are disjoint).
        When unspecified, the pre-filter phase is executed if any of these conditions is met:
        the request targets more than 128 shards;
        the request targets one or more read-only index;
        the primary sort of the query targets an indexed field.
      schema:
        type: integer
        format: int32
      style: form
    search___query.preference:
      in: query
      name: preference
      description: |-
        Nodes and shards used for the search.
        By default, OpenSearch selects from eligible nodes and shards using adaptive replica selection, accounting for allocation awareness. Valid values are:
        `_only_local` to run the search only on shards on the local node;
        `_local` to, if possible, run the search on shards on the local node, or if not, select shards using the default method;
        `_only_nodes:<node-id>,<node-id>` to run the search on only the specified nodes IDs, where, if suitable shards exist on more than one selected node, use shards on those nodes using the default method, or if none of the specified nodes are available, select shards from any available node using the default method;
        `_prefer_nodes:<node-id>,<node-id>` to if possible, run the search on the specified nodes IDs, or if not, select shards using the default method;
        `_shards:<shard>,<shard>` to run the search only on the specified shards;
        `<custom-string>` (any string that does not start with `_`) to route searches with the same `<custom-string>` to the same shards in the same order.
      schema:
        type: string
        default: random
      style: form
    search___query.q:
      in: query
      name: q
      description: |-
        Query in the Lucene query string syntax using query parameter search.
        Query parameter searches do not support the full OpenSearch Query DSL but are handy for testing.
      schema:
        type: string
      style: form
    search___query.request_cache:
      in: query
      name: request_cache
      description: |-
        If `true`, the caching of search results is enabled for requests where `size` is `0`.
        Defaults to index level settings.
      schema:
        type: boolean
      style: form
    search___query.rest_total_hits_as_int:
      in: query
      name: rest_total_hits_as_int
      description: Indicates whether `hits.total` should be rendered as an integer or an object in the rest search response.
      schema:
        type: boolean
        default: false
      style: form
    search___query.routing:
      in: query
      name: routing
      description: Custom value used to route operations to a specific shard.
      schema:
        $ref: '#/components/schemas/RoutingInQueryString'
      style: form
    search___query.scroll:
      in: query
      name: scroll
      description: |-
        Period to retain the search context for scrolling. See Scroll search results.
        By default, this value cannot exceed `1d` (24 hours).
        You can change this limit using the `search.max_keep_alive` cluster-level setting.
      schema:
        $ref: '#/components/schemas/Duration'
      style: form
    search___query.search_pipeline:
      name: search_pipeline
      in: query
      description: Customizable sequence of processing stages applied to search queries.
      schema:
        type: string
        description: Customizable sequence of processing stages applied to search queries.
    search___query.search_type:
      in: query
      name: search_type
      description: How distributed term frequencies are calculated for relevance scoring.
      schema:
        $ref: '#/components/schemas/SearchType'
      style: form
    search___query.seq_no_primary_term:
      in: query
      name: seq_no_primary_term
      description: If `true`, returns sequence number and primary term of the last modification of each hit.
      schema:
        type: boolean
      style: form
    search___query.size:
      in: query
      name: size
      description: |-
        Defines the number of hits to return.
        By default, you cannot page through more than 10,000 hits using the `from` and `size` parameters.
        To page through more hits, use the `search_after` parameter.
      schema:
        type: integer
        format: int32
        default: 10
      style: form
    search___query.sort:
      in: query
      name: sort
      description: A comma-separated list of <field>:<direction> pairs.
      schema:
        $ref: '#/components/schemas/StringOrStringArray'
      style: form
    search___query.stats:
      in: query
      name: stats
      description: Specific `tag` of the request for logging and statistical purposes.
      schema:
        type: array
        items:
          type: string
      style: form
    search___query.stored_fields:
      in: query
      name: stored_fields
      description: |-
        A comma-separated list of stored fields to return as part of a hit.
        If no fields are specified, no stored fields are included in the response.
        If this field is specified, the `_source` parameter defaults to `false`.
        You can pass `_source: true` to return both source fields and stored fields in the search response.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    search___query.suggest_field:
      in: query
      name: suggest_field
      description: Specifies which field to use for suggestions.
      schema:
        $ref: '#/components/schemas/Field'
      style: form
    search___query.suggest_mode:
      in: query
      name: suggest_mode
      description: |-
        Specifies the suggest mode.
        This parameter can only be used when the `suggest_field` and `suggest_text` query string parameters are specified.
      schema:
        $ref: '#/components/schemas/SuggestMode'
      style: form
    search___query.suggest_size:
      in: query
      name: suggest_size
      description: |-
        Number of suggestions to return.
        This parameter can only be used when the `suggest_field` and `suggest_text` query string parameters are specified.
      schema:
        type: integer
        format: int32
      style: form
    search___query.suggest_text:
      in: query
      name: suggest_text
      description: |-
        The source text for which the suggestions should be returned.
        This parameter can only be used when the `suggest_field` and `suggest_text` query string parameters are specified.
      schema:
        type: string
      style: form
    search___query.terminate_after:
      in: query
      name: terminate_after
      description: |-
        Maximum number of documents to collect for each shard.
        If a query reaches this limit, OpenSearch terminates the query early.
        OpenSearch collects documents before sorting.
        Use with caution.
        OpenSearch applies this parameter to each shard handling the request.
        When possible, let OpenSearch perform early termination automatically.
        Avoid specifying this parameter for requests that target data streams with backing indexes across multiple data tiers.
        If set to `0` (default), the query does not terminate early.
      schema:
        type: integer
        format: int32
      style: form
    search___query.timeout:
      in: query
      name: timeout
      description: |-
        Specifies the period of time to wait for a response from each shard.
        If no response is received before the timeout expires, the request fails and returns an error.
      schema:
        $ref: '#/components/schemas/Duration'
      style: form
    search___query.track_scores:
      in: query
      name: track_scores
      description: If `true`, calculate and return document scores, even if the scores are not used for sorting.
      schema:
        type: boolean
      style: form
    search___query.track_total_hits:
      in: query
      name: track_total_hits
      description: |-
        Number of hits matching the query to count accurately.
        If `true`, the exact number of hits is returned at the cost of some performance.
        If `false`, the response does not include the total number of hits matching the query.
      schema:
        $ref: '#/components/schemas/TrackHits'
      style: form
    search___query.typed_keys:
      in: query
      name: typed_keys
      description: If `true`, aggregation and suggester names are be prefixed by their respective types in the response.
      schema:
        type: boolean
      style: form
    search___query.version:
      in: query
      name: version
      description: If `true`, returns document version as part of a hit.
      schema:
        type: boolean
      style: form
    create___path.id:
      in: path
      name: id
      description: Unique identifier for the document.
      required: true
      schema:
        $ref: '#/components/schemas/Id'
      style: simple
    create___path.index:
      in: path
      name: index
      description: |-
        Name of the data stream or index to target.
        If the target doesn't exist and matches the name or wildcard (`*`) pattern of an index template with a `data_stream` definition, this request creates the data stream.
        If the target doesn't exist and doesn't match a data stream template, this request creates the index.
      required: true
      schema:
        $ref: '#/components/schemas/IndexName'
      style: simple
    create___query.pipeline:
      in: query
      name: pipeline
      description: |-
        ID of the pipeline to use to preprocess incoming documents.
        If the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request.
        If a final pipeline is configured it will always run, regardless of the value of this parameter.
      schema:
        type: string
      style: form
    create___query.refresh:
      in: query
      name: refresh
      description: |-
        If `true`, OpenSearch refreshes the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` do nothing with refreshes.
        Valid values: `true`, `false`, `wait_for`.
      schema:
        $ref: '#/components/schemas/Refresh'
      style: form
    create___query.routing:
      in: query
      name: routing
      description: Custom value used to route operations to a specific shard.
      schema:
        $ref: '#/components/schemas/RoutingInQueryString'
      style: form
    create___query.timeout:
      in: query
      name: timeout
      description: 'Period the request waits for the following operations: automatic index creation, dynamic mapping updates, waiting for active shards.'
      schema:
        $ref: '#/components/schemas/Duration'
      style: form
    create___query.version:
      in: query
      name: version
      description: |-
        Explicit version number for concurrency control.
        The specified version must match the current version of the document for the request to succeed.
      schema:
        $ref: '#/components/schemas/VersionNumber'
      style: form
    create___query.version_type:
      in: query
      name: version_type
      description: 'Specific version type: `external`, `external_gte`.'
      schema:
        $ref: '#/components/schemas/VersionType'
      style: form
    create___query.wait_for_active_shards:
      in: query
      name: wait_for_active_shards
      description: |-
        The number of shard copies that must be active before proceeding with the operation.
        Set to `all` or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).
      schema:
        $ref: '#/components/schemas/WaitForActiveShards'
      style: form
      x-default: '1'
    get___path.id:
      in: path
      name: id
      description: Unique identifier of the document.
      required: true
      schema:
        $ref: '#/components/schemas/Id'
      style: simple
    get___path.index:
      in: path
      name: index
      description: Name of the index that contains the document.
      required: true
      schema:
        $ref: '#/components/schemas/IndexName'
      style: simple
    get___query._source:
      in: query
      name: underscore_source
      description: Set to `true` or `false` to return the `_source` field or not, or a list of fields to return.
      schema:
        $ref: '#/components/schemas/SourceConfigParam'
      style: form
    get___query._source_excludes:
      in: query
      name: underscore_source_excludes
      description: A comma-separated list of source fields to exclude in the response.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    get___query._source_includes:
      in: query
      name: underscore_source_includes
      description: A comma-separated list of source fields to include in the response.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    get___query.preference:
      in: query
      name: preference
      description: Specifies the node or shard the operation should be performed on. Random by default.
      schema:
        type: string
        default: random
      style: form
    get___query.realtime:
      in: query
      name: realtime
      description: If `true`, the request is real-time as opposed to near-real-time.
      schema:
        type: boolean
      style: form
    get___query.refresh:
      in: query
      name: refresh
      description: If `true`, OpenSearch refreshes the affected shards to make this operation visible to search. If `false`, do nothing with refreshes.
      schema:
        $ref: '#/components/schemas/Refresh'
      style: form
    get___query.routing:
      in: query
      name: routing
      description: Target the specified primary shard.
      schema:
        $ref: '#/components/schemas/RoutingInQueryString'
      style: form
    get___query.stored_fields:
      in: query
      name: stored_fields
      description: |-
        List of stored fields to return as part of a hit.
        If no fields are specified, no stored fields are included in the response.
        If this field is specified, the `_source` parameter defaults to false.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    get___query.version:
      in: query
      name: version
      description: Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
      schema:
        $ref: '#/components/schemas/VersionNumber'
      style: form
    get___query.version_type:
      in: query
      name: version_type
      description: 'Specific version type: `internal`, `external`, `external_gte`.'
      schema:
        $ref: '#/components/schemas/VersionType'
      style: form
    explain___path.id:
      in: path
      name: id
      description: Defines the document ID.
      required: true
      schema:
        $ref: '#/components/schemas/Id'
      style: simple
    explain___path.index:
      in: path
      name: index
      description: |-
        Index names used to limit the request.
        Only a single index name can be provided to this parameter.
      required: true
      schema:
        $ref: '#/components/schemas/IndexName'
      style: simple
    explain___query._source:
      in: query
      name: underscore_source
      description: Set to `true` or `false` to return the `_source` field or not, or a list of fields to return.
      schema:
        $ref: '#/components/schemas/SourceConfigParam'
      style: form
    explain___query._source_excludes:
      in: query
      name: underscore_source_excludes
      description: A comma-separated list of source fields to exclude from the response.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    explain___query._source_includes:
      in: query
      name: underscore_source_includes
      description: A comma-separated list of source fields to include in the response.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    explain___query.analyze_wildcard:
      in: query
      name: analyze_wildcard
      description: If `true`, wildcard and prefix queries are analyzed.
      schema:
        type: boolean
        default: false
      style: form
    explain___query.analyzer:
      in: query
      name: analyzer
      description: |-
        Analyzer to use for the query string.
        This parameter can only be used when the `q` query string parameter is specified.
      schema:
        type: string
      style: form
    explain___query.default_operator:
      in: query
      name: default_operator
      description: 'The default operator for query string query: `AND` or `OR`.'
      schema:
        $ref: '#/components/schemas/Operator'
      style: form
    explain___query.df:
      in: query
      name: df
      description: Field to use as default where no field prefix is given in the query string.
      schema:
        type: string
        default: _all
      style: form
    explain___query.lenient:
      in: query
      name: lenient
      description: If `true`, format-based query failures (such as providing text to a numeric field) in the query string will be ignored.
      schema:
        type: boolean
      style: form
    explain___query.preference:
      in: query
      name: preference
      description: |-
        Specifies the node or shard the operation should be performed on.
        Random by default.
      schema:
        type: string
        default: random
      style: form
    explain___query.q:
      in: query
      name: q
      description: Query in the Lucene query string syntax.
      schema:
        type: string
      style: form
    explain___query.routing:
      in: query
      name: routing
      description: Custom value used to route operations to a specific shard.
      schema:
        $ref: '#/components/schemas/RoutingInQueryString'
      style: form
    explain___query.stored_fields:
      in: query
      name: stored_fields
      description: A comma-separated list of stored fields to return in the response.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    get_source___path.id:
      in: path
      name: id
      description: Unique identifier of the document.
      required: true
      schema:
        $ref: '#/components/schemas/Id'
      style: simple
    get_source___path.index:
      in: path
      name: index
      description: Name of the index that contains the document.
      required: true
      schema:
        $ref: '#/components/schemas/IndexName'
      style: simple
    get_source___query._source:
      in: query
      name: underscore_source
      description: Set to `true` or `false` to return the `_source` field or not, or a list of fields to return.
      schema:
        $ref: '#/components/schemas/SourceConfigParam'
      style: form
    get_source___query._source_excludes:
      in: query
      name: underscore_source_excludes
      description: A comma-separated list of source fields to exclude in the response.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    get_source___query._source_includes:
      in: query
      name: underscore_source_includes
      description: A comma-separated list of source fields to include in the response.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    get_source___query.preference:
      in: query
      name: preference
      description: Specifies the node or shard the operation should be performed on. Random by default.
      schema:
        type: string
        default: random
      style: form
    get_source___query.realtime:
      in: query
      name: realtime
      description: Boolean) If `true`, the request is real-time as opposed to near-real-time.
      schema:
        type: boolean
      style: form
    get_source___query.refresh:
      in: query
      name: refresh
      description: If `true`, OpenSearch refreshes the affected shards to make this operation visible to search. If `false`, do nothing with refreshes.
      schema:
        $ref: '#/components/schemas/Refresh'
      style: form
    get_source___query.routing:
      in: query
      name: routing
      description: Target the specified primary shard.
      schema:
        $ref: '#/components/schemas/RoutingInQueryString'
      style: form
    get_source___query.version:
      in: query
      name: version
      description: Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
      schema:
        $ref: '#/components/schemas/VersionNumber'
      style: form
    get_source___query.version_type:
      in: query
      name: version_type
      description: Specific version type. One of `internal`, `external`, `external_gte`.
      schema:
        $ref: '#/components/schemas/VersionType'
      style: form
    update___path.id:
      in: path
      name: id
      description: Document ID
      required: true
      schema:
        $ref: '#/components/schemas/Id'
      style: simple
    update___path.index:
      in: path
      name: index
      description: The name of the index
      required: true
      schema:
        $ref: '#/components/schemas/IndexName'
      style: simple
    update___query._source:
      in: query
      name: underscore_source
      description: |-
        Set to `false` to disable source retrieval. You can also specify a comma-separated
        list of the fields you want to retrieve.
      schema:
        $ref: '#/components/schemas/SourceConfigParam'
      style: form
    update___query._source_excludes:
      in: query
      name: underscore_source_excludes
      description: Specify the source fields you want to exclude.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    update___query._source_includes:
      in: query
      name: underscore_source_includes
      description: Specify the source fields you want to retrieve.
      schema:
        $ref: '#/components/schemas/Fields'
      style: form
    update___query.if_primary_term:
      in: query
      name: if_primary_term
      description: Only perform the operation if the document has this primary term.
      schema:
        type: integer
        format: int64
      style: form
    update___query.if_seq_no:
      in: query
      name: if_seq_no
      description: Only perform the operation if the document has this sequence number.
      schema:
        $ref: '#/components/schemas/SequenceNumber'
      style: form
    update___query.lang:
      in: query
      name: lang
      description: The script language.
      schema:
        type: string
        default: painless
      style: form
    update___query.refresh:
      in: query
      name: refresh
      description: |-
        If 'true', OpenSearch refreshes the affected shards to make this operation
        visible to search, if `wait_for` then wait for a refresh to make this operation
        visible to search, if `false` do nothing with refreshes.
      schema:
        $ref: '#/components/schemas/Refresh'
      style: form
    update___query.require_alias:
      in: query
      name: require_alias
      description: If `true`, the destination must be an index alias.
      schema:
        type: boolean
        default: false
      style: form
    update___query.retry_on_conflict:
      in: query
      name: retry_on_conflict
      description: Specify how many times should the operation be retried when a conflict occurs.
      schema:
        type: integer
        format: int32
        default: 0
      style: form
    update___query.routing:
      in: query
      name: routing
      description: Custom value used to route operations to a specific shard.
      schema:
        $ref: '#/components/schemas/RoutingInQueryString'
      style: form
    update___query.timeout:
      in: query
      name: timeout
      description: |-
        Period to wait for dynamic mapping updates and active shards.
        This guarantees OpenSearch waits for at least the timeout before failing.
        The actual wait time could be longer, particularly when multiple waits occur.
      schema:
        $ref: '#/components/schemas/Duration'
      style: form
    update___query.wait_for_active_shards:
      in: query
      name: wait_for_active_shards
      description: |-
        The number of shard copies that must be active before proceeding with the operations.
        Set to 'all' or any positive integer up to the total number of shards in the index
        (number_of_replicas+1). Defaults to 1 meaning the primary shard.
      schema:
        $ref: '#/components/schemas/WaitForActiveShards'
      style: form
      x-default: '1'
  requestBodies:
    bulk:
      content:
        application/x-ndjson:
          schema:
            type: array
            items:
              anyOf:
                - $ref: '#/components/schemas/OperationContainer'
                - $ref: '#/components/schemas/UpdateAction'
                - type: object
            description: The operation definition and data (action-data pairs), separated by newlines
      required: true
    search:
      content:
        application/json:
          schema:
            type: object
            properties:
              aggregations:
                description: Defines the aggregations that are run as part of the search request.
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/AggregationContainer'
              aggs:
                description: Defines the aggregations that are run as part of the search request.
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/AggregationContainer'
              collapse:
                $ref: '#/components/schemas/FieldCollapse'
              explain:
                description: If `true`, returns detailed information about score computation as part of a hit.
                type: boolean
              ext:
                description: Configuration of search extensions defined by OpenSearch plugins.
                type: object
                additionalProperties:
                  type: object
              from:
                description: |-
                  Starting document offset.
                  Needs to be non-negative.
                  By default, you cannot page through more than 10,000 hits using the `from` and `size` parameters.
                  To page through more hits, use the `search_after` parameter.
                type: integer
                format: int32
              highlight:
                $ref: '#/components/schemas/Highlight'
              track_total_hits:
                $ref: '#/components/schemas/TrackHits'
              indices_boost:
                description: Boosts the `_score` of documents from specified indexes.
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: number
                    format: float
              docvalue_fields:
                description: |-
                  Array of wildcard (`*`) patterns.
                  The request returns doc values for field names matching these patterns in the `hits.fields` property of the response.
                type: array
                items:
                  $ref: '#/components/schemas/FieldAndFormat'
              rank:
                $ref: '#/components/schemas/RankContainer'
              min_score:
                description: |-
                  Minimum `_score` for matching documents.
                  Documents with a lower `_score` are not included in the search results.
                type: number
                format: float
              post_filter:
                $ref: '#/components/schemas/QueryContainer'
              profile:
                description: |-
                  Set to `true` to return detailed timing information about the execution of individual components in a search request.
                  NOTE: This is a debugging tool and adds significant overhead to search execution.
                type: boolean
              query:
                $ref: '#/components/schemas/QueryContainer'
              rescore:
                description: Can be used to improve precision by reordering just the top (for example 100 - 500) documents returned by the `query` and `post_filter` phases.
                oneOf:
                  - $ref: '#/components/schemas/Rescore'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Rescore'
              script_fields:
                description: Retrieve a script evaluation (based on different fields) for each hit.
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/ScriptField'
              search_after:
                $ref: '#/components/schemas/SortResults'
              size:
                description: |-
                  The number of hits to return.
                  By default, you cannot page through more than 10,000 hits using the `from` and `size` parameters.
                  To page through more hits, use the `search_after` parameter.
                type: integer
                format: int32
              slice:
                $ref: '#/components/schemas/SlicedScroll'
              sort:
                $ref: '#/components/schemas/Sort'
              fields:
                description: |-
                  Array of wildcard (`*`) patterns.
                  The request returns values for field names matching these patterns in the `hits.fields` property of the response.
                type: array
                items:
                  $ref: '#/components/schemas/FieldAndFormat'
              suggest:
                $ref: '#/components/schemas/Suggester'
              terminate_after:
                description: |-
                  Maximum number of documents to collect for each shard.
                  If a query reaches this limit, OpenSearch terminates the query early.
                  OpenSearch collects documents before sorting.
                  Use with caution.
                  OpenSearch applies this parameter to each shard handling the request.
                  When possible, let OpenSearch perform early termination automatically.
                  Avoid specifying this parameter for requests that target data streams with backing indexes across multiple data tiers.
                  If set to `0` (default), the query does not terminate early.
                type: integer
                format: int32
              timeout:
                description: |-
                  Specifies the period of time to wait for a response from each shard.
                  If no response is received before the timeout expires, the request fails and returns an error.
                  Defaults to no timeout.
                type: string
              track_scores:
                description: If `true`, calculate and return document scores, even if the scores are not used for sorting.
                type: boolean
              version:
                description: If `true`, returns document version as part of a hit.
                type: boolean
              seq_no_primary_term:
                description: If `true`, returns sequence number and primary term of the last modification of each hit.
                type: boolean
              stored_fields:
                $ref: '#/components/schemas/Fields'
              pit:
                $ref: '#/components/schemas/PointInTimeReference'
              stats:
                description: |-
                  Stats groups to associate with the search.
                  Each group maintains a statistics aggregation for its associated searches.
                  You can retrieve these stats using the indexes stats API.
                type: array
                items:
                  type: string
              underscore_source:
                $ref: '#/components/schemas/SourceConfig'
            description: The search definition using the Query DSL
    create:
      content:
        application/json:
          schema:
            type: object
            description: The document
      required: true
    explain:
      content:
        application/json:
          schema:
            type: object
            properties:
              query:
                $ref: '#/components/schemas/QueryContainer'
            description: The query definition using the Query DSL
    update:
      content:
        application/json:
          schema:
            type: object
            properties:
              detect_noop:
                description: |-
                  Set to `false` to disable setting `result` in the response
                  to `noop` if no change to the document occurred.
                type: boolean
              doc:
                description: A partial update to an existing document.
                type: object
              doc_as_upsert:
                description: Set to `true` to use the contents of 'doc' as the value of 'upsert'
                type: boolean
              script:
                $ref: '#/components/schemas/Script'
              scripted_upsert:
                description: Set to `true` to execute the script whether or not the document exists.
                type: boolean
              upsert:
                description: |-
                  If the document does not already exist, the contents of 'upsert' are inserted as a
                  new document. If the document exists, the 'script' is executed.
                type: object
              underscore_source:
                $ref: '#/components/schemas/SourceConfig'
            description: The request definition requires either `script` or partial `doc`
      required: true
  responses:
    bulk___200:
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                type: boolean
              items:
                type: array
                items:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ResponseItem'
                  minProperties: 1
                  maxProperties: 1
              took:
                type: integer
                format: int64
              ingest_took:
                type: integer
                format: int64
            required:
              - errors
              - items
              - took
      description: ''
    search___200:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseBody'
      description: ''
    search___400:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: ''
    search___404:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: ''
    create___201:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WriteResponseBase'
      description: ''
    get___200:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetResult'
      description: ''
    get___404:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetResult'
      description: ''
    explain___200:
      content:
        application/json:
          schema:
            type: object
            properties:
              matched:
                type: boolean
              explanation:
                $ref: '#/components/schemas/ExplanationDetail'
              get:
                $ref: '#/components/schemas/InlineGet'
              underscore_type:
                $ref: '#/components/schemas/Type'
              underscore_index:
                $ref: '#/components/schemas/IndexName'
              underscore_id:
                $ref: '#/components/schemas/Id'
            required:
              - _id
              - _index
              - matched
      description: ''
    get_source___200:
      content:
        application/json:
          schema:
            type: object
      description: ''
    get_source___404:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: ''
    update___200:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateWriteResponseBase'
      description: ''
  schemas:
    IndexName:
      type: string
    SourceConfigParam:
      description: |-
        Defines how to fetch a source. Fetching can be disabled entirely, or the source can be filtered.
        Use this setting with the `_source_includes` and `_source_excludes` parameters.
      oneOf:
        - title: fetch
          type: boolean
        - title: fields
          $ref: '#/components/schemas/Fields'
    Fields:
      oneOf:
        - $ref: '#/components/schemas/Field'
        - type: array
          items:
            $ref: '#/components/schemas/Field'
    Refresh:
      oneOf:
        - type: boolean
        - type: string
          enum:
            - 'false'
            - 'true'
            - wait_for
    RoutingInQueryString:
      $ref: '#/components/schemas/StringOrStringArray'
    Duration:
      description: A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and `d` (days). Also accepts `0` without a unit and `-1` to indicate an unspecified value.
      pattern: ^(?:(-1)|([0-9\.]+)(?:d|h|m|s|ms|micros|nanos))$
      type: string
    WaitForActiveShards:
      description: Waits until the specified number of shards is active before returning a response. Use `all` for all shards.
      oneOf:
        - title: count
          type: integer
        - title: option
          $ref: '#/components/schemas/WaitForActiveShardOptions'
    StringOrStringArray:
      oneOf:
        - type: string
        - type: array
          items:
            type: string
    OperationContainer:
      type: object
      properties:
        index:
          $ref: '#/components/schemas/IndexOperation'
        create:
          $ref: '#/components/schemas/CreateOperation'
        update:
          $ref: '#/components/schemas/UpdateOperation'
        delete:
          $ref: '#/components/schemas/DeleteOperation'
      minProperties: 1
      maxProperties: 1
    UpdateAction:
      type: object
      properties:
        detect_noop:
          description: |-
            When `false` disables the setting `result` in the response
            to `noop` if no change to the document occurred.
          type: boolean
        doc:
          description: A partial update to an existing document.
          type: object
        doc_as_upsert:
          description: When `true`, uses the contents of `doc` as the value of `upsert`.
          type: boolean
        script:
          $ref: '#/components/schemas/Script'
        scripted_upsert:
          description: When `true`, executes the script whether or not the document exists.
          type: boolean
        upsert:
          description: |-
            If the document does not already exist, the contents of `upsert` are inserted as a
            new document. If the document exists, the `script` is executed.
          type: object
        underscore_source:
          $ref: '#/components/schemas/SourceConfig'
    ResponseItem:
      type: object
      properties:
        status:
          description: HTTP status code returned for the operation.
          type: integer
          format: int32
        error:
          $ref: '#/components/schemas/ErrorCause'
        result:
          description: |-
            Result of the operation.
            Successful values are `created`, `deleted`, and `updated`.
          type: string
        forced_refresh:
          type: boolean
        get:
          $ref: '#/components/schemas/InlineGetDictUserDefined'
        underscore_type:
          description: The document type.
          type: string
          x-version-removed: '2.0'
        underscore_id:
          description: The document ID associated with the operation.
          type:
            - 'null'
            - string
        underscore_index:
          description: |-
            The name of the index associated with the operation.
            If the operation targets a data stream, this is the backing index into which the document was written.
          type: string
        underscore_primary_term:
          description: The primary term assigned to the document for the operation.
          type: integer
          format: int64
        underscore_seq_no:
          $ref: '#/components/schemas/SequenceNumber'
        underscore_shards:
          $ref: '#/components/schemas/ShardStatistics'
        underscore_version:
          $ref: '#/components/schemas/VersionNumber'
      required:
        - _index
        - status
    Indices:
      description: |-
        A comma-separated list of data streams, indexes, and aliases used to limit the request.
        Supports wildcards (`*`).
        To target all data streams and indexes, omit this parameter or use `*` or `_all`.
      oneOf:
        - $ref: '#/components/schemas/IndexName'
        - type: array
          items:
            $ref: '#/components/schemas/IndexName'
    Operator:
      type: string
      enum:
        - and
        - AND
        - or
        - OR
    ExpandWildcards:
      description: Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
      oneOf:
        - $ref: '#/components/schemas/ExpandWildcard'
        - type: array
          items:
            $ref: '#/components/schemas/ExpandWildcard'
    SearchType:
      oneOf:
        - type: string
          const: dfs_query_then_fetch
          description: Documents are scored using global term and document frequencies across all shards. This is usually slower but more accurate.
        - type: string
          const: query_then_fetch
          description: Documents are scored using local term and document frequencies for the shard. This is usually faster but less accurate.
    Field:
      description: The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
      type: string
    SuggestMode:
      type: string
      enum:
        - always
        - missing
        - popular
    TrackHits:
      description: |-
        The number of hits matching the query. When `true`, the exact
        number of hits is returned at the cost of some performance. When `false`, the
        response does not include the total number of hits matching the query.
        Default is `10,000` hits.
      oneOf:
        - title: enabled
          type: boolean
        - title: count
          type: integer
          format: int32
    AggregationContainer:
      allOf:
        - type: object
          properties:
            aggregations:
              description: |-
                Sub-aggregations for this aggregation.
                Only applies to bucket aggregations.
              type: object
              additionalProperties:
                $ref: '#/components/schemas/AggregationContainer'
            aggs:
              description: |-
                Sub-aggregations for this aggregation.
                Only applies to bucket aggregations.
              type: object
              additionalProperties:
                $ref: '#/components/schemas/AggregationContainer'
            meta:
              $ref: '#/components/schemas/Metadata'
        - type: object
          oneOf:
            - properties:
                adjacency_matrix:
                  $ref: '#/components/schemas/AdjacencyMatrixAggregation'
              required:
                - adjacency_matrix
              unevaluatedProperties: true
            - properties:
                auto_date_histogram:
                  $ref: '#/components/schemas/AutoDateHistogramAggregation'
              required:
                - auto_date_histogram
              unevaluatedProperties: true
            - properties:
                avg:
                  $ref: '#/components/schemas/AverageAggregation'
              required:
                - avg
              unevaluatedProperties: true
            - properties:
                avg_bucket:
                  $ref: '#/components/schemas/AverageBucketAggregation'
              required:
                - avg_bucket
              unevaluatedProperties: true
            - properties:
                boxplot:
                  $ref: '#/components/schemas/BoxplotAggregation'
              required:
                - boxplot
              unevaluatedProperties: true
            - properties:
                bucket_script:
                  $ref: '#/components/schemas/BucketScriptAggregation'
              required:
                - bucket_script
              unevaluatedProperties: true
            - properties:
                bucket_selector:
                  $ref: '#/components/schemas/BucketSelectorAggregation'
              required:
                - bucket_selector
              unevaluatedProperties: true
            - properties:
                bucket_sort:
                  $ref: '#/components/schemas/BucketSortAggregation'
              required:
                - bucket_sort
              unevaluatedProperties: true
            - properties:
                cardinality:
                  $ref: '#/components/schemas/CardinalityAggregation'
              required:
                - cardinality
              unevaluatedProperties: true
            - properties:
                children:
                  $ref: '#/components/schemas/ChildrenAggregation'
              required:
                - children
              unevaluatedProperties: true
            - properties:
                composite:
                  $ref: '#/components/schemas/CompositeAggregation'
              required:
                - composite
              unevaluatedProperties: true
            - properties:
                cumulative_cardinality:
                  $ref: '#/components/schemas/CumulativeCardinalityAggregation'
              required:
                - cumulative_cardinality
              unevaluatedProperties: true
            - properties:
                cumulative_sum:
                  $ref: '#/components/schemas/CumulativeSumAggregation'
              required:
                - cumulative_sum
              unevaluatedProperties: true
            - properties:
                date_histogram:
                  $ref: '#/components/schemas/DateHistogramAggregation'
              required:
                - date_histogram
              unevaluatedProperties: true
            - properties:
                date_range:
                  $ref: '#/components/schemas/DateRangeAggregation'
              required:
                - date_range
              unevaluatedProperties: true
            - properties:
                derivative:
                  $ref: '#/components/schemas/DerivativeAggregation'
              required:
                - derivative
              unevaluatedProperties: true
            - properties:
                diversified_sampler:
                  $ref: '#/components/schemas/DiversifiedSamplerAggregation'
              required:
                - diversified_sampler
              unevaluatedProperties: true
            - properties:
                extended_stats:
                  $ref: '#/components/schemas/ExtendedStatsAggregation'
              required:
                - extended_stats
              unevaluatedProperties: true
            - properties:
                extended_stats_bucket:
                  $ref: '#/components/schemas/ExtendedStatsBucketAggregation'
              required:
                - extended_stats_bucket
              unevaluatedProperties: true
            - properties:
                filter:
                  $ref: '#/components/schemas/QueryContainer'
              required:
                - filter
              unevaluatedProperties: true
            - properties:
                filters:
                  $ref: '#/components/schemas/FiltersAggregation'
              required:
                - filters
              unevaluatedProperties: true
            - properties:
                geo_bounds:
                  $ref: '#/components/schemas/GeoBoundsAggregation'
              required:
                - geo_bounds
              unevaluatedProperties: true
            - properties:
                geo_centroid:
                  $ref: '#/components/schemas/GeoCentroidAggregation'
              required:
                - geo_centroid
              unevaluatedProperties: true
            - properties:
                geo_distance:
                  $ref: '#/components/schemas/GeoDistanceAggregation'
              required:
                - geo_distance
              unevaluatedProperties: true
            - properties:
                geohash_grid:
                  $ref: '#/components/schemas/GeoHashGridAggregation'
              required:
                - geohash_grid
              unevaluatedProperties: true
            - properties:
                geo_line:
                  $ref: '#/components/schemas/GeoLineAggregation'
              required:
                - geo_line
              unevaluatedProperties: true
            - properties:
                geotile_grid:
                  $ref: '#/components/schemas/GeoTileGridAggregation'
              required:
                - geotile_grid
              unevaluatedProperties: true
            - properties:
                global:
                  $ref: '#/components/schemas/GlobalAggregation'
              required:
                - global
              unevaluatedProperties: true
            - properties:
                histogram:
                  $ref: '#/components/schemas/HistogramAggregation'
              required:
                - histogram
              unevaluatedProperties: true
            - properties:
                ip_range:
                  $ref: '#/components/schemas/IpRangeAggregation'
              required:
                - ip_range
              unevaluatedProperties: true
            - properties:
                inference:
                  $ref: '#/components/schemas/InferenceAggregation'
              required:
                - inference
              unevaluatedProperties: true
            - properties:
                line:
                  $ref: '#/components/schemas/GeoLineAggregation'
              required:
                - line
              unevaluatedProperties: true
            - properties:
                matrix_stats:
                  $ref: '#/components/schemas/MatrixStatsAggregation'
              required:
                - matrix_stats
              unevaluatedProperties: true
            - properties:
                max:
                  $ref: '#/components/schemas/MaxAggregation'
              required:
                - max
              unevaluatedProperties: true
            - properties:
                max_bucket:
                  $ref: '#/components/schemas/MaxBucketAggregation'
              required:
                - max_bucket
              unevaluatedProperties: true
            - properties:
                median_absolute_deviation:
                  $ref: '#/components/schemas/MedianAbsoluteDeviationAggregation'
              required:
                - median_absolute_deviation
              unevaluatedProperties: true
            - properties:
                min:
                  $ref: '#/components/schemas/MinAggregation'
              required:
                - min
              unevaluatedProperties: true
            - properties:
                min_bucket:
                  $ref: '#/components/schemas/MinBucketAggregation'
              required:
                - min_bucket
              unevaluatedProperties: true
            - properties:
                missing:
                  $ref: '#/components/schemas/MissingAggregation'
              required:
                - missing
              unevaluatedProperties: true
            - properties:
                moving_avg:
                  $ref: '#/components/schemas/MovingAverageAggregation'
              required:
                - moving_avg
              unevaluatedProperties: true
            - properties:
                moving_percentiles:
                  $ref: '#/components/schemas/MovingPercentilesAggregation'
              required:
                - moving_percentiles
              unevaluatedProperties: true
            - properties:
                moving_fn:
                  $ref: '#/components/schemas/MovingFunctionAggregation'
              required:
                - moving_fn
              unevaluatedProperties: true
            - properties:
                multi_terms:
                  $ref: '#/components/schemas/MultiTermsAggregation'
              required:
                - multi_terms
              unevaluatedProperties: true
            - properties:
                nested:
                  $ref: '#/components/schemas/NestedAggregation'
              required:
                - nested
              unevaluatedProperties: true
            - properties:
                normalize:
                  $ref: '#/components/schemas/NormalizeAggregation'
              required:
                - normalize
              unevaluatedProperties: true
            - properties:
                parent:
                  $ref: '#/components/schemas/ParentAggregation'
              required:
                - parent
              unevaluatedProperties: true
            - properties:
                percentile_ranks:
                  $ref: '#/components/schemas/PercentileRanksAggregation'
              required:
                - percentile_ranks
              unevaluatedProperties: true
            - properties:
                percentiles:
                  $ref: '#/components/schemas/PercentilesAggregation'
              required:
                - percentiles
              unevaluatedProperties: true
            - properties:
                percentiles_bucket:
                  $ref: '#/components/schemas/PercentilesBucketAggregation'
              required:
                - percentiles_bucket
              unevaluatedProperties: true
            - properties:
                range:
                  $ref: '#/components/schemas/RangeAggregation'
              required:
                - range
              unevaluatedProperties: true
            - properties:
                rare_terms:
                  $ref: '#/components/schemas/RareTermsAggregation'
              required:
                - rare_terms
              unevaluatedProperties: true
            - properties:
                rate:
                  $ref: '#/components/schemas/RateAggregation'
              required:
                - rate
              unevaluatedProperties: true
            - properties:
                reverse_nested:
                  $ref: '#/components/schemas/ReverseNestedAggregation'
              required:
                - reverse_nested
              unevaluatedProperties: true
            - properties:
                sampler:
                  $ref: '#/components/schemas/SamplerAggregation'
              required:
                - sampler
              unevaluatedProperties: true
            - properties:
                scripted_metric:
                  $ref: '#/components/schemas/ScriptedMetricAggregation'
              required:
                - scripted_metric
              unevaluatedProperties: true
            - properties:
                serial_diff:
                  $ref: '#/components/schemas/SerialDifferencingAggregation'
              required:
                - serial_diff
              unevaluatedProperties: true
            - properties:
                significant_terms:
                  $ref: '#/components/schemas/SignificantTermsAggregation'
              required:
                - significant_terms
              unevaluatedProperties: true
            - properties:
                significant_text:
                  $ref: '#/components/schemas/SignificantTextAggregation'
              required:
                - significant_text
              unevaluatedProperties: true
            - properties:
                stats:
                  $ref: '#/components/schemas/StatsAggregation'
              required:
                - stats
              unevaluatedProperties: true
            - properties:
                stats_bucket:
                  $ref: '#/components/schemas/StatsBucketAggregation'
              required:
                - stats_bucket
              unevaluatedProperties: true
            - properties:
                string_stats:
                  $ref: '#/components/schemas/StringStatsAggregation'
              required:
                - string_stats
              unevaluatedProperties: true
            - properties:
                sum:
                  $ref: '#/components/schemas/SumAggregation'
              required:
                - sum
              unevaluatedProperties: true
            - properties:
                sum_bucket:
                  $ref: '#/components/schemas/SumBucketAggregation'
              required:
                - sum_bucket
              unevaluatedProperties: true
            - properties:
                terms:
                  $ref: '#/components/schemas/TermsAggregation'
              required:
                - terms
              unevaluatedProperties: true
            - properties:
                top_hits:
                  $ref: '#/components/schemas/TopHitsAggregation'
              required:
                - top_hits
              unevaluatedProperties: true
            - properties:
                t_test:
                  $ref: '#/components/schemas/TTestAggregation'
              required:
                - t_test
              unevaluatedProperties: true
            - properties:
                top_metrics:
                  $ref: '#/components/schemas/TopMetricsAggregation'
              required:
                - top_metrics
              unevaluatedProperties: true
            - properties:
                value_count:
                  $ref: '#/components/schemas/ValueCountAggregation'
              required:
                - value_count
              unevaluatedProperties: true
            - properties:
                weighted_avg:
                  $ref: '#/components/schemas/WeightedAverageAggregation'
              required:
                - weighted_avg
              unevaluatedProperties: true
            - properties:
                variable_width_histogram:
                  $ref: '#/components/schemas/VariableWidthHistogramAggregation'
              required:
                - variable_width_histogram
              unevaluatedProperties: true
    FieldCollapse:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
        inner_hits:
          description: The number of inner hits and their sort order.
          oneOf:
            - $ref: '#/components/schemas/InnerHits'
            - type: array
              items:
                $ref: '#/components/schemas/InnerHits'
        max_concurrent_group_searches:
          description: The number of concurrent requests that are allowed to be retrieved by the `inner_hits` parameter per group.
          type: integer
      required:
        - field
    Highlight:
      allOf:
        - $ref: '#/components/schemas/HighlightBase'
        - type: object
          properties:
            encoder:
              $ref: '#/components/schemas/HighlighterEncoder'
            fields:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/HighlightField'
          required:
            - fields
    FieldAndFormat:
      oneOf:
        - title: field
          $ref: '#/components/schemas/Field'
        - type: object
          properties:
            field:
              $ref: '#/components/schemas/Field'
            format:
              description: Format in which the values are returned.
              type: string
            include_unmapped:
              type: boolean
          required:
            - field
    RankContainer:
      type: object
      properties:
        rrf:
          $ref: '#/components/schemas/RrfRank'
      minProperties: 1
      maxProperties: 1
    QueryContainer:
      type: object
      properties:
        bool:
          $ref: '#/components/schemas/BoolQuery'
        boosting:
          $ref: '#/components/schemas/BoostingQuery'
        common:
          deprecated: true
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/CommonTermsQuery'
          minProperties: 1
          maxProperties: 1
        combined_fields:
          $ref: '#/components/schemas/CombinedFieldsQuery'
        constant_score:
          $ref: '#/components/schemas/ConstantScoreQuery'
        dis_max:
          $ref: '#/components/schemas/DisMaxQuery'
        distance_feature:
          $ref: '#/components/schemas/DistanceFeatureQuery'
        exists:
          $ref: '#/components/schemas/ExistsQuery'
        function_score:
          $ref: '#/components/schemas/FunctionScoreQuery'
        fuzzy:
          description: Returns documents that contain terms similar to the search term, as measured by a Levenshtein edit distance.
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/FuzzyQuery'
          minProperties: 1
          maxProperties: 1
        geo_bounding_box:
          $ref: '#/components/schemas/GeoBoundingBoxQuery'
        geo_distance:
          $ref: '#/components/schemas/GeoDistanceQuery'
        geo_polygon:
          $ref: '#/components/schemas/GeoPolygonQuery'
        geo_shape:
          $ref: '#/components/schemas/GeoShapeQuery'
        has_child:
          $ref: '#/components/schemas/HasChildQuery'
        has_parent:
          $ref: '#/components/schemas/HasParentQuery'
        hybrid:
          $ref: '#/components/schemas/HybridQuery'
        ids:
          $ref: '#/components/schemas/IdsQuery'
        intervals:
          description: Returns documents based on the order and proximity of matching terms.
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/IntervalsQuery'
          minProperties: 1
          maxProperties: 1
        knn:
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/KnnQuery'
          minProperties: 1
          maxProperties: 1
        match:
          description: |-
            Returns documents that match a provided text, number, date or Boolean value.
            The provided text is analyzed before matching.
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/MatchQuery'
          minProperties: 1
          maxProperties: 1
        match_all:
          $ref: '#/components/schemas/MatchAllQuery'
        match_bool_prefix:
          description: |-
            Analyzes its input and constructs a `bool` query from the terms.
            Each term except the last is used in a `term` query.
            The last term is used in a prefix query.
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/MatchBoolPrefixQuery'
          minProperties: 1
          maxProperties: 1
        match_none:
          $ref: '#/components/schemas/MatchNoneQuery'
        match_phrase:
          description: Analyzes the text and creates a phrase query out of the analyzed text.
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/MatchPhraseQuery'
          minProperties: 1
          maxProperties: 1
        match_phrase_prefix:
          description: |-
            Returns documents that contain the words of a provided text, in the same order as provided.
            The last term of the provided text is treated as a prefix, matching any words that begin with that term.
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/MatchPhrasePrefixQuery'
          minProperties: 1
          maxProperties: 1
        more_like_this:
          $ref: '#/components/schemas/MoreLikeThisQuery'
        multi_match:
          $ref: '#/components/schemas/MultiMatchQuery'
        nested:
          $ref: '#/components/schemas/NestedQuery'
        neural:
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/NeuralQuery'
          minProperties: 1
          maxProperties: 1
        parent_id:
          $ref: '#/components/schemas/ParentIdQuery'
        percolate:
          $ref: '#/components/schemas/PercolateQuery'
        pinned:
          $ref: '#/components/schemas/PinnedQuery'
        prefix:
          description: Returns documents that contain a specific prefix in a provided field.
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/PrefixQuery'
          minProperties: 1
          maxProperties: 1
        query_string:
          $ref: '#/components/schemas/QueryStringQuery'
        range:
          description: Returns documents that contain terms within a provided range.
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/RangeQuery'
          minProperties: 1
          maxProperties: 1
        rank_feature:
          $ref: '#/components/schemas/RankFeatureQuery'
        regexp:
          description: Returns documents that contain terms matching a regular expression.
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/RegexpQuery'
          minProperties: 1
          maxProperties: 1
        script:
          $ref: '#/components/schemas/ScriptQuery'
        script_score:
          $ref: '#/components/schemas/ScriptScoreQuery'
        simple_query_string:
          $ref: '#/components/schemas/SimpleQueryStringQuery'
        span_containing:
          $ref: '#/components/schemas/SpanContainingQuery'
        field_masking_span:
          $ref: '#/components/schemas/SpanFieldMaskingQuery'
        span_first:
          $ref: '#/components/schemas/SpanFirstQuery'
        span_multi:
          $ref: '#/components/schemas/SpanMultiTermQuery'
        span_near:
          $ref: '#/components/schemas/SpanNearQuery'
        span_not:
          $ref: '#/components/schemas/SpanNotQuery'
        span_or:
          $ref: '#/components/schemas/SpanOrQuery'
        span_term:
          description: Matches spans containing a term.
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/SpanTermQuery'
          minProperties: 1
          maxProperties: 1
        span_within:
          $ref: '#/components/schemas/SpanWithinQuery'
        term:
          description: |-
            Returns documents that contain an exact term in a provided field.
            To return a document, the query term must exactly match the queried field's value, including white space and capitalization.
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/TermQuery'
          minProperties: 1
          maxProperties: 1
        terms:
          description: Returns documents that contain one or more exact terms in a provided field.
          $ref: '#/components/schemas/TermsQuery'
        terms_set:
          description: |-
            Returns documents that contain a minimum number of exact terms in a provided field.
            To return a document, a required number of terms must exactly match the field values, including white space and capitalization.
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/TermsSetQuery'
          minProperties: 1
          maxProperties: 1
        type:
          $ref: '#/components/schemas/TypeQuery'
        wildcard:
          description: Returns documents that contain terms matching a wildcard pattern.
          type: object
          propertyNames:
            $ref: '#/components/schemas/Field'
          additionalProperties:
            $ref: '#/components/schemas/WildcardQuery'
          minProperties: 1
          maxProperties: 1
        wrapper:
          $ref: '#/components/schemas/WrapperQuery'
        xy_shape:
          $ref: '#/components/schemas/XyShapeQuery'
      minProperties: 1
      maxProperties: 1
    Rescore:
      type: object
      properties:
        query:
          $ref: '#/components/schemas/RescoreQuery'
        window_size:
          type: integer
          format: int32
      required:
        - query
    ScriptField:
      type: object
      description: The configuration for a script field.
      properties:
        script:
          $ref: '#/components/schemas/Script'
          description: The script to execute for this field.
        ignore_failure:
          type: boolean
          description: Whether to ignore failures during script execution.
      required:
        - script
    SortResults:
      type: array
      items:
        $ref: '#/components/schemas/FieldValue'
    SlicedScroll:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
        id:
          type: integer
          format: int32
        max:
          type: integer
          format: int32
      required:
        - id
        - max
    Sort:
      oneOf:
        - $ref: '#/components/schemas/SortOptions'
          description: The single sort option.
        - type: array
          description: The list of sort options.
          items:
            $ref: '#/components/schemas/SortOptions'
    SourceConfig:
      description: Defines how to fetch a source. Fetching can be disabled entirely, or the source can be filtered.
      oneOf:
        - title: fetch
          type: boolean
        - title: filter
          $ref: '#/components/schemas/SourceFilter'
    Suggester:
      type: object
      properties:
        text:
          description: The global suggest text, which avoids repetition when the same text is used in several suggesters.
          type: string
      additionalProperties:
        title: suggesters
        description: The named suggesters.
        $ref: '#/components/schemas/FieldSuggester'
    PointInTimeReference:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        keep_alive:
          $ref: '#/components/schemas/Duration'
      required:
        - id
    ResponseBody:
      type: object
      properties:
        took:
          type: integer
          format: int64
        timed_out:
          type: boolean
        phase_took:
          x-version-added: '2.12'
          $ref: '#/components/schemas/PhaseTook'
        hits:
          $ref: '#/components/schemas/HitsMetadata'
        aggregations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Aggregate'
        fields:
          type: object
          additionalProperties:
            type: object
        max_score:
          type: number
          format: float
        num_reduce_phases:
          type: integer
          format: int32
        profile:
          $ref: '#/components/schemas/Profile'
        pit_id:
          $ref: '#/components/schemas/Id'
        suggest:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Suggest'
        terminated_early:
          type: boolean
        underscore_shards:
          $ref: '#/components/schemas/ShardStatistics'
        underscore_clusters:
          $ref: '#/components/schemas/ClusterStatistics'
        underscore_scroll_id:
          $ref: '#/components/schemas/ScrollId'
      required:
        - _shards
        - hits
        - timed_out
        - took
    ErrorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
        status:
          type: number
    Id:
      type: string
      description: The unique identifier for a resource.
    VersionNumber:
      type: integer
      format: int64
    VersionType:
      type: string
      enum:
        - external
        - external_gte
        - force
        - internal
    WriteResponseBase:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Result'
        forced_refresh:
          type: boolean
        underscore_type:
          $ref: '#/components/schemas/Type'
        underscore_id:
          $ref: '#/components/schemas/Id'
        underscore_index:
          $ref: '#/components/schemas/IndexName'
        underscore_primary_term:
          type: integer
          format: int64
        underscore_seq_no:
          $ref: '#/components/schemas/SequenceNumber'
        underscore_shards:
          $ref: '#/components/schemas/ShardStatistics'
        underscore_version:
          $ref: '#/components/schemas/VersionNumber'
      required:
        - _id
        - _index
        - _primary_term
        - _seq_no
        - _shards
        - _version
        - result
    GetResult:
      type: object
      properties:
        fields:
          type: object
          additionalProperties:
            type: object
        found:
          type: boolean
        underscore_type:
          $ref: '#/components/schemas/Type'
        underscore_index:
          $ref: '#/components/schemas/IndexName'
        underscore_id:
          $ref: '#/components/schemas/Id'
        underscore_primary_term:
          type: number
        underscore_routing:
          type: string
        underscore_seq_no:
          $ref: '#/components/schemas/SequenceNumber'
        underscore_source:
          type: object
        underscore_version:
          $ref: '#/components/schemas/VersionNumber'
      required:
        - _id
        - _index
        - found
    Type:
      type: string
      description: The type of document or resource.
      x-version-removed: '2.0'
    ExplanationDetail:
      type: object
      properties:
        description:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/ExplanationDetail'
        value:
          anyOf:
            - type: integer
              format: int32
            - type: integer
              format: int64
            - type: number
              format: float
            - type: number
              format: double
      required:
        - description
        - value
    InlineGet:
      type: object
      properties:
        fields:
          type: object
          additionalProperties:
            type: object
        found:
          type: boolean
        underscore_seq_no:
          $ref: '#/components/schemas/SequenceNumber'
        underscore_primary_term:
          type: number
        underscore_routing:
          $ref: '#/components/schemas/Routing'
        underscore_source:
          type: object
      required:
        - found
    SequenceNumber:
      type: integer
      format: int64
    Script:
      oneOf:
        - title: inline
          $ref: '#/components/schemas/InlineScript'
        - title: stored
          $ref: '#/components/schemas/StoredScriptId'
    UpdateWriteResponseBase:
      allOf:
        - $ref: '#/components/schemas/WriteResponseBase'
        - type: object
          properties:
            get:
              $ref: '#/components/schemas/InlineGet'
    WaitForActiveShardOptions:
      type: string
      enum:
        - all
        - index-setting
    IndexOperation:
      $ref: '#/components/schemas/WriteOperation'
    CreateOperation:
      $ref: '#/components/schemas/WriteOperation'
    UpdateOperation:
      allOf:
        - $ref: '#/components/schemas/OperationBase'
        - type: object
          properties:
            require_alias:
              description: When `true`, the request's actions must target an index alias.
              type: boolean
            retry_on_conflict:
              type: integer
              format: int32
    DeleteOperation:
      $ref: '#/components/schemas/OperationBase'
    ErrorCause:
      type: object
      properties:
        type:
          description: The type of error.
          type: string
        reason:
          description: A human-readable explanation of the error, in English.
          type: string
        stack_trace:
          description: The server stack trace, present only if the `error_trace=true` parameter was sent with the request.
          type: string
        caused_by:
          $ref: '#/components/schemas/ErrorCause'
        root_cause:
          type: array
          items:
            $ref: '#/components/schemas/ErrorCause'
        suppressed:
          type: array
          items:
            $ref: '#/components/schemas/ErrorCause'
      required:
        - type
      additionalProperties:
        title: metadata
        description: Any additional information about the error.
    ShardStatistics:
      type: object
      properties:
        failed:
          $ref: '#/components/schemas/uint'
        successful:
          $ref: '#/components/schemas/uint'
        total:
          $ref: '#/components/schemas/uint'
        failures:
          type: array
          items:
            $ref: '#/components/schemas/ShardFailure'
        skipped:
          $ref: '#/components/schemas/uint'
      required:
        - failed
        - successful
        - total
    InlineGetDictUserDefined:
      type: object
      properties:
        fields:
          type: object
          additionalProperties:
            type: object
        found:
          type: boolean
        underscore_seq_no:
          $ref: '#/components/schemas/SequenceNumber'
        underscore_primary_term:
          type: integer
          format: int32
        underscore_routing:
          $ref: '#/components/schemas/Routing'
        underscore_source:
          type: object
          additionalProperties: true
      required:
        - found
    ExpandWildcard:
      oneOf:
        - type: string
          const: all
          description: Match any index, including hidden ones.
        - type: string
          const: closed
          description: Match closed, non-hidden indexes.
        - type: string
          const: hidden
          description: Match hidden indexes. Must be combined with open, closed, or both.
        - type: string
          const: none
          description: Wildcard expressions are not accepted.
        - type: string
          const: open
          description: Match open, non-hidden indexes.
    Metadata:
      type: object
      description: The custom metadata attached to a resource.
      additionalProperties: true
    AdjacencyMatrixAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            filters:
              description: |-
                Filters used to create buckets.
                At least one filter is required.
              type: object
              additionalProperties:
                $ref: '#/components/schemas/QueryContainer'
    AutoDateHistogramAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            buckets:
              description: The target number of buckets.
              type: integer
              format: int32
            field:
              $ref: '#/components/schemas/Field'
            format:
              description: |-
                The date format used to format `key_as_string` in the response.
                If no `format` is specified, the first date format specified in the field mapping is used.
              type: string
            minimum_interval:
              $ref: '#/components/schemas/MinimumInterval'
            missing:
              $ref: '#/components/schemas/DateTime'
            offset:
              description: Time zone specified as a ISO 8601 UTC offset.
              type: string
            params:
              type: object
              additionalProperties: true
            script:
              $ref: '#/components/schemas/Script'
            time_zone:
              $ref: '#/components/schemas/TimeZone'
    AverageAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
    AverageBucketAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    BoxplotAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            compression:
              description: Limits the maximum number of nodes used by the underlying TDigest algorithm to `20 * compression`, enabling control of memory usage and approximation error.
              type: number
              format: double
    BucketScriptAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            script:
              $ref: '#/components/schemas/Script'
    BucketSelectorAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            script:
              $ref: '#/components/schemas/Script'
    BucketSortAggregation:
      allOf:
        - $ref: '#/components/schemas/Aggregation'
        - type: object
          properties:
            from:
              description: Buckets in positions prior to `from` will be truncated.
              type: integer
              format: int32
            gap_policy:
              $ref: '#/components/schemas/GapPolicy'
            size:
              description: |-
                The number of buckets to return.
                Defaults to all buckets of the parent aggregation.
              type: integer
              format: int32
            sort:
              $ref: '#/components/schemas/Sort'
    CardinalityAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            precision_threshold:
              description: |-
                A unique count below which counts are expected to be close to accurate.
                This allows to trade memory for accuracy.
              type: integer
              format: int32
            rehash:
              type: boolean
            execution_hint:
              $ref: '#/components/schemas/CardinalityExecutionMode'
    ChildrenAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/RelationName'
    CompositeAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            after:
              $ref: '#/components/schemas/CompositeAggregateKey'
            size:
              description: The number of composite buckets that should be returned.
              type: integer
              format: int32
            sources:
              description: |-
                The value sources used to build composite buckets.
                Keys are returned in the order of the `sources` definition.
              type: array
              items:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/CompositeAggregationSource'
    CumulativeCardinalityAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    CumulativeSumAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    DateHistogramAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            calendar_interval:
              $ref: '#/components/schemas/CalendarInterval'
            extended_bounds:
              $ref: '#/components/schemas/ExtendedBoundsFieldDateMath'
            hard_bounds:
              $ref: '#/components/schemas/ExtendedBoundsFieldDateMath'
            field:
              $ref: '#/components/schemas/Field'
            fixed_interval:
              $ref: '#/components/schemas/Duration'
            format:
              description: |-
                The date format used to format `key_as_string` in the response.
                If no `format` is specified, the first date format specified in the field mapping is used.
              type: string
            interval:
              $ref: '#/components/schemas/Duration'
            min_doc_count:
              description: |-
                Only returns buckets that have `min_doc_count` number of documents.
                By default, all buckets between the first bucket that matches documents and the last one are returned.
              type: integer
              format: int32
            missing:
              $ref: '#/components/schemas/DateTime'
            offset:
              $ref: '#/components/schemas/Duration'
            order:
              $ref: '#/components/schemas/HistogramOrder'
            params:
              type: object
              additionalProperties: true
            script:
              $ref: '#/components/schemas/Script'
            time_zone:
              $ref: '#/components/schemas/TimeZone'
            keyed:
              description: Set to `true` to associate a unique string key with each bucket and return the ranges as a hash rather than an array.
              type: boolean
    DateRangeAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            field:
              $ref: '#/components/schemas/Field'
            format:
              description: The date format used to format `from` and `to` in the response.
              type: string
            missing:
              $ref: '#/components/schemas/FieldValue'
            ranges:
              description: Array of date ranges.
              type: array
              items:
                $ref: '#/components/schemas/DateRangeExpression'
            time_zone:
              $ref: '#/components/schemas/TimeZone'
            keyed:
              description: Set to `true` to associate a unique string key with each bucket and returns the ranges as a hash rather than an array.
              type: boolean
    DerivativeAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    DiversifiedSamplerAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            execution_hint:
              $ref: '#/components/schemas/SamplerAggregationExecutionHint'
            max_docs_per_value:
              description: Limits how many documents are permitted per choice of de-duplicating value.
              type: integer
              format: int32
            script:
              $ref: '#/components/schemas/Script'
            shard_size:
              description: Limits how many top-scoring documents are collected in the sample processed on each shard.
              type: integer
              format: int32
            field:
              $ref: '#/components/schemas/Field'
    ExtendedStatsAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
          properties:
            sigma:
              description: The number of standard deviations above/below the mean to display.
              type: number
              format: double
    ExtendedStatsBucketAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            sigma:
              description: The number of standard deviations above/below the mean to display.
              type: number
              format: double
    FiltersAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            filters:
              $ref: '#/components/schemas/BucketsQueryContainer'
            other_bucket:
              description: Set to `true` to add a bucket to the response which will contain all documents that do not match any of the given filters.
              type: boolean
            other_bucket_key:
              description: The key with which the other bucket is returned.
              type: string
            keyed:
              description: |-
                By default, the named filters aggregation returns the buckets as an object.
                Set to `false` to return the buckets as an array of objects.
              type: boolean
    GeoBoundsAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            wrap_longitude:
              description: Specifies whether the bounding box should be allowed to overlap the international date line.
              type: boolean
    GeoCentroidAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            count:
              type: integer
              format: int64
            location:
              $ref: '#/components/schemas/GeoLocation'
    GeoDistanceAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            distance_type:
              $ref: '#/components/schemas/GeoDistanceType'
            field:
              $ref: '#/components/schemas/Field'
            origin:
              $ref: '#/components/schemas/GeoLocation'
            ranges:
              description: An array of ranges used to bucket documents.
              type: array
              items:
                $ref: '#/components/schemas/AggregationRange'
            unit:
              $ref: '#/components/schemas/DistanceUnit'
    GeoHashGridAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            bounds:
              $ref: '#/components/schemas/GeoBounds'
            field:
              $ref: '#/components/schemas/Field'
            precision:
              $ref: '#/components/schemas/GeoHashPrecision'
            shard_size:
              description: |-
                Allows for more accurate counting of the top cells returned in the final result the aggregation.
                Defaults to returning `max(10,(size x number-of-shards))` buckets from each shard.
              type: integer
              format: int32
            size:
              description: The maximum number of geohash buckets to return.
              type: integer
              format: int32
    GeoLineAggregation:
      type: object
      properties:
        point:
          $ref: '#/components/schemas/GeoLinePoint'
        sort:
          $ref: '#/components/schemas/GeoLineSort'
        include_sort:
          description: When `true`, returns an additional array of the sort values in the feature properties.
          type: boolean
        sort_order:
          $ref: '#/components/schemas/SortOrder'
        size:
          description: |-
            The maximum length of the line represented in the aggregation.
            Valid sizes are between 1 and 10000.
          type: integer
          format: int32
      required:
        - point
        - sort
    GeoTileGridAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            field:
              $ref: '#/components/schemas/Field'
            precision:
              $ref: '#/components/schemas/GeoTilePrecision'
            shard_size:
              description: |-
                Allows for more accurate counting of the top cells returned in the final result the aggregation.
                Defaults to returning `max(10,(size x number-of-shards))` buckets from each shard.
              type: integer
              format: int32
            size:
              description: The maximum number of buckets to return.
              type: integer
              format: int32
            bounds:
              $ref: '#/components/schemas/GeoBounds'
    GlobalAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
    HistogramAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            extended_bounds:
              $ref: '#/components/schemas/ExtendedBoundsdouble'
            hard_bounds:
              $ref: '#/components/schemas/ExtendedBoundsdouble'
            field:
              $ref: '#/components/schemas/Field'
            interval:
              description: |-
                The interval for the buckets.
                Must be a positive decimal.
              type: number
              format: double
            min_doc_count:
              description: |-
                Only returns buckets that have `min_doc_count` number of documents.
                By default, the response will fill gaps in the histogram with empty buckets.
              type: integer
              format: int32
            missing:
              description: |-
                The value to apply to documents that do not have a value.
                By default, documents without a value are ignored.
              type: number
              format: double
            offset:
              description: |-
                By default, the bucket keys start with 0 and then continue in even spaced steps of `interval`.
                The bucket boundaries can be shifted by using the `offset` option.
              type: number
              format: double
            order:
              $ref: '#/components/schemas/HistogramOrder'
            script:
              $ref: '#/components/schemas/Script'
            format:
              type: string
            keyed:
              description: If `true`, returns buckets as a hash instead of an array, keyed by the bucket keys.
              type: boolean
    IpRangeAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            field:
              $ref: '#/components/schemas/Field'
            ranges:
              description: Array of IP ranges.
              type: array
              items:
                $ref: '#/components/schemas/IpRangeAggregationRange'
    InferenceAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            model_id:
              $ref: '#/components/schemas/Name'
            inference_config:
              $ref: '#/components/schemas/InferenceConfigContainer'
          required:
            - model_id
    MatrixStatsAggregation:
      allOf:
        - $ref: '#/components/schemas/MatrixAggregation'
        - type: object
          properties:
            mode:
              $ref: '#/components/schemas/SortMode'
    MaxAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
    MaxBucketAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    MedianAbsoluteDeviationAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
          properties:
            compression:
              description: Limits the maximum number of nodes used by the underlying TDigest algorithm to `20 * compression`, enabling control of memory usage and approximation error.
              type: number
              format: double
    MinAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
    MinBucketAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    MissingAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            field:
              $ref: '#/components/schemas/Field'
            missing:
              $ref: '#/components/schemas/FieldValue'
    MovingAverageAggregation:
      type: object
      discriminator:
        propertyName: model
      oneOf:
        - $ref: '#/components/schemas/LinearMovingAverageAggregation'
        - $ref: '#/components/schemas/SimpleMovingAverageAggregation'
        - $ref: '#/components/schemas/EwmaMovingAverageAggregation'
        - $ref: '#/components/schemas/HoltMovingAverageAggregation'
        - $ref: '#/components/schemas/HoltWintersMovingAverageAggregation'
    MovingPercentilesAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            window:
              description: The size of window to "slide" across the histogram.
              type: integer
              format: int32
            shift:
              description: |-
                By default, the window consists of the last n values excluding the current bucket.
                Increasing `shift` by 1, moves the starting window position by 1 to the right.
              type: integer
              format: int32
            keyed:
              type: boolean
    MovingFunctionAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            script:
              description: The script that should be executed on each window of data.
              type: string
            shift:
              description: |-
                By default, the window consists of the last n values excluding the current bucket.
                Increasing `shift` by 1, moves the starting window position by 1 to the right.
              type: integer
              format: int32
            window:
              description: The size of window to "slide" across the histogram.
              type: integer
              format: int32
    MultiTermsAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            collect_mode:
              $ref: '#/components/schemas/TermsAggregationCollectMode'
            order:
              $ref: '#/components/schemas/HistogramOrder'
            min_doc_count:
              description: The minimum number of documents in a bucket for it to be returned.
              type: integer
              format: int32
            shard_min_doc_count:
              description: The minimum number of documents in a bucket on each shard for it to be returned.
              type: integer
              format: int32
            shard_size:
              description: |-
                The number of candidate terms produced by each shard.
                By default, `shard_size` will be automatically estimated based on the number of shards and the `size` parameter.
              type: integer
              format: int32
            show_term_doc_count_error:
              description: Calculates the doc count error on per term basis.
              type: boolean
            size:
              description: The number of term buckets should be returned out of the overall terms list.
              type: integer
              format: int32
            terms:
              description: The field from which to generate sets of terms.
              type: array
              items:
                $ref: '#/components/schemas/MultiTermLookup'
          required:
            - terms
    NestedAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            path:
              $ref: '#/components/schemas/Field'
    NormalizeAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            method:
              $ref: '#/components/schemas/NormalizeMethod'
    ParentAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/RelationName'
    PercentileRanksAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
          properties:
            keyed:
              description: |-
                By default, the aggregation associates a unique string key with each bucket and returns the ranges as a hash rather than an array.
                Set to `false` to disable this behavior.
              type: boolean
            values:
              description: An array of values for which to calculate the percentile ranks.
              type: array
              items:
                type: number
                format: double
            hdr:
              $ref: '#/components/schemas/HdrMethod'
            tdigest:
              $ref: '#/components/schemas/TDigest'
    PercentilesAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
          properties:
            keyed:
              description: |-
                By default, the aggregation associates a unique string key with each bucket and returns the ranges as a hash rather than an array.
                Set to `false` to disable this behavior.
              type: boolean
            percents:
              description: The percentiles to calculate.
              type: array
              items:
                type: number
                format: double
            hdr:
              $ref: '#/components/schemas/HdrMethod'
            tdigest:
              $ref: '#/components/schemas/TDigest'
    PercentilesBucketAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            percents:
              description: The list of percentiles to calculate.
              type: array
              items:
                type: number
                format: double
    RangeAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            field:
              $ref: '#/components/schemas/Field'
            missing:
              description: |-
                The value to apply to documents that do not have a value.
                By default, documents without a value are ignored.
              type: integer
              format: int32
            ranges:
              description: An array of ranges used to bucket documents.
              type: array
              items:
                $ref: '#/components/schemas/AggregationRange'
            script:
              $ref: '#/components/schemas/Script'
            keyed:
              description: Set to `true` to associate a unique string key with each bucket and return the ranges as a hash rather than an array.
              type: boolean
            format:
              type: string
    RareTermsAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            exclude:
              $ref: '#/components/schemas/TermsExclude'
            field:
              $ref: '#/components/schemas/Field'
            include:
              $ref: '#/components/schemas/TermsInclude'
            max_doc_count:
              description: The maximum number of documents a term should appear in.
              type: integer
              format: int64
            missing:
              $ref: '#/components/schemas/FieldValue'
            precision:
              description: |-
                The precision of the internal CuckooFilters.
                Smaller precision leads to better approximation, but higher memory usage.
              type: number
              format: double
            value_type:
              type: string
    RateAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
          properties:
            unit:
              $ref: '#/components/schemas/CalendarInterval'
            mode:
              $ref: '#/components/schemas/RateMode'
    ReverseNestedAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            path:
              $ref: '#/components/schemas/Field'
    SamplerAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            shard_size:
              description: Limits how many top-scoring documents are collected in the sample processed on each shard.
              type: integer
              format: int32
    ScriptedMetricAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            combine_script:
              $ref: '#/components/schemas/Script'
            init_script:
              $ref: '#/components/schemas/Script'
            map_script:
              $ref: '#/components/schemas/Script'
            params:
              description: |-
                A global object with script parameters for `init`, `map` and `combine` scripts.
                It is shared between the scripts.
              type: object
              additionalProperties: true
            reduce_script:
              $ref: '#/components/schemas/Script'
    SerialDifferencingAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            lag:
              description: |-
                The historical bucket to subtract from the current value.
                Must be a positive, non-zero integer.
              type: integer
              format: int32
    SignificantTermsAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            background_filter:
              $ref: '#/components/schemas/QueryContainer'
            chi_square:
              $ref: '#/components/schemas/ChiSquareHeuristic'
            exclude:
              $ref: '#/components/schemas/TermsExclude'
            execution_hint:
              $ref: '#/components/schemas/TermsAggregationExecutionHint'
            field:
              $ref: '#/components/schemas/Field'
            gnd:
              $ref: '#/components/schemas/GoogleNormalizedDistanceHeuristic'
            include:
              $ref: '#/components/schemas/TermsInclude'
            jlh:
              $ref: '#/components/schemas/EmptyObject'
            min_doc_count:
              description: Only return terms that are found in more than `min_doc_count` hits.
              type: integer
              format: int64
            mutual_information:
              $ref: '#/components/schemas/MutualInformationHeuristic'
            percentage:
              $ref: '#/components/schemas/PercentageScoreHeuristic'
            script_heuristic:
              $ref: '#/components/schemas/ScriptedHeuristic'
            shard_min_doc_count:
              description: |-
                Regulates the certainty a shard has if the term should actually be added to the candidate list or not with respect to the `min_doc_count`.
                Terms will only be considered if their local shard frequency within the set is higher than the `shard_min_doc_count`.
              type: integer
              format: int64
            shard_size:
              description: |-
                Can be used to control the volumes of candidate terms produced by each shard.
                By default, `shard_size` will be automatically estimated based on the number of shards and the `size` parameter.
              type: integer
              format: int32
            size:
              description: The number of buckets returned out of the overall terms list.
              type: integer
              format: int32
    SignificantTextAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            background_filter:
              $ref: '#/components/schemas/QueryContainer'
            chi_square:
              $ref: '#/components/schemas/ChiSquareHeuristic'
            exclude:
              $ref: '#/components/schemas/TermsExclude'
            execution_hint:
              $ref: '#/components/schemas/TermsAggregationExecutionHint'
            field:
              $ref: '#/components/schemas/Field'
            filter_duplicate_text:
              description: Whether to out duplicate text to deal with noisy data.
              type: boolean
            gnd:
              $ref: '#/components/schemas/GoogleNormalizedDistanceHeuristic'
            include:
              $ref: '#/components/schemas/TermsInclude'
            jlh:
              $ref: '#/components/schemas/EmptyObject'
            min_doc_count:
              description: Only return values that are found in more than `min_doc_count` hits.
              type: integer
              format: int64
            mutual_information:
              $ref: '#/components/schemas/MutualInformationHeuristic'
            percentage:
              $ref: '#/components/schemas/PercentageScoreHeuristic'
            script_heuristic:
              $ref: '#/components/schemas/ScriptedHeuristic'
            shard_min_doc_count:
              description: |-
                Regulates the certainty a shard has if the values should actually be added to the candidate list or not with respect to the `min_doc_count`.
                Values will only be considered if their local shard frequency within the set is higher than the `shard_min_doc_count`.
              type: integer
              format: int64
            shard_size:
              description: |-
                The number of candidate terms produced by each shard.
                By default, `shard_size` will be automatically estimated based on the number of shards and the `size` parameter.
              type: integer
              format: int32
            size:
              description: The number of buckets returned out of the overall terms list.
              type: integer
              format: int32
            source_fields:
              $ref: '#/components/schemas/Fields'
    StatsAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
    StatsBucketAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    StringStatsAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            show_distribution:
              description: Shows the probability distribution for all characters.
              type: boolean
    SumAggregation:
      allOf:
        - $ref: '#/components/schemas/FormatMetricAggregationBase'
        - type: object
    SumBucketAggregation:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
    TermsAggregation:
      allOf:
        - $ref: '#/components/schemas/BucketAggregationBase'
        - type: object
          properties:
            collect_mode:
              $ref: '#/components/schemas/TermsAggregationCollectMode'
            exclude:
              $ref: '#/components/schemas/TermsExclude'
            execution_hint:
              $ref: '#/components/schemas/TermsAggregationExecutionHint'
            field:
              $ref: '#/components/schemas/Field'
            include:
              $ref: '#/components/schemas/TermsInclude'
            min_doc_count:
              description: Only return values that are found in more than `min_doc_count` hits.
              type: integer
              format: int32
            missing:
              $ref: '#/components/schemas/FieldValue'
            missing_order:
              $ref: '#/components/schemas/MissingOrder'
            missing_bucket:
              type: boolean
            value_type:
              description: Coerced unmapped fields into the specified type.
              type: string
            order:
              $ref: '#/components/schemas/AggregateOrder'
            script:
              $ref: '#/components/schemas/Script'
            shard_size:
              description: |-
                The number of candidate terms produced by each shard.
                By default, `shard_size` will be automatically estimated based on the number of shards and the `size` parameter.
              type: integer
              format: int32
            show_term_doc_count_error:
              description: Set to `true` to return the `doc_count_error_upper_bound`, which is an upper bound to the error on the `doc_count` returned by each shard.
              type: boolean
            size:
              description: The number of buckets returned out of the overall terms list.
              type: integer
              format: int32
            format:
              type: string
    TopHitsAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            docvalue_fields:
              $ref: '#/components/schemas/Fields'
            explain:
              description: If `true`, returns detailed information about score computation as part of a hit.
              type: boolean
            from:
              description: Starting document offset.
              type: integer
              format: int32
            highlight:
              $ref: '#/components/schemas/Highlight'
            script_fields:
              description: Returns the result of one or more script evaluations for each hit.
              type: object
              additionalProperties:
                $ref: '#/components/schemas/ScriptField'
            size:
              description: The maximum number of top matching hits to return per bucket.
              type: integer
              format: int32
            sort:
              $ref: '#/components/schemas/Sort'
            stored_fields:
              $ref: '#/components/schemas/Fields'
            track_scores:
              description: If `true`, calculates and returns document scores, even if the scores are not used for sorting.
              type: boolean
            version:
              description: If `true`, returns document version as part of a hit.
              type: boolean
            seq_no_primary_term:
              description: If `true`, returns sequence number and primary term of the last modification of each hit.
              type: boolean
            underscore_source:
              $ref: '#/components/schemas/SourceConfig'
    TTestAggregation:
      allOf:
        - $ref: '#/components/schemas/Aggregation'
        - type: object
          properties:
            a:
              $ref: '#/components/schemas/TestPopulation'
            b:
              $ref: '#/components/schemas/TestPopulation'
            type:
              $ref: '#/components/schemas/TTestType'
    TopMetricsAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            metrics:
              description: The fields of the top document to return.
              oneOf:
                - $ref: '#/components/schemas/TopMetricsValue'
                - type: array
                  items:
                    $ref: '#/components/schemas/TopMetricsValue'
            size:
              description: The number of top documents from which to return metrics.
              type: integer
              format: int32
            sort:
              $ref: '#/components/schemas/Sort'
    ValueCountAggregation:
      allOf:
        - $ref: '#/components/schemas/FormattableMetricAggregation'
        - type: object
    WeightedAverageAggregation:
      allOf:
        - $ref: '#/components/schemas/Aggregation'
        - type: object
          properties:
            format:
              description: A numeric response formatter.
              type: string
            value:
              $ref: '#/components/schemas/WeightedAverageValue'
            value_type:
              $ref: '#/components/schemas/ValueType'
            weight:
              $ref: '#/components/schemas/WeightedAverageValue'
    VariableWidthHistogramAggregation:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
        buckets:
          description: The target number of buckets.
          type: integer
          format: int32
        shard_size:
          description: |-
            The number of buckets that the coordinating node will request from each shard.
            Defaults to `buckets * 50`.
          type: integer
          format: int32
        initial_buffer:
          description: |-
            Specifies the number of individual documents that will be stored in memory on a shard before the initial bucketing algorithm is run.
            Defaults to `min(10 * shard_size, 50000)`.
          type: integer
          format: int32
    InnerHits:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        size:
          description: The maximum number of hits to return per `inner_hits`.
          type: integer
          format: int32
        from:
          description: The inner hit that initiates document offset.
          type: integer
          format: int32
        collapse:
          $ref: '#/components/schemas/FieldCollapse'
        docvalue_fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldAndFormat'
        explain:
          type: boolean
        highlight:
          $ref: '#/components/schemas/Highlight'
        ignore_unmapped:
          type: boolean
        script_fields:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ScriptField'
        seq_no_primary_term:
          type: boolean
        fields:
          $ref: '#/components/schemas/Fields'
        sort:
          $ref: '#/components/schemas/Sort'
        stored_fields:
          $ref: '#/components/schemas/Fields'
        track_scores:
          type: boolean
        version:
          type: boolean
        underscore_source:
          $ref: '#/components/schemas/SourceConfig'
    HighlightBase:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/HighlighterType'
        boundary_chars:
          description: A string that contains each boundary character.
          type: string
        boundary_max_scan:
          description: How far to scan for boundary characters.
          type: integer
          format: int32
        boundary_scanner:
          $ref: '#/components/schemas/BoundaryScanner'
        boundary_scanner_locale:
          description: |-
            Controls which locale is used to search for sentence and word boundaries.
            This parameter takes the form of a language tag, for example, `"en-US"`, `"fr-FR"`, or `"ja-JP"`.
          type: string
        force_source:
          deprecated: true
          type: boolean
        fragmenter:
          $ref: '#/components/schemas/HighlighterFragmenter'
        fragment_offset:
          type: integer
          format: int32
        fragment_size:
          description: The size of the highlighted fragment in characters.
          type: integer
          format: int32
        highlight_filter:
          type: boolean
        highlight_query:
          $ref: '#/components/schemas/QueryContainer'
        max_fragment_length:
          type: integer
          format: int32
        max_analyzer_offset:
          description: |-
            If set to a non-negative value, highlighting stops at this defined maximum limit.
            The rest of the text is not processed or highlighted, and no error is returned.
            The `max_analyzer_offset` query setting does not override the `index.highlight.max_analyzed_offset` setting, which takes precedence when it is set to a lower value than the query setting.
          type: integer
          format: int32
        no_match_size:
          description: The amount of text you want to return from the beginning of the field if there are no matching fragments to highlight.
          type: integer
          format: int32
        number_of_fragments:
          description: |-
            The maximum number of fragments to return.
            When the number of fragments is set to `0`, no fragments are returned.
            Instead, the entirety of a field's contents are highlighted and returned.
            This is useful when you need to highlight short texts, such as a title or address, in which fragmentation is not required.
            If `number_of_fragments` is set to `0`, the `fragment_size` is ignored.
          type: integer
          format: int32
        options:
          type: object
          additionalProperties:
            type: object
        order:
          $ref: '#/components/schemas/HighlighterOrder'
        phrase_limit:
          description: |-
            Controls the number of matching phrases in a document that are considered.
            This prevents the `fvh` highlighter from analyzing too many phrases and consuming too much memory.
            When using `matched_fields`, phrase-limited phrases per matched field are considered. Raising the limit increases the query time and consumes more memory.
            This setting is only supported by the `fvh` highlighter.
          type: integer
          format: int32
        post_tags:
          description: |-
            When used in conjunction with `pre_tags`, defines the HTML tags to use for the highlighted text.
            By default, highlighted text is wrapped in `<em>` and `</em>` tags.
          type: array
          items:
            type: string
        pre_tags:
          description: |-
            When used in conjunction with `post_tags`, defines the HTML tags to use for the highlighted text.
            By default, highlighted text is wrapped in `<em>` and `</em>` tags.
          type: array
          items:
            type: string
        require_field_match:
          description: |-
            By default, only fields that contains a query match are highlighted.
            Set to `false` to highlight all fields.
          type: boolean
        tags_schema:
          $ref: '#/components/schemas/HighlighterTagsSchema'
    HighlighterEncoder:
      type: string
      enum:
        - default
        - html
    HighlightField:
      allOf:
        - $ref: '#/components/schemas/HighlightBase'
        - type: object
          properties:
            matched_fields:
              $ref: '#/components/schemas/Fields'
            analyzer:
              $ref: '#/components/schemas/Analyzer'
    RrfRank:
      allOf:
        - $ref: '#/components/schemas/RankBase'
        - type: object
          properties:
            rank_constant:
              description: To what degree documents found in individual result sets per query influence the final ranked result set.
              type: number
            window_size:
              description: The size of the individual result sets per query.
              type: number
    BoolQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            filter:
              description: |-
                The clause (query) must appear in matching documents.
                However, unlike `must`, the score of the query will be ignored.
              oneOf:
                - $ref: '#/components/schemas/QueryContainer'
                - type: array
                  items:
                    $ref: '#/components/schemas/QueryContainer'
            minimum_should_match:
              $ref: '#/components/schemas/MinimumShouldMatch'
            test:
              type: string
            testA:
              type: number
            must:
              description: The clause (query) must appear in matching documents and will contribute to the score.
              oneOf:
                - $ref: '#/components/schemas/QueryContainer'
                - type: array
                  items:
                    $ref: '#/components/schemas/QueryContainer'
            must_not:
              description: |-
                The clause (query) must not appear in the matching documents.
                Because scoring is ignored, a score of `0` is returned for all documents.
              oneOf:
                - $ref: '#/components/schemas/QueryContainer'
                - type: array
                  items:
                    $ref: '#/components/schemas/QueryContainer'
            should:
              description: The clause (query) should appear in the matching document.
              oneOf:
                - $ref: '#/components/schemas/QueryContainer'
                - type: array
                  items:
                    $ref: '#/components/schemas/QueryContainer'
            adjust_pure_negative:
              description: |-
                Ensures correct behavior when a query contains only `must_not` clauses.
                By default set to true, OpenSearch adds a match-all clause to ensure results are returned from Lucene, with the `must_not` conditions applied as filters.
                If set to false, the query may return no results, as Lucene typically requires at least one positive condition.
              type: boolean
              default: true
    BoostingQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            negative_boost:
              description: Floating point number between 0 and 1.0 used to decrease the relevance scores of documents matching the `negative` query.
              type: number
              format: float
            negative:
              $ref: '#/components/schemas/QueryContainer'
            positive:
              $ref: '#/components/schemas/QueryContainer'
          required:
            - negative
            - negative_boost
            - positive
    CommonTermsQuery:
      oneOf:
        - title: query
          type: string
        - allOf:
            - $ref: '#/components/schemas/QueryBase'
            - type: object
              properties:
                analyzer:
                  type: string
                cutoff_frequency:
                  type: number
                  format: float
                high_freq_operator:
                  $ref: '#/components/schemas/Operator'
                low_freq_operator:
                  $ref: '#/components/schemas/Operator'
                minimum_should_match:
                  $ref: '#/components/schemas/MinimumShouldMatch'
                query:
                  type: string
              required:
                - query
    CombinedFieldsQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            fields:
              description: List of fields to search. Field wildcard patterns are allowed. Only `text` fields are supported, and they must all have the same search `analyzer`.
              type: array
              items:
                $ref: '#/components/schemas/Field'
            query:
              description: |-
                Text to search for in the provided `fields`.
                The `combined_fields` query analyzes the provided text before performing a search.
              type: string
            auto_generate_synonyms_phrase_query:
              description: If `true`, match phrase queries are automatically created for multi-term synonyms.
              type: boolean
            operator:
              $ref: '#/components/schemas/CombinedFieldsOperator'
            minimum_should_match:
              $ref: '#/components/schemas/MinimumShouldMatch'
            zero_terms_query:
              $ref: '#/components/schemas/CombinedFieldsZeroTerms'
          required:
            - fields
            - query
    ConstantScoreQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            filter:
              $ref: '#/components/schemas/QueryContainer'
          required:
            - filter
    DisMaxQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            queries:
              description: |-
                One or more query clauses.
                Returned documents must match one or more of these queries.
                If a document matches multiple queries, OpenSearch uses the highest relevance score.
              type: array
              items:
                $ref: '#/components/schemas/QueryContainer'
            tie_breaker:
              description: Floating point number between 0 and 1.0 used to increase the relevance scores of documents matching multiple query clauses.
              type: number
              format: float
          required:
            - queries
    DistanceFeatureQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - oneOf:
            - type: object
              properties:
                origin:
                  $ref: '#/components/schemas/GeoLocation'
                pivot:
                  $ref: '#/components/schemas/Distance'
                field:
                  $ref: '#/components/schemas/Field'
              required:
                - field
                - origin
                - pivot
            - type: object
              properties:
                origin:
                  $ref: '#/components/schemas/DateMath'
                pivot:
                  $ref: '#/components/schemas/Duration'
                field:
                  $ref: '#/components/schemas/Field'
              required:
                - field
                - origin
                - pivot
    ExistsQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            field:
              $ref: '#/components/schemas/Field'
          required:
            - field
    FunctionScoreQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            boost_mode:
              $ref: '#/components/schemas/FunctionBoostMode'
            functions:
              description: One or more functions that compute a new score for each document returned by the query.
              type: array
              items:
                $ref: '#/components/schemas/FunctionScoreContainer'
            max_boost:
              description: Restricts the new score to not exceed the provided limit.
              type: number
              format: float
            min_score:
              description: Excludes documents that do not meet the provided score threshold.
              type: number
              format: float
            query:
              $ref: '#/components/schemas/QueryContainer'
            score_mode:
              $ref: '#/components/schemas/FunctionScoreMode'
    FuzzyQuery:
      oneOf:
        - title: value
          $ref: '#/components/schemas/FieldValue'
        - allOf:
            - $ref: '#/components/schemas/QueryBase'
            - type: object
              properties:
                max_expansions:
                  description: Maximum number of variations created.
                  type: integer
                  format: int32
                prefix_length:
                  description: Number of beginning characters left unchanged when creating expansions.
                  type: integer
                  format: int32
                rewrite:
                  $ref: '#/components/schemas/MultiTermQueryRewrite'
                transpositions:
                  description: Indicates whether edits include transpositions of two adjacent characters (for example, `ab` to `ba`).
                  type: boolean
                fuzziness:
                  $ref: '#/components/schemas/Fuzziness'
                value:
                  description: Term you wish to find in the provided field.
                  $ref: '#/components/schemas/FieldValue'
              required:
                - value
    GeoBoundingBoxQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/GeoExecution'
            validation_method:
              $ref: '#/components/schemas/GeoValidationMethod'
            ignore_unmapped:
              $ref: '#/components/schemas/IgnoreUnmapped'
          propertyNames:
            title: field
            type: string
          additionalProperties:
            title: bounding_box
            $ref: '#/components/schemas/GeoBounds'
          minProperties: 1
    GeoDistanceQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            distance:
              $ref: '#/components/schemas/Distance'
            distance_type:
              $ref: '#/components/schemas/GeoDistanceType'
            validation_method:
              $ref: '#/components/schemas/GeoValidationMethod'
            ignore_unmapped:
              $ref: '#/components/schemas/IgnoreUnmapped'
          propertyNames:
            title: field
            type: string
          additionalProperties:
            title: location
            $ref: '#/components/schemas/GeoLocation'
          minProperties: 2
          required:
            - distance
    GeoPolygonQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            validation_method:
              $ref: '#/components/schemas/GeoValidationMethod'
            ignore_unmapped:
              $ref: '#/components/schemas/IgnoreUnmapped'
          propertyNames:
            title: field
            type: string
          additionalProperties:
            title: polygon
            $ref: '#/components/schemas/GeoPolygonPoints'
          minProperties: 1
    GeoShapeQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            ignore_unmapped:
              $ref: '#/components/schemas/IgnoreUnmapped'
          propertyNames:
            title: field
            type: string
          additionalProperties:
            title: shape
            $ref: '#/components/schemas/GeoShapeQueryField'
          minProperties: 1
    HasChildQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            ignore_unmapped:
              $ref: '#/components/schemas/IgnoreUnmapped'
              description: Indicates whether to ignore an unmapped `type` and not return any documents instead of an error.
            inner_hits:
              $ref: '#/components/schemas/InnerHits'
            max_children:
              description: |-
                Maximum number of child documents that match the query allowed for a returned parent document.
                If the parent document exceeds this limit, it is excluded from the search results.
              type: integer
              format: int32
            min_children:
              description: |-
                Minimum number of child documents that match the query required to match the query for a returned parent document.
                If the parent document does not meet this limit, it is excluded from the search results.
              type: integer
              format: int32
            query:
              $ref: '#/components/schemas/QueryContainer'
            score_mode:
              $ref: '#/components/schemas/ChildScoreMode'
            type:
              $ref: '#/components/schemas/RelationName'
          required:
            - query
            - type
    HasParentQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            ignore_unmapped:
              $ref: '#/components/schemas/IgnoreUnmapped'
              description: |-
                Indicates whether to ignore an unmapped `parent_type` and not return any documents instead of an error.
                You can use this parameter to query multiple indexes that may not contain the `parent_type`.
            inner_hits:
              $ref: '#/components/schemas/InnerHits'
            parent_type:
              $ref: '#/components/schemas/RelationName'
            query:
              $ref: '#/components/schemas/QueryContainer'
            score:
              description: Indicates whether the relevance score of a matching parent document is aggregated into its child documents.
              type: boolean
          required:
            - parent_type
            - query
    HybridQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            queries:
              type: array
              items:
                $ref: '#/components/schemas/QueryContainer'
            pagination_depth:
              type: integer
              format: int32
    IdsQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            values:
              $ref: '#/components/schemas/Ids'
    IntervalsQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            all_of:
              $ref: '#/components/schemas/IntervalsAllOf'
            any_of:
              $ref: '#/components/schemas/IntervalsAnyOf'
            fuzzy:
              $ref: '#/components/schemas/IntervalsFuzzy'
            match:
              $ref: '#/components/schemas/IntervalsMatch'
            prefix:
              $ref: '#/components/schemas/IntervalsPrefix'
            wildcard:
              $ref: '#/components/schemas/IntervalsWildcard'
          minProperties: 1
          maxProperties: 1
    KnnQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            vector:
              $ref: '#/components/schemas/QueryVector'
            k:
              description: The total number of nearest neighbors to return as top hits.
              type: integer
              format: int32
            min_score:
              description: The minimum similarity score required in order for a neighbor to be considered a hit.
              type: number
              format: float
              x-version-added: '2.14'
            max_distance:
              description: The maximum physical vector space distance required in order for a neighbor to be considered a hit.
              type: number
              format: float
              x-version-added: '2.14'
            filter:
              description: The filter for the k-NN search query.
              $ref: '#/components/schemas/QueryContainer'
            method_parameters:
              type: object
              x-version-added: '2.16'
              additionalProperties: true
            rescore:
              $ref: '#/components/schemas/KnnQueryRescore'
              x-version-added: '2.17'
            expand_nested_docs:
              type: boolean
              x-version-added: '2.19'
          required:
            - vector
    MatchQuery:
      oneOf:
        - title: query
          $ref: '#/components/schemas/FieldValue'
        - allOf:
            - $ref: '#/components/schemas/QueryBase'
            - type: object
              properties:
                analyzer:
                  description: Analyzer used to convert the text in the query value into tokens.
                  type: string
                auto_generate_synonyms_phrase_query:
                  description: If `true`, match phrase queries are automatically created for multi-term synonyms.
                  type: boolean
                cutoff_frequency:
                  deprecated: true
                  type: number
                  format: float
                fuzziness:
                  $ref: '#/components/schemas/Fuzziness'
                fuzzy_rewrite:
                  $ref: '#/components/schemas/MultiTermQueryRewrite'
                fuzzy_transpositions:
                  description: If `true`, edits for fuzzy matching include transpositions of two adjacent characters (for example, `ab` to `ba`).
                  type: boolean
                lenient:
                  description: If `true`, format-based errors, such as providing a text query value for a numeric field, are ignored.
                  type: boolean
                max_expansions:
                  description: Maximum number of terms to which the query will expand.
                  type: integer
                  format: int32
                minimum_should_match:
                  $ref: '#/components/schemas/MinimumShouldMatch'
                operator:
                  $ref: '#/components/schemas/Operator'
                prefix_length:
                  description: Number of beginning characters left unchanged for fuzzy matching.
                  type: integer
                  format: int32
                query:
                  description: Text, number, Boolean value or date you wish to find in the provided field.
                  $ref: '#/components/schemas/FieldValue'
                zero_terms_query:
                  $ref: '#/components/schemas/ZeroTermsQuery'
              required:
                - query
    MatchAllQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties: {}
    MatchBoolPrefixQuery:
      oneOf:
        - title: query
          type: string
        - allOf:
            - $ref: '#/components/schemas/QueryBase'
            - type: object
              properties:
                analyzer:
                  description: Analyzer used to convert the text in the query value into tokens.
                  type: string
                fuzziness:
                  $ref: '#/components/schemas/Fuzziness'
                fuzzy_rewrite:
                  $ref: '#/components/schemas/MultiTermQueryRewrite'
                fuzzy_transpositions:
                  description: |-
                    If `true`, edits for fuzzy matching include transpositions of two adjacent characters (for example, `ab` to `ba`).
                    Can be applied to the term subqueries constructed for all terms but the final term.
                  type: boolean
                max_expansions:
                  description: |-
                    Maximum number of terms to which the query will expand.
                    Can be applied to the term subqueries constructed for all terms but the final term.
                  type: integer
                  format: int32
                minimum_should_match:
                  $ref: '#/components/schemas/MinimumShouldMatch'
                operator:
                  $ref: '#/components/schemas/Operator'
                prefix_length:
                  description: |-
                    Number of beginning characters left unchanged for fuzzy matching.
                    Can be applied to the term subqueries constructed for all terms but the final term.
                  type: integer
                  format: int32
                query:
                  description: |-
                    Terms you wish to find in the provided field.
                    The last term is used in a prefix query.
                  type: string
              required:
                - query
    MatchNoneQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
    MatchPhraseQuery:
      oneOf:
        - title: query
          type: string
        - allOf:
            - $ref: '#/components/schemas/QueryBase'
            - type: object
              properties:
                analyzer:
                  description: Analyzer used to convert the text in the query value into tokens.
                  type: string
                query:
                  description: Query terms that are analyzed and turned into a phrase query.
                  type: string
                slop:
                  description: Maximum number of positions allowed between matching tokens.
                  type: integer
                  format: int32
                zero_terms_query:
                  $ref: '#/components/schemas/ZeroTermsQuery'
              required:
                - query
    MatchPhrasePrefixQuery:
      oneOf:
        - title: query
          type: string
        - allOf:
            - $ref: '#/components/schemas/QueryBase'
            - type: object
              properties:
                analyzer:
                  description: Analyzer used to convert text in the query value into tokens.
                  type: string
                max_expansions:
                  description: Maximum number of terms to which the last provided term of the query value will expand.
                  type: integer
                  format: int32
                query:
                  description: Text you wish to find in the provided field.
                  type: string
                slop:
                  description: Maximum number of positions allowed between matching tokens.
                  type: integer
                  format: int32
                zero_terms_query:
                  $ref: '#/components/schemas/ZeroTermsQuery'
              required:
                - query
    MoreLikeThisQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            analyzer:
              description: |-
                The analyzer that is used to analyze the free form text.
                Defaults to the analyzer associated with the first field in fields.
              type: string
            boost_terms:
              description: |-
                Each term in the formed query could be further boosted by their tf-idf score.
                This sets the boost factor to use when using this feature.
                Defaults to deactivated (0).
              type: number
              format: float
            fail_on_unsupported_field:
              description: Controls whether the query should fail (throw an exception) if any of the specified fields are not of the supported types (`text` or `keyword`).
              type: boolean
            fields:
              description: |-
                A list of fields to fetch and analyze the text from.
                Defaults to the `index.query.default_field` index setting, which has a default value of `*`.
              type: array
              items:
                $ref: '#/components/schemas/Field'
            include:
              description: Specifies whether the input documents should also be included in the search results returned.
              type: boolean
            like:
              description: Specifies free form text and/or a single or multiple documents for which you want to find similar documents.
              oneOf:
                - $ref: '#/components/schemas/Like'
                - type: array
                  items:
                    $ref: '#/components/schemas/Like'
            max_doc_freq:
              description: The maximum document frequency above which the terms are ignored from the input document.
              type: integer
              format: int32
            max_query_terms:
              description: The maximum number of query terms that can be selected.
              type: integer
              format: int32
            max_word_length:
              description: |-
                The maximum word length above which the terms are ignored.
                Defaults to unbounded (`0`).
              type: integer
              format: int32
            min_doc_freq:
              description: The minimum document frequency below which the terms are ignored from the input document.
              type: integer
              format: int32
            minimum_should_match:
              $ref: '#/components/schemas/MinimumShouldMatch'
            min_term_freq:
              description: The minimum term frequency below which the terms are ignored from the input document.
              type: integer
              format: int32
            min_word_length:
              description: The minimum word length below which the terms are ignored.
              type: integer
              format: int32
            per_field_analyzer:
              description: Overrides the default analyzer.
              type: object
              additionalProperties:
                type: string
            routing:
              $ref: '#/components/schemas/Routing'
            stop_words:
              $ref: '#/components/schemas/StopWords'
            unlike:
              description: Used in combination with `like` to exclude documents that match a set of terms.
              oneOf:
                - $ref: '#/components/schemas/Like'
                - type: array
                  items:
                    $ref: '#/components/schemas/Like'
            version:
              $ref: '#/components/schemas/VersionNumber'
            version_type:
              $ref: '#/components/schemas/VersionType'
          required:
            - like
    MultiMatchQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            analyzer:
              description: Analyzer used to convert the text in the query value into tokens.
              type: string
            auto_generate_synonyms_phrase_query:
              description: If `true`, match phrase queries are automatically created for multi-term synonyms.
              type: boolean
            cutoff_frequency:
              deprecated: true
              type: number
              format: float
            fields:
              $ref: '#/components/schemas/Fields'
            fuzziness:
              $ref: '#/components/schemas/Fuzziness'
            fuzzy_rewrite:
              $ref: '#/components/schemas/MultiTermQueryRewrite'
            fuzzy_transpositions:
              description: |-
                If `true`, edits for fuzzy matching include transpositions of two adjacent characters (for example, `ab` to `ba`).
                Can be applied to the term subqueries constructed for all terms but the final term.
              type: boolean
            lenient:
              description: If `true`, format-based errors, such as providing a text query value for a numeric field, are ignored.
              type: boolean
            max_expansions:
              description: Maximum number of terms to which the query will expand.
              type: integer
              format: int32
            minimum_should_match:
              $ref: '#/components/schemas/MinimumShouldMatch'
            operator:
              $ref: '#/components/schemas/Operator'
            prefix_length:
              description: Number of beginning characters left unchanged for fuzzy matching.
              type: integer
              format: int32
            query:
              description: Text, number, Boolean value or date you wish to find in the provided field.
              type: string
            slop:
              description: Maximum number of positions allowed between matching tokens.
              type: integer
              format: int32
            tie_breaker:
              description: Determines how scores for each per-term blended query and scores across groups are combined.
              type: number
              format: float
            type:
              $ref: '#/components/schemas/TextQueryType'
            zero_terms_query:
              $ref: '#/components/schemas/ZeroTermsQuery'
          required:
            - query
    NestedQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            ignore_unmapped:
              $ref: '#/components/schemas/IgnoreUnmapped'
              description: Indicates whether to ignore an unmapped path and not return any documents instead of an error.
            inner_hits:
              $ref: '#/components/schemas/InnerHits'
            path:
              $ref: '#/components/schemas/Field'
            query:
              $ref: '#/components/schemas/QueryContainer'
            score_mode:
              $ref: '#/components/schemas/ChildScoreMode'
          required:
            - path
            - query
    NeuralQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            query_text:
              type: string
            query_image:
              type: string
              contentEncoding: base64
            model_id:
              type: string
            k:
              type: integer
            min_score:
              type: number
              format: float
            max_distance:
              type: number
              format: float
            filter:
              $ref: '#/components/schemas/QueryContainer'
    ParentIdQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/Id'
            ignore_unmapped:
              $ref: '#/components/schemas/IgnoreUnmapped'
              description: Indicates whether to ignore an unmapped `type` and not return any documents instead of an error.
            type:
              $ref: '#/components/schemas/RelationName'
    PercolateQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            document:
              description: The source of the document being percolated.
            documents:
              description: An array of sources of the documents being percolated.
              type: array
              items: {}
            field:
              $ref: '#/components/schemas/Field'
            id:
              $ref: '#/components/schemas/Id'
            index:
              $ref: '#/components/schemas/IndexName'
            name:
              description: The suffix used for the `_percolator_document_slot` field when multiple `percolate` queries are specified.
              type: string
            preference:
              description: Preference used to fetch document to percolate.
              type: string
            routing:
              $ref: '#/components/schemas/Routing'
            version:
              $ref: '#/components/schemas/VersionNumber'
          required:
            - field
    PinnedQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - allOf:
            - type: object
              properties:
                organic:
                  $ref: '#/components/schemas/QueryContainer'
              required:
                - organic
            - type: object
              properties:
                ids:
                  description: |-
                    Document IDs listed in the order they are to appear in results.
                    Required if `docs` is not specified.
                  type: array
                  items:
                    $ref: '#/components/schemas/Id'
                docs:
                  description: |-
                    Documents listed in the order they are to appear in results.
                    Required if `ids` is not specified.
                  type: array
                  items:
                    $ref: '#/components/schemas/PinnedDoc'
              minProperties: 1
              maxProperties: 1
    PrefixQuery:
      oneOf:
        - title: value
          type: string
        - allOf:
            - $ref: '#/components/schemas/QueryBase'
            - type: object
              properties:
                rewrite:
                  $ref: '#/components/schemas/MultiTermQueryRewrite'
                value:
                  description: Beginning characters of terms you wish to find in the provided field.
                  type: string
                case_insensitive:
                  description: |-
                    Allows ASCII case insensitive matching of the value with the indexed field values when set to `true`.
                    Default is `false` which means the case sensitivity of matching depends on the underlying field's mapping.
                  type: boolean
              required:
                - value
    QueryStringQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            allow_leading_wildcard:
              description: If `true`, the wildcard characters `*` and `?` are allowed as the first character of the query string.
              type: boolean
            analyzer:
              description: Analyzer used to convert text in the query string into tokens.
              type: string
            analyze_wildcard:
              description: If `true`, the query attempts to analyze wildcard terms in the query string.
              type: boolean
            auto_generate_synonyms_phrase_query:
              description: If `true`, match phrase queries are automatically created for multi-term synonyms.
              type: boolean
            default_field:
              $ref: '#/components/schemas/Field'
            default_operator:
              $ref: '#/components/schemas/Operator'
            enable_position_increments:
              description: If `true`, enable position increments in queries constructed from a `query_string` search.
              type: boolean
            escape:
              type: boolean
            fields:
              description: Array of fields to search. Supports wildcards (`*`).
              type: array
              items:
                $ref: '#/components/schemas/Field'
            fuzziness:
              $ref: '#/components/schemas/Fuzziness'
            fuzzy_max_expansions:
              description: Maximum number of terms to which the query expands for fuzzy matching.
              type: integer
              format: int32
            fuzzy_prefix_length:
              description: Number of beginning characters left unchanged for fuzzy matching.
              type: integer
              format: int32
            fuzzy_rewrite:
              $ref: '#/components/schemas/MultiTermQueryRewrite'
            fuzzy_transpositions:
              description: If `true`, edits for fuzzy matching include transpositions of two adjacent characters (for example, `ab` to `ba`).
              type: boolean
            lenient:
              description: If `true`, format-based errors, such as providing a text value for a numeric field, are ignored.
              type: boolean
            max_determinized_states:
              description: Maximum number of automaton states required for the query.
              type: integer
              format: int32
            minimum_should_match:
              $ref: '#/components/schemas/MinimumShouldMatch'
            phrase_slop:
              description: Maximum number of positions allowed between matching tokens for phrases.
              type: integer
              format: int32
            query:
              description: Query string you wish to parse and use for search.
              type: string
            quote_analyzer:
              description: |-
                Analyzer used to convert quoted text in the query string into tokens.
                For quoted text, this parameter overrides the analyzer specified in the `analyzer` parameter.
              type: string
            quote_field_suffix:
              description: |-
                Suffix appended to quoted text in the query string.
                You can use this suffix to use a different analysis method for exact matches.
              type: string
            rewrite:
              $ref: '#/components/schemas/MultiTermQueryRewrite'
            tie_breaker:
              description: How to combine the queries generated from the individual search terms in the resulting `dis_max` query.
              type: number
              format: float
            time_zone:
              $ref: '#/components/schemas/TimeZone'
            type:
              $ref: '#/components/schemas/TextQueryType'
          required:
            - query
    RangeQuery:
      oneOf:
        - $ref: '#/components/schemas/NumberRangeQueryParameters'
        - $ref: '#/components/schemas/DateRangeQueryParameters'
    RankFeatureQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            field:
              $ref: '#/components/schemas/Field'
            saturation:
              $ref: '#/components/schemas/RankFeatureFunctionSaturation'
            log:
              $ref: '#/components/schemas/RankFeatureFunctionLogarithm'
            linear:
              $ref: '#/components/schemas/RankFeatureFunctionLinear'
            sigmoid:
              $ref: '#/components/schemas/RankFeatureFunctionSigmoid'
          required:
            - field
    RegexpQuery:
      oneOf:
        - title: value
          type: string
        - allOf:
            - $ref: '#/components/schemas/QueryBase'
            - type: object
              properties:
                case_insensitive:
                  description: |-
                    Allows case insensitive matching of the regular expression value with the indexed field values when set to `true`.
                    When `false`, case sensitivity of matching depends on the underlying field's mapping.
                  type: boolean
                flags:
                  description: Enables optional operators for the regular expression.
                  type: string
                max_determinized_states:
                  description: Maximum number of automaton states required for the query.
                  type: integer
                  format: int32
                rewrite:
                  $ref: '#/components/schemas/MultiTermQueryRewrite'
                value:
                  description: Regular expression for terms you wish to find in the provided field.
                  type: string
              required:
                - value
    ScriptQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            script:
              $ref: '#/components/schemas/Script'
          required:
            - script
    ScriptScoreQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            min_score:
              description: Documents with a score lower than this floating point number are excluded from the search results.
              type: number
              format: float
            query:
              $ref: '#/components/schemas/QueryContainer'
            script:
              $ref: '#/components/schemas/Script'
          required:
            - query
            - script
    SimpleQueryStringQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            analyzer:
              description: Analyzer used to convert text in the query string into tokens.
              type: string
            analyze_wildcard:
              description: If `true`, the query attempts to analyze wildcard terms in the query string.
              type: boolean
            auto_generate_synonyms_phrase_query:
              description: If `true`, the parser creates a `match_phrase` query for each multi-position token.
              type: boolean
            default_operator:
              $ref: '#/components/schemas/Operator'
            fields:
              description: |-
                Array of fields you wish to search.
                Accepts wildcard expressions.
                You also can boost relevance scores for matches to particular fields using a caret (`^`) notation.
                Defaults to the `index.query.default_field index` setting, which has a default value of `*`.
              type: array
              items:
                $ref: '#/components/schemas/Field'
            flags:
              $ref: '#/components/schemas/SimpleQueryStringFlags'
            fuzzy_max_expansions:
              description: Maximum number of terms to which the query expands for fuzzy matching.
              type: integer
              format: int32
            fuzzy_prefix_length:
              description: Number of beginning characters left unchanged for fuzzy matching.
              type: integer
              format: int32
            fuzzy_transpositions:
              description: If `true`, edits for fuzzy matching include transpositions of two adjacent characters (for example, `ab` to `ba`).
              type: boolean
            lenient:
              description: If `true`, format-based errors, such as providing a text value for a numeric field, are ignored.
              type: boolean
            minimum_should_match:
              $ref: '#/components/schemas/MinimumShouldMatch'
            query:
              description: Query string in the simple query string syntax you wish to parse and use for search.
              type: string
            quote_field_suffix:
              description: Suffix appended to quoted text in the query string.
              type: string
          required:
            - query
    SpanContainingQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            big:
              $ref: '#/components/schemas/SpanQuery'
            little:
              $ref: '#/components/schemas/SpanQuery'
          required:
            - big
            - little
    SpanFieldMaskingQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            field:
              $ref: '#/components/schemas/Field'
            query:
              $ref: '#/components/schemas/SpanQuery'
          required:
            - field
            - query
    SpanFirstQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            end:
              description: Controls the maximum end position permitted in a match.
              type: integer
              format: int32
            match:
              $ref: '#/components/schemas/SpanQuery'
          required:
            - end
            - match
    SpanMultiTermQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            match:
              $ref: '#/components/schemas/QueryContainer'
          required:
            - match
    SpanNearQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            clauses:
              description: Array of one or more other span type queries.
              type: array
              items:
                $ref: '#/components/schemas/SpanQuery'
            in_order:
              description: Controls whether matches are required to be in-order.
              type: boolean
            slop:
              description: Controls the maximum number of intervening unmatched positions permitted.
              type: integer
              format: int32
          required:
            - clauses
    SpanNotQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            dist:
              description: |-
                The number of tokens from within the include span that can't have overlap with the exclude span.
                Equivalent to setting both `pre` and `post`.
              type: integer
              format: int32
            exclude:
              $ref: '#/components/schemas/SpanQuery'
            include:
              $ref: '#/components/schemas/SpanQuery'
            post:
              description: The number of tokens after the include span that can't have overlap with the exclude span.
              type: integer
              format: int32
            pre:
              description: The number of tokens before the include span that can't have overlap with the exclude span.
              type: integer
              format: int32
          required:
            - exclude
            - include
    SpanOrQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            clauses:
              description: Array of one or more other span type queries.
              type: array
              items:
                $ref: '#/components/schemas/SpanQuery'
          required:
            - clauses
    SpanTermQuery:
      oneOf:
        - title: value
          type: string
        - allOf:
            - $ref: '#/components/schemas/QueryBase'
            - type: object
              properties:
                value:
                  type: string
              required:
                - value
    SpanWithinQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            big:
              $ref: '#/components/schemas/SpanQuery'
            little:
              $ref: '#/components/schemas/SpanQuery'
          required:
            - big
            - little
    TermQuery:
      oneOf:
        - title: value
          $ref: '#/components/schemas/FieldValue'
        - allOf:
            - $ref: '#/components/schemas/QueryBase'
            - type: object
              properties:
                value:
                  $ref: '#/components/schemas/FieldValue'
                case_insensitive:
                  description: |-
                    Allows ASCII case insensitive matching of the value with the indexed field values when set to `true`.
                    When `false`, the case sensitivity of matching depends on the underlying field's mapping.
                  type: boolean
              required:
                - value
    TermsQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            boost: {}
            underscore_name: {}
          propertyNames:
            title: field
            type: string
          additionalProperties:
            title: terms
            $ref: '#/components/schemas/TermsQueryField'
          minProperties: 1
    TermsSetQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            minimum_should_match_field:
              $ref: '#/components/schemas/Field'
            minimum_should_match_script:
              $ref: '#/components/schemas/Script'
            terms:
              type: array
              items:
                type: string
          required:
            - terms
    TypeQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            value:
              type: string
          required:
            - value
    WildcardQuery:
      oneOf:
        - title: value
          type: string
        - allOf:
            - $ref: '#/components/schemas/QueryBase'
            - type: object
              properties:
                case_insensitive:
                  description: Allows case insensitive matching of the pattern with the indexed field values when set to `true`. Default is `false` which means the case sensitivity of matching depends on the underlying field's mapping.
                  type: boolean
                rewrite:
                  $ref: '#/components/schemas/MultiTermQueryRewrite'
                value:
                  description: Wildcard pattern for terms you wish to find in the provided field. Required, when wildcard is not set.
                  type: string
                wildcard:
                  description: Wildcard pattern for terms you wish to find in the provided field. Required, when value is not set.
                  type: string
    WrapperQuery:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            query:
              description: |-
                A base64 encoded query.
                The binary data format can be any of JSON, YAML, CBOR or SMILE encodings
              type: string
          required:
            - query
    XyShapeQuery:
      x-version-added: '2.4'
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            ignore_unmapped:
              type: boolean
          propertyNames:
            title: field
            type: string
          additionalProperties:
            title: xy_shape
            $ref: '#/components/schemas/XyShapeQueryField'
          minProperties: 1
    RescoreQuery:
      type: object
      properties:
        rescore_query:
          $ref: '#/components/schemas/QueryContainer'
        query_weight:
          description: The relative importance of the original query as compared to the rescore query.
          type: number
          format: float
        rescore_query_weight:
          description: The relative importance of the rescore query as compared to the original query.
          type: number
          format: float
        score_mode:
          $ref: '#/components/schemas/ScoreMode'
      required:
        - rescore_query
    FieldValue:
      description: A field value.
      type:
        - boolean
        - 'null'
        - number
        - string
    SortOptions:
      oneOf:
        - type: string
          const: _score
          description: Sort by document score.
        - type: string
          const: _doc
          description: Sort by document index order.
        - type: string
          description: Sort by field name.
          not:
            type: string
            enum:
              - _doc
              - _score
        - type: object
          description: Sort by score options.
          properties:
            underscore_score:
              $ref: '#/components/schemas/ScoreSort'
            underscore_doc:
              $ref: '#/components/schemas/ScoreSort'
            underscore_geo_distance:
              $ref: '#/components/schemas/GeoDistanceSort'
            underscore_script:
              $ref: '#/components/schemas/ScriptSort'
          minProperties: 1
          maxProperties: 1
        - type: object
          description: Sort by field options.
          propertyNames:
            allOf:
              - $ref: '#/components/schemas/Field'
              - not:
                  type: string
                  enum:
                    - _doc
                    - _geo_distance
                    - _score
                    - _script
          additionalProperties:
            $ref: '#/components/schemas/FieldSort'
          minProperties: 1
          maxProperties: 1
    SourceFilter:
      oneOf:
        - title: includes
          $ref: '#/components/schemas/Fields'
        - type: object
          properties:
            excludes:
              $ref: '#/components/schemas/Fields'
            includes:
              $ref: '#/components/schemas/Fields'
    FieldSuggester:
      allOf:
        - type: object
          properties:
            prefix:
              type: string
            regex:
              type: string
            text:
              type: string
        - type: object
          properties:
            completion:
              $ref: '#/components/schemas/CompletionSuggester'
            phrase:
              $ref: '#/components/schemas/PhraseSuggester'
            term:
              $ref: '#/components/schemas/TermSuggester'
          minProperties: 1
          maxProperties: 1
    PhaseTook:
      type: object
      properties:
        dfs_pre_query:
          $ref: '#/components/schemas/uint'
        query:
          $ref: '#/components/schemas/uint'
        fetch:
          $ref: '#/components/schemas/uint'
        dfs_query:
          $ref: '#/components/schemas/uint'
        expand:
          $ref: '#/components/schemas/uint'
        can_match:
          $ref: '#/components/schemas/uint'
      required:
        - can_match
        - dfs_pre_query
        - dfs_query
        - expand
        - fetch
        - query
    HitsMetadata:
      type: object
      properties:
        total:
          description: The total number of hits, present only if `track_total_hits` is not set to `false` in the search request.
          oneOf:
            - $ref: '#/components/schemas/TotalHits'
            - type: integer
              format: int64
        hits:
          type: array
          items:
            $ref: '#/components/schemas/Hit'
        max_score:
          type:
            - 'null'
            - number
            - string
      required:
        - hits
    Aggregate:
      anyOf:
        - $ref: '#/components/schemas/CardinalityAggregate'
        - $ref: '#/components/schemas/HdrPercentilesAggregate'
        - $ref: '#/components/schemas/HdrPercentileRanksAggregate'
        - $ref: '#/components/schemas/TDigestPercentilesAggregate'
        - $ref: '#/components/schemas/TDigestPercentileRanksAggregate'
        - $ref: '#/components/schemas/PercentilesBucketAggregate'
        - $ref: '#/components/schemas/MedianAbsoluteDeviationAggregate'
        - $ref: '#/components/schemas/MinAggregate'
        - $ref: '#/components/schemas/MaxAggregate'
        - $ref: '#/components/schemas/SumAggregate'
        - $ref: '#/components/schemas/AvgAggregate'
        - $ref: '#/components/schemas/WeightedAvgAggregate'
        - $ref: '#/components/schemas/ValueCountAggregate'
        - $ref: '#/components/schemas/SimpleValueAggregate'
        - $ref: '#/components/schemas/DerivativeAggregate'
        - $ref: '#/components/schemas/BucketMetricValueAggregate'
        - $ref: '#/components/schemas/StatsAggregate'
        - $ref: '#/components/schemas/StatsBucketAggregate'
        - $ref: '#/components/schemas/ExtendedStatsAggregate'
        - $ref: '#/components/schemas/ExtendedStatsBucketAggregate'
        - $ref: '#/components/schemas/GeoBoundsAggregate'
        - $ref: '#/components/schemas/GeoCentroidAggregate'
        - $ref: '#/components/schemas/HistogramAggregate'
        - $ref: '#/components/schemas/DateHistogramAggregate'
        - $ref: '#/components/schemas/AutoDateHistogramAggregate'
        - $ref: '#/components/schemas/VariableWidthHistogramAggregate'
        - $ref: '#/components/schemas/StringTermsAggregate'
        - $ref: '#/components/schemas/LongTermsAggregate'
        - $ref: '#/components/schemas/DoubleTermsAggregate'
        - $ref: '#/components/schemas/UnmappedTermsAggregate'
        - $ref: '#/components/schemas/LongRareTermsAggregate'
        - $ref: '#/components/schemas/StringRareTermsAggregate'
        - $ref: '#/components/schemas/UnmappedRareTermsAggregate'
        - $ref: '#/components/schemas/MultiTermsAggregate'
        - $ref: '#/components/schemas/MissingAggregate'
        - $ref: '#/components/schemas/NestedAggregate'
        - $ref: '#/components/schemas/ReverseNestedAggregate'
        - $ref: '#/components/schemas/GlobalAggregate'
        - $ref: '#/components/schemas/FilterAggregate'
        - $ref: '#/components/schemas/ChildrenAggregate'
        - $ref: '#/components/schemas/ParentAggregate'
        - $ref: '#/components/schemas/SamplerAggregate'
        - $ref: '#/components/schemas/UnmappedSamplerAggregate'
        - $ref: '#/components/schemas/GeoHashGridAggregate'
        - $ref: '#/components/schemas/GeoTileGridAggregate'
        - $ref: '#/components/schemas/RangeAggregate'
        - $ref: '#/components/schemas/DateRangeAggregate'
        - $ref: '#/components/schemas/GeoDistanceAggregate'
        - $ref: '#/components/schemas/IpRangeAggregate'
        - $ref: '#/components/schemas/FiltersAggregate'
        - $ref: '#/components/schemas/AdjacencyMatrixAggregate'
        - $ref: '#/components/schemas/SignificantLongTermsAggregate'
        - $ref: '#/components/schemas/SignificantStringTermsAggregate'
        - $ref: '#/components/schemas/UnmappedSignificantTermsAggregate'
        - $ref: '#/components/schemas/CompositeAggregate'
        - $ref: '#/components/schemas/ScriptedMetricAggregate'
        - $ref: '#/components/schemas/TopHitsAggregate'
        - $ref: '#/components/schemas/InferenceAggregate'
        - $ref: '#/components/schemas/StringStatsAggregate'
        - $ref: '#/components/schemas/BoxPlotAggregate'
        - $ref: '#/components/schemas/TopMetricsAggregate'
        - $ref: '#/components/schemas/TTestAggregate'
        - $ref: '#/components/schemas/RateAggregate'
        - $ref: '#/components/schemas/CumulativeCardinalityAggregate'
        - $ref: '#/components/schemas/MatrixStatsAggregate'
        - $ref: '#/components/schemas/GeoLineAggregate'
    ClusterStatistics:
      type: object
      properties:
        skipped:
          type: integer
          format: int32
        successful:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        running:
          type: integer
          format: int32
        partial:
          type: integer
          format: int32
        failed:
          type: integer
          format: int32
        details:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ClusterDetails'
      required:
        - failed
        - partial
        - running
        - skipped
        - successful
        - total
    Profile:
      type: object
      properties:
        shards:
          type: array
          items:
            $ref: '#/components/schemas/ShardProfile'
      required:
        - shards
    ScrollId:
      type: string
    Suggest:
      oneOf:
        - title: completion
          $ref: '#/components/schemas/CompletionSuggest'
        - title: phrase
          $ref: '#/components/schemas/PhraseSuggest'
        - title: term
          $ref: '#/components/schemas/TermSuggest'
    Error:
      type: object
      properties:
        root_cause:
          type: array
          items:
            $ref: '#/components/schemas/RootCause'
        type:
          type: string
        reason:
          type: string
      required:
        - reason
        - root_cause
        - type
    Result:
      type: string
      enum:
        - created
        - deleted
        - noop
        - not_found
        - updated
    Routing:
      type: string
    InlineScript:
      oneOf:
        - title: source
          type: string
        - allOf:
            - $ref: '#/components/schemas/ScriptBase'
            - type: object
              properties:
                lang:
                  $ref: '#/components/schemas/ScriptLanguage'
                options:
                  type: object
                  additionalProperties:
                    type: string
                source:
                  description: The script source.
                  type: string
              required:
                - source
    StoredScriptId:
      allOf:
        - $ref: '#/components/schemas/ScriptBase'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/Id'
          required:
            - id
    WriteOperation:
      allOf:
        - $ref: '#/components/schemas/OperationBase'
        - type: object
          properties:
            dynamic_templates:
              description: |-
                A map from the full name of fields to the name of dynamic templates.
                If a name matches a dynamic template, then that template will be applied regardless of other match predicates defined in the template.
                If a field is already defined in the mapping, then this parameter won't be used.
              type: object
              additionalProperties:
                type: string
            pipeline:
              description: |-
                The pipeline ID for preprocessing documents.
                When the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request.
                When a final pipeline is configured, that pipeline will always run, regardless of the value of this parameter.
              type: string
            require_alias:
              description: When `true`, require that all actions target an index alias rather than an index. Default is `false`.
              type: boolean
    OperationBase:
      type: object
      properties:
        routing:
          $ref: '#/components/schemas/Routing'
        if_primary_term:
          type: integer
          format: int64
        if_seq_no:
          $ref: '#/components/schemas/SequenceNumber'
        version:
          $ref: '#/components/schemas/VersionNumber'
        version_type:
          $ref: '#/components/schemas/VersionType'
        underscore_id:
          $ref: '#/components/schemas/Id'
        underscore_index:
          $ref: '#/components/schemas/IndexName'
    uint:
      type: integer
    ShardFailure:
      type: object
      properties:
        index:
          $ref: '#/components/schemas/IndexName'
        node:
          type: string
        reason:
          $ref: '#/components/schemas/ErrorCause'
        shard:
          type: integer
        status:
          type: string
      required:
        - reason
        - shard
    BucketAggregationBase:
      allOf:
        - $ref: '#/components/schemas/Aggregation'
        - type: object
    MinimumInterval:
      type: string
      enum:
        - day
        - hour
        - minute
        - month
        - second
        - year
    DateTime:
      description: |-
        A date and time, either as a string whose format depends on the context (defaulting to ISO_8601) or the
        number of milliseconds since the epoch. OpenSearch accepts both as an input but will generally output a string.
        representation.
      oneOf:
        - type: string
        - $ref: '#/components/schemas/EpochTimeUnitMillis'
    TimeZone:
      type: string
    FormatMetricAggregationBase:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            format:
              type: string
    PipelineAggregationBase:
      allOf:
        - $ref: '#/components/schemas/BucketPathAggregation'
        - type: object
          properties:
            format:
              description: |-
                `DecimalFormat` pattern for the output value.
                If specified, the formatted value is returned in the aggregation's `value_as_string` property.
              type: string
            gap_policy:
              $ref: '#/components/schemas/GapPolicy'
    MetricAggregationBase:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
        missing:
          $ref: '#/components/schemas/FieldValue'
        script:
          $ref: '#/components/schemas/Script'
    Aggregation:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Metadata'
        name:
          type: string
    GapPolicy:
      type: string
      enum:
        - insert_zeros
        - keep_values
        - skip
    CardinalityExecutionMode:
      type: string
      enum:
        - direct
        - global_ordinals
        - save_memory_heuristic
        - save_time_heuristic
        - segment_ordinals
    RelationName:
      type: string
    CompositeAggregateKey:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/FieldValue'
    CompositeAggregationSource:
      type: object
      properties:
        terms:
          $ref: '#/components/schemas/CompositeTermsAggregationSource'
        histogram:
          $ref: '#/components/schemas/CompositeHistogramAggregationSource'
        date_histogram:
          $ref: '#/components/schemas/CompositeDateHistogramAggregationSource'
        geotile_grid:
          $ref: '#/components/schemas/CompositeGeoTileGridAggregationSource'
    CalendarInterval:
      oneOf:
        - title: second
          type: string
          enum:
            - second
            - 1s
        - title: minute
          type: string
          enum:
            - minute
            - 1m
        - title: hour
          type: string
          enum:
            - hour
            - 1h
        - title: day
          type: string
          enum:
            - day
            - 1d
        - title: week
          type: string
          enum:
            - week
            - 1w
        - title: month
          type: string
          enum:
            - month
            - 1M
        - title: quarter
          type: string
          enum:
            - quarter
            - 1q
        - title: year
          type: string
          enum:
            - year
            - 1Y
    ExtendedBoundsFieldDateMath:
      type: object
      properties:
        max:
          $ref: '#/components/schemas/FieldDateMath'
        min:
          $ref: '#/components/schemas/FieldDateMath'
      required:
        - max
        - min
    HistogramOrder:
      type: object
      properties:
        underscore_count:
          $ref: '#/components/schemas/SortOrder'
        underscore_key:
          $ref: '#/components/schemas/SortOrder'
    DateRangeExpression:
      type: object
      properties:
        from:
          $ref: '#/components/schemas/FieldDateMath'
        key:
          description: Custom key to return the range with.
          type: string
        to:
          $ref: '#/components/schemas/FieldDateMath'
    SamplerAggregationExecutionHint:
      type: string
      enum:
        - bytes_hash
        - global_ordinals
        - map
    BucketsQueryContainer:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - title: keyed
          type: object
          additionalProperties:
            $ref: '#/components/schemas/QueryContainer'
        - title: array
          type: array
          items:
            $ref: '#/components/schemas/QueryContainer'
    GeoLocation:
      description: |-
        A latitude/longitude as a two-dimensional point. It can be represented in the following ways:
         - As a `{lat, long}` object.
         - As a geohash value.
         - As a `[lon, lat]` array.
         - As a string in `<lat>, <lon>` or WKT point format.
      oneOf:
        - title: latlon
          description: The location specified using latitude and longitude coordinates.
          $ref: '#/components/schemas/LatLonGeoLocation'
        - title: geohash
          description: The location specified using a geohash value.
          $ref: '#/components/schemas/GeoHashLocation'
        - title: coords
          description: The location specified as an array of `[longitude, latitude]`.
          type: array
          items:
            type: number
            format: double
        - title: text
          description: The location specified as a string in `lat,lon` or WKT format.
          type: string
    GeoDistanceType:
      oneOf:
        - type: string
          const: arc
          description: The arc calculation method uses great circle distance.
        - type: string
          const: plane
          description: The plane calculation method uses faster but less accurate flat-earth distance.
    AggregationRange:
      type: object
      properties:
        from:
          description: Start of the range (inclusive).
          type:
            - 'null'
            - number
            - string
        key:
          description: Custom key to return the range with.
          type: string
        to:
          description: End of the range (exclusive).
          type:
            - 'null'
            - number
            - string
    DistanceUnit:
      oneOf:
        - title: centimeters
          type: string
          const: cm
        - title: feet
          type: string
          const: ft
        - title: inches
          type: string
          const: in
        - title: kilometers
          type: string
          const: km
        - title: meters
          type: string
          const: m
        - title: miles
          type: string
          const: mi
        - title: millimeters
          type: string
          const: mm
        - title: nautical miles
          type: string
          const: nmi
        - title: yards
          type: string
          const: yd
    GeoBounds:
      description: |-
        A geo-bounding box. It can be represented in the following ways:
         - As 4 top/bottom/left/right coordinates.
         - As 2 top_left/bottom_right points.
         - As 2 top_right/bottom_left points.
         - As a Well Known Text (WKT) bounding box.
      oneOf:
        - title: coords
          description: The bounds specified using coordinate values.
          $ref: '#/components/schemas/CoordsGeoBounds'
        - title: tlbr
          description: The bounds specified using upper-left and lower-right points.
          $ref: '#/components/schemas/TopLeftBottomRightGeoBounds'
        - title: trbl
          description: The bounds specified using upper-right and lower-left points.
          $ref: '#/components/schemas/TopRightBottomLeftGeoBounds'
        - title: wkt
          description: The bounds specified using WKT format.
          $ref: '#/components/schemas/WktGeoBounds'
    GeoHashPrecision:
      description: The level of geohash precision, which can be expressed as a geohash length between 1 and 12 or as a distance measure, such as "1km" or "10m".
      oneOf:
        - title: geohash_length
          type: integer
          format: int32
        - title: distance
          type: string
    GeoLinePoint:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
      required:
        - field
    GeoLineSort:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
      required:
        - field
    SortOrder:
      type: string
      enum:
        - asc
        - desc
    GeoTilePrecision:
      type: number
    ExtendedBoundsdouble:
      type: object
      properties:
        max:
          description: Maximum value for the bound.
          type: number
        min:
          description: Minimum value for the bound.
          type: number
      required:
        - max
        - min
    IpRangeAggregationRange:
      type: object
      properties:
        from:
          description: Start of the range.
          type:
            - 'null'
            - string
        mask:
          description: IP range defined as a CIDR mask.
          type: string
        to:
          description: End of the range.
          type:
            - 'null'
            - string
    Name:
      type: string
      description: The name of a resource or configuration element.
    InferenceConfigContainer:
      type: object
      properties:
        regression:
          $ref: '#/components/schemas/RegressionInferenceOptions'
        classification:
          $ref: '#/components/schemas/ClassificationInferenceOptions'
      minProperties: 1
      maxProperties: 1
    MatrixAggregation:
      allOf:
        - $ref: '#/components/schemas/Aggregation'
        - type: object
          properties:
            fields:
              $ref: '#/components/schemas/Fields'
            missing:
              description: |-
                The value to apply to documents that do not have a value.
                By default, documents without a value are ignored.
              type: object
              additionalProperties:
                type: number
                format: double
    SortMode:
      type: string
      enum:
        - avg
        - max
        - median
        - min
        - sum
    LinearMovingAverageAggregation:
      allOf:
        - $ref: '#/components/schemas/MovingAverageAggregationBase'
        - type: object
          properties:
            model:
              type: string
              enum:
                - linear
            settings:
              $ref: '#/components/schemas/EmptyObject'
          required:
            - model
            - settings
    SimpleMovingAverageAggregation:
      allOf:
        - $ref: '#/components/schemas/MovingAverageAggregationBase'
        - type: object
          properties:
            model:
              type: string
              enum:
                - simple
            settings:
              $ref: '#/components/schemas/EmptyObject'
          required:
            - model
            - settings
    EwmaMovingAverageAggregation:
      allOf:
        - $ref: '#/components/schemas/MovingAverageAggregationBase'
        - type: object
          properties:
            model:
              type: string
              enum:
                - ewma
            settings:
              $ref: '#/components/schemas/EwmaModelSettings'
          required:
            - model
            - settings
    HoltMovingAverageAggregation:
      allOf:
        - $ref: '#/components/schemas/MovingAverageAggregationBase'
        - type: object
          properties:
            model:
              type: string
              enum:
                - holt
            settings:
              $ref: '#/components/schemas/HoltLinearModelSettings'
          required:
            - model
            - settings
    HoltWintersMovingAverageAggregation:
      allOf:
        - $ref: '#/components/schemas/MovingAverageAggregationBase'
        - type: object
          properties:
            model:
              type: string
              enum:
                - holt_winters
            settings:
              $ref: '#/components/schemas/HoltWintersModelSettings'
          required:
            - model
            - settings
    TermsAggregationCollectMode:
      type: string
      enum:
        - breadth_first
        - depth_first
    MultiTermLookup:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
        missing:
          $ref: '#/components/schemas/FieldValue'
      required:
        - field
    NormalizeMethod:
      type: string
      enum:
        - mean
        - percent_of_sum
        - rescale_0_1
        - rescale_0_100
        - softmax
        - z-score
    HdrMethod:
      type: object
      properties:
        number_of_significant_value_digits:
          description: Specifies the resolution of values for the histogram in number of significant digits.
          type: integer
          format: int32
    TDigest:
      type: object
      properties:
        compression:
          description: Limits the maximum number of nodes used by the underlying TDigest algorithm to `20 * compression`, enabling control of memory usage and approximation error.
          type: integer
          format: int32
    TermsExclude:
      oneOf:
        - title: regexp
          type: string
        - title: terms
          type: array
          items:
            type: string
    TermsInclude:
      oneOf:
        - title: regexp
          type: string
        - title: terms
          type: array
          items:
            type: string
        - title: partition
          $ref: '#/components/schemas/TermsPartition'
    RateMode:
      type: string
      enum:
        - sum
        - value_count
    ChiSquareHeuristic:
      type: object
      properties:
        background_is_superset:
          description: Set to `false` if you defined a custom background filter that represents a different set of documents that you want to compare to.
          type: boolean
        include_negatives:
          description: Set to `false` to filter out the terms that appear less often in the subset than in documents outside the subset.
          type: boolean
      required:
        - background_is_superset
        - include_negatives
    TermsAggregationExecutionHint:
      type: string
      enum:
        - global_ordinals
        - global_ordinals_hash
        - global_ordinals_low_cardinality
        - map
    GoogleNormalizedDistanceHeuristic:
      type: object
      properties:
        background_is_superset:
          description: Set to `false` if you defined a custom background filter that represents a different set of documents that you want to compare to.
          type: boolean
    EmptyObject:
      type: object
    MutualInformationHeuristic:
      type: object
      properties:
        background_is_superset:
          description: Set to `false` if you defined a custom background filter that represents a different set of documents that you want to compare to.
          type: boolean
        include_negatives:
          description: Set to `false` to filter out the terms that appear less often in the subset than in documents outside the subset.
          type: boolean
    PercentageScoreHeuristic:
      type: object
    ScriptedHeuristic:
      type: object
      properties:
        script:
          $ref: '#/components/schemas/Script'
      required:
        - script
    MissingOrder:
      type: string
      enum:
        - default
        - first
        - last
    AggregateOrder:
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/SortOrder'
          minProperties: 1
          maxProperties: 1
        - type: array
          items:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/SortOrder'
            minProperties: 1
            maxProperties: 1
    TestPopulation:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
        script:
          $ref: '#/components/schemas/Script'
        filter:
          $ref: '#/components/schemas/QueryContainer'
      required:
        - field
    TTestType:
      type: string
      enum:
        - heteroscedastic
        - homoscedastic
        - paired
    TopMetricsValue:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
      required:
        - field
    FormattableMetricAggregation:
      allOf:
        - $ref: '#/components/schemas/MetricAggregationBase'
        - type: object
          properties:
            format:
              type: string
    WeightedAverageValue:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
        missing:
          description: A value or weight to use if the field is missing.
          type: number
          format: double
        script:
          $ref: '#/components/schemas/Script'
    ValueType:
      type: string
      enum:
        - boolean
        - date
        - date_nanos
        - double
        - geo_point
        - ip
        - long
        - number
        - numeric
        - string
    HighlighterType:
      oneOf:
        - title: builtin
          $ref: '#/components/schemas/BuiltinHighlighterType'
        - title: custom
          type: string
    BoundaryScanner:
      type: string
      enum:
        - chars
        - sentence
        - word
    HighlighterFragmenter:
      type: string
      enum:
        - simple
        - span
    HighlighterOrder:
      type: string
      enum:
        - score
    HighlighterTagsSchema:
      type: string
      enum:
        - styled
    Analyzer:
      type: object
      discriminator:
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/CustomAnalyzer'
        - $ref: '#/components/schemas/FingerprintAnalyzer'
        - $ref: '#/components/schemas/KeywordAnalyzer'
        - $ref: '#/components/schemas/LanguageAnalyzer'
        - $ref: '#/components/schemas/NoriAnalyzer'
        - $ref: '#/components/schemas/PatternAnalyzer'
        - $ref: '#/components/schemas/SimpleAnalyzer'
        - $ref: '#/components/schemas/StandardAnalyzer'
        - $ref: '#/components/schemas/StopAnalyzer'
        - $ref: '#/components/schemas/WhitespaceAnalyzer'
        - $ref: '#/components/schemas/IcuAnalyzer'
        - $ref: '#/components/schemas/KuromojiAnalyzer'
        - $ref: '#/components/schemas/SnowballAnalyzer'
        - $ref: '#/components/schemas/DutchAnalyzer'
        - $ref: '#/components/schemas/SmartcnAnalyzer'
        - $ref: '#/components/schemas/CjkAnalyzer'
        - $ref: '#/components/schemas/PhoneAnalyzer'
    RankBase:
      type: object
    QueryBase:
      type: object
      properties:
        boost:
          description: |-
            Floating point number used to decrease or increase the relevance scores of the query.
            Boost values are relative to the default value of 1.0.
            A boost value between 0 and 1.0 decreases the relevance score.
            A value greater than 1.0 increases the relevance score.
          type: number
          format: float
        underscore_name:
          type: string
    MinimumShouldMatch:
      description: The minimum number of terms that should match as an integer, percentage, or range.
      oneOf:
        - type: integer
          format: int32
        - type: string
    CombinedFieldsOperator:
      type: string
      enum:
        - and
        - or
    CombinedFieldsZeroTerms:
      type: string
      enum:
        - all
        - none
    Distance:
      type: string
    DateMath:
      type: string
    FunctionBoostMode:
      type: string
      enum:
        - avg
        - max
        - min
        - multiply
        - replace
        - sum
    FunctionScoreContainer:
      allOf:
        - type: object
          properties:
            filter:
              $ref: '#/components/schemas/QueryContainer'
            weight:
              type: number
              format: float
        - type: object
          properties:
            exp:
              $ref: '#/components/schemas/DecayFunction'
            gauss:
              $ref: '#/components/schemas/DecayFunction'
            linear:
              $ref: '#/components/schemas/DecayFunction'
            field_value_factor:
              $ref: '#/components/schemas/FieldValueFactorScoreFunction'
            random_score:
              $ref: '#/components/schemas/RandomScoreFunction'
            script_score:
              $ref: '#/components/schemas/ScriptScoreFunction'
          minProperties: 0
          maxProperties: 1
    FunctionScoreMode:
      type: string
      enum:
        - avg
        - first
        - max
        - min
        - multiply
        - sum
    MultiTermQueryRewrite:
      oneOf:
        - type: string
          const: constant_score
          description: The constant score rewrite method assigns the same score to all matching documents.
        - type: string
          const: constant_score_boolean
          description: The constant score Boolean rewrite method creates a Boolean query with a constant score.
        - type: string
          const: scoring_boolean
          description: The scoring Boolean rewrite method creates a Boolean query that scores each term separately.
        - type: string
          pattern: top_terms(_blended_freqs|_boost)?_\d+
          description: The top terms query rewrite method with optional parameters.
        - type: string
          pattern: top_terms(_blended_freqs|_boost)?_\d+
          description: The top terms query rewrite method with optional parameters.
    Fuzziness:
      oneOf:
        - type: string
          description: The fuzziness value as `AUTO`, or a string edit distance.
        - type: integer
          description: The fuzziness value as a numeric edit distance.
          format: int32
    GeoExecution:
      type: string
      enum:
        - indexed
        - memory
    GeoValidationMethod:
      type: string
      enum:
        - coerce
        - ignore_malformed
        - strict
    IgnoreUnmapped:
      type: boolean
      default: false
      description: |-
        Set to `true` to ignore an unmapped field and not match any documents for this query.
        Set to `false` to throw an exception if the field is not mapped.
    GeoPolygonPoints:
      type: object
      properties:
        points:
          type: array
          items:
            $ref: '#/components/schemas/GeoLocation'
      required:
        - points
    GeoShapeQueryField:
      type: object
      properties:
        indexed_shape:
          $ref: '#/components/schemas/FieldLookup'
        shape:
          $ref: '#/components/schemas/GeoShape'
        relation:
          $ref: '#/components/schemas/GeoShapeRelation'
      required:
        - shape
    ChildScoreMode:
      type: string
      enum:
        - avg
        - max
        - min
        - none
        - sum
    Ids:
      oneOf:
        - $ref: '#/components/schemas/Id'
        - type: array
          items:
            $ref: '#/components/schemas/Id'
    IntervalsAllOf:
      type: object
      properties:
        intervals:
          description: An array of rules to combine. All rules must produce a match in a document for the overall source to match.
          type: array
          items:
            $ref: '#/components/schemas/IntervalsContainer'
        max_gaps:
          description: |-
            Maximum number of positions between the matching terms.
            Intervals produced by the rules further apart than this are not considered matches.
          type: integer
          format: int32
        ordered:
          description: If `true`, intervals produced by the rules should appear in the order in which they are specified.
          type: boolean
        filter:
          $ref: '#/components/schemas/IntervalsFilter'
      required:
        - intervals
    IntervalsAnyOf:
      type: object
      properties:
        intervals:
          description: An array of rules to match.
          type: array
          items:
            $ref: '#/components/schemas/IntervalsContainer'
        filter:
          $ref: '#/components/schemas/IntervalsFilter'
      required:
        - intervals
    IntervalsFuzzy:
      type: object
      properties:
        analyzer:
          description: Analyzer used to normalize the term.
          type: string
        fuzziness:
          $ref: '#/components/schemas/Fuzziness'
        prefix_length:
          description: Number of beginning characters left unchanged when creating expansions.
          type: integer
          format: int32
        term:
          description: The term to match.
          type: string
        transpositions:
          description: Indicates whether edits include transpositions of two adjacent characters (for example, `ab` to `ba`).
          type: boolean
        use_field:
          $ref: '#/components/schemas/Field'
      required:
        - term
    IntervalsMatch:
      type: object
      properties:
        analyzer:
          description: Analyzer used to analyze terms in the query.
          type: string
        max_gaps:
          description: |-
            Maximum number of positions between the matching terms.
            Terms further apart than this are not considered matches.
          type: integer
          format: int32
        ordered:
          description: If `true`, matching terms must appear in their specified order.
          type: boolean
        query:
          description: Text you wish to find in the provided field.
          type: string
        use_field:
          $ref: '#/components/schemas/Field'
        filter:
          $ref: '#/components/schemas/IntervalsFilter'
      required:
        - query
    IntervalsPrefix:
      type: object
      properties:
        analyzer:
          description: Analyzer used to analyze the `prefix`.
          type: string
        prefix:
          description: Beginning characters of terms you wish to find in the top-level field.
          type: string
        use_field:
          $ref: '#/components/schemas/Field'
      required:
        - prefix
    IntervalsWildcard:
      type: object
      properties:
        analyzer:
          description: |-
            Analyzer used to analyze the `pattern`.
            Defaults to the top-level field's analyzer.
          type: string
        pattern:
          description: Wildcard pattern used to find matching terms.
          type: string
        use_field:
          $ref: '#/components/schemas/Field'
      required:
        - pattern
    QueryVector:
      type: array
      items:
        type: number
        format: float
    KnnQueryRescore:
      oneOf:
        - title: enable
          type: boolean
        - title: context
          $ref: '#/components/schemas/RescoreContext'
    ZeroTermsQuery:
      type: string
      enum:
        - all
        - ALL
        - none
        - NONE
    Like:
      description: Text that we want similar documents for or a lookup to a document's field for the text.
      oneOf:
        - title: text
          type: string
        - title: document
          $ref: '#/components/schemas/LikeDocument'
    StopWords:
      description: |-
        Language value, such as `arabic` or `thai`. Defaults to `english`.
        Each language value corresponds to a predefined list of stop words in Lucene. See Stop words by language for supported language values and their stop words.
        Also accepts an array of stop words.
      $ref: '#/components/schemas/StringOrStringArray'
    TextQueryType:
      type: string
      enum:
        - best_fields
        - bool_prefix
        - cross_fields
        - most_fields
        - phrase
        - phrase_prefix
    PinnedDoc:
      type: object
      properties:
        underscore_id:
          $ref: '#/components/schemas/Id'
        underscore_index:
          $ref: '#/components/schemas/IndexName'
      required:
        - _id
        - _index
    NumberRangeQueryParameters:
      allOf:
        - $ref: '#/components/schemas/RangeQueryBase'
        - type: object
          properties:
            gt:
              description: Greater than.
              type: number
              format: double
            gte:
              description: Greater than or equal to.
              type: number
              format: double
            lt:
              description: Less than.
              type: number
              format: double
            lte:
              description: Less than or equal to.
              type: number
              format: double
            from:
              oneOf:
                - type: number
                  format: double
                - type: string
                - type: 'null'
            to:
              oneOf:
                - type: number
                  format: double
                - type: string
                - type: 'null'
    DateRangeQueryParameters:
      allOf:
        - $ref: '#/components/schemas/RangeQueryBase'
        - type: object
          properties:
            gt:
              $ref: '#/components/schemas/DateMath'
            gte:
              $ref: '#/components/schemas/DateMath'
            lt:
              $ref: '#/components/schemas/DateMath'
            lte:
              $ref: '#/components/schemas/DateMath'
            from:
              oneOf:
                - $ref: '#/components/schemas/DateMath'
                - type: 'null'
            to:
              oneOf:
                - $ref: '#/components/schemas/DateMath'
                - type: 'null'
            format:
              $ref: '#/components/schemas/DateFormat'
            time_zone:
              $ref: '#/components/schemas/TimeZone'
    RankFeatureFunctionSaturation:
      allOf:
        - $ref: '#/components/schemas/RankFeatureFunction'
        - type: object
          properties:
            pivot:
              description: Configurable pivot value so that the result will be less than 0.5.
              type: number
              format: float
    RankFeatureFunctionLogarithm:
      allOf:
        - $ref: '#/components/schemas/RankFeatureFunction'
        - type: object
          properties:
            scaling_factor:
              description: Configurable scaling factor.
              type: number
              format: float
          required:
            - scaling_factor
    RankFeatureFunctionLinear:
      allOf:
        - $ref: '#/components/schemas/RankFeatureFunction'
        - type: object
    RankFeatureFunctionSigmoid:
      allOf:
        - $ref: '#/components/schemas/RankFeatureFunction'
        - type: object
          properties:
            pivot:
              description: Configurable pivot value so that the result will be less than 0.5.
              type: number
              format: float
            exponent:
              description: Configurable Exponent.
              type: number
              format: float
          required:
            - exponent
            - pivot
    SimpleQueryStringFlags:
      description: Query flags can be either a single flag or a combination of flags (e.g. `OR|AND|PREFIX`).
      oneOf:
        - title: single
          $ref: '#/components/schemas/SimpleQueryStringFlag'
        - title: multiple
          type: string
    SpanQuery:
      type: object
      properties:
        span_containing:
          $ref: '#/components/schemas/SpanContainingQuery'
        field_masking_span:
          $ref: '#/components/schemas/SpanFieldMaskingQuery'
        span_first:
          $ref: '#/components/schemas/SpanFirstQuery'
        span_gap:
          $ref: '#/components/schemas/SpanGapQuery'
        span_multi:
          $ref: '#/components/schemas/SpanMultiTermQuery'
        span_near:
          $ref: '#/components/schemas/SpanNearQuery'
        span_not:
          $ref: '#/components/schemas/SpanNotQuery'
        span_or:
          $ref: '#/components/schemas/SpanOrQuery'
        span_term:
          description: The equivalent of the `term` query but for use with other span queries.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SpanTermQuery'
          minProperties: 1
          maxProperties: 1
        span_within:
          $ref: '#/components/schemas/SpanWithinQuery'
      minProperties: 1
      maxProperties: 1
    TermsQueryField:
      oneOf:
        - title: value
          type: array
          items:
            $ref: '#/components/schemas/FieldValue'
        - title: lookup
          $ref: '#/components/schemas/TermsLookup'
    XyShapeQueryField:
      type: object
      properties:
        indexed_shape:
          $ref: '#/components/schemas/FieldLookup'
        shape:
          $ref: '#/components/schemas/XyShape'
        relation:
          $ref: '#/components/schemas/GeoShapeRelation'
      required:
        - shape
    ScoreMode:
      type: string
      enum:
        - avg
        - max
        - min
        - multiply
        - total
    ScoreSort:
      type: object
      properties:
        order:
          $ref: '#/components/schemas/SortOrder'
    GeoDistanceSort:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/SortMode'
        distance_type:
          $ref: '#/components/schemas/GeoDistanceType'
        ignore_unmapped:
          type: boolean
        order:
          $ref: '#/components/schemas/SortOrder'
        unit:
          $ref: '#/components/schemas/DistanceUnit'
      additionalProperties:
        type: array
        items:
          $ref: '#/components/schemas/GeoLocation'
    ScriptSort:
      type: object
      properties:
        order:
          $ref: '#/components/schemas/SortOrder'
        script:
          $ref: '#/components/schemas/Script'
        type:
          $ref: '#/components/schemas/ScriptSortType'
        mode:
          $ref: '#/components/schemas/SortMode'
        nested:
          $ref: '#/components/schemas/NestedSortValue'
      required:
        - script
    FieldSort:
      oneOf:
        - title: order
          description: The sort order direction.
          $ref: '#/components/schemas/SortOrder'
        - type: object
          description: The detailed field sort options.
          properties:
            missing:
              $ref: '#/components/schemas/FieldValue'
              description: The value to use when the field is missing.
            mode:
              $ref: '#/components/schemas/SortMode'
              description: The mode for sorting on array fields.
            nested:
              $ref: '#/components/schemas/NestedSortValue'
              description: The nested path sort options.
            order:
              $ref: '#/components/schemas/SortOrder'
              description: The sort order direction.
            unmapped_type:
              $ref: '#/components/schemas/FieldType'
              description: The type to use for unmapped fields.
            numeric_type:
              $ref: '#/components/schemas/FieldSortNumericType'
              description: The numeric type to use for sorting.
            format:
              type: string
              description: The format to use for the sort values.
    CompletionSuggester:
      allOf:
        - $ref: '#/components/schemas/SuggesterBase'
        - type: object
          properties:
            contexts:
              type: object
              additionalProperties:
                type: array
                items:
                  $ref: '#/components/schemas/CompletionContext'
            fuzzy:
              $ref: '#/components/schemas/SuggestFuzziness'
            regex:
              type: string
            skip_duplicates:
              type: boolean
    PhraseSuggester:
      allOf:
        - $ref: '#/components/schemas/SuggesterBase'
        - type: object
          properties:
            collate:
              $ref: '#/components/schemas/PhraseSuggestCollate'
            confidence:
              type: number
              format: double
            direct_generator:
              type: array
              items:
                $ref: '#/components/schemas/DirectGenerator'
            force_unigrams:
              type: boolean
            gram_size:
              type: integer
              format: int32
            highlight:
              $ref: '#/components/schemas/PhraseSuggestHighlight'
            max_errors:
              type: number
              format: double
            real_word_error_likelihood:
              type: number
              format: double
            separator:
              type: string
            shard_size:
              type: integer
              format: int32
            smoothing:
              $ref: '#/components/schemas/SmoothingModel'
            text:
              type: string
            token_limit:
              type: integer
              format: int32
    TermSuggester:
      allOf:
        - $ref: '#/components/schemas/SuggesterBase'
        - type: object
          properties:
            lowercase_terms:
              type: boolean
            max_edits:
              type: integer
              format: int32
            max_inspections:
              type: integer
              format: int32
            max_term_freq:
              type: number
              format: float
            min_doc_freq:
              type: number
              format: float
            min_word_length:
              type: integer
              format: int32
            prefix_length:
              type: integer
              format: int32
            shard_size:
              type: integer
              format: int32
            sort:
              $ref: '#/components/schemas/SuggestSort'
            string_distance:
              $ref: '#/components/schemas/StringDistance'
            suggest_mode:
              $ref: '#/components/schemas/SuggestMode'
            text:
              type: string
    TotalHits:
      type: object
      properties:
        relation:
          $ref: '#/components/schemas/TotalHitsRelation'
        value:
          type: integer
          format: int64
      required:
        - relation
        - value
    Hit:
      type: object
      properties:
        fields:
          type: object
          additionalProperties: true
        highlight:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        inner_hits:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/InnerHitsResult'
        matched_queries:
          type: array
          items:
            type: string
        ignored_field_values:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        sort:
          $ref: '#/components/schemas/SortResults'
        underscore_type:
          $ref: '#/components/schemas/Type'
        underscore_index:
          $ref: '#/components/schemas/IndexName'
        underscore_id:
          $ref: '#/components/schemas/Id'
        underscore_score:
          type:
            - 'null'
            - number
            - string
        underscore_explanation:
          $ref: '#/components/schemas/Explanation'
        underscore_nested:
          $ref: '#/components/schemas/NestedIdentity'
        underscore_ignored:
          type: array
          items:
            type: string
        underscore_shard:
          type: string
        underscore_node:
          type: string
        underscore_routing:
          type: string
        underscore_source:
          type: object
        underscore_seq_no:
          $ref: '#/components/schemas/SequenceNumber'
        underscore_primary_term:
          type: integer
          format: int64
        underscore_version:
          $ref: '#/components/schemas/VersionNumber'
      required:
        - _id
        - _index
    CardinalityAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            value:
              type: number
          required:
            - value
    HdrPercentilesAggregate:
      allOf:
        - $ref: '#/components/schemas/PercentilesAggregateBase'
        - type: object
    HdrPercentileRanksAggregate:
      allOf:
        - $ref: '#/components/schemas/PercentilesAggregateBase'
        - type: object
    TDigestPercentilesAggregate:
      allOf:
        - $ref: '#/components/schemas/PercentilesAggregateBase'
        - type: object
    TDigestPercentileRanksAggregate:
      allOf:
        - $ref: '#/components/schemas/PercentilesAggregateBase'
        - type: object
    PercentilesBucketAggregate:
      allOf:
        - $ref: '#/components/schemas/PercentilesAggregateBase'
        - type: object
    MedianAbsoluteDeviationAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    MinAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    MaxAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    SumAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    AvgAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    WeightedAvgAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    ValueCountAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    SimpleValueAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
    DerivativeAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
          properties:
            normalized_value:
              type: number
            normalized_value_as_string:
              type: string
    BucketMetricValueAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleMetricAggregateBase'
        - type: object
          properties:
            keys:
              type: array
              items:
                type: string
          required:
            - keys
    StatsAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            count:
              type: number
            min:
              type:
                - 'null'
                - number
                - string
            max:
              type:
                - 'null'
                - number
                - string
            avg:
              type:
                - 'null'
                - number
                - string
            sum:
              type: number
            min_as_string:
              type: string
            max_as_string:
              type: string
            avg_as_string:
              type: string
            sum_as_string:
              type: string
          required:
            - avg
            - count
            - max
            - min
            - sum
    StatsBucketAggregate:
      allOf:
        - $ref: '#/components/schemas/StatsAggregate'
        - type: object
    ExtendedStatsAggregate:
      allOf:
        - $ref: '#/components/schemas/StatsAggregate'
        - type: object
          properties:
            sum_of_squares:
              type:
                - 'null'
                - number
                - string
            variance:
              type:
                - 'null'
                - number
                - string
            variance_population:
              type:
                - 'null'
                - number
                - string
            variance_sampling:
              type:
                - 'null'
                - number
                - string
            std_deviation:
              type:
                - 'null'
                - number
                - string
            std_deviation_population:
              type:
                - 'null'
                - number
                - string
            std_deviation_sampling:
              type:
                - 'null'
                - number
                - string
            std_deviation_bounds:
              $ref: '#/components/schemas/StandardDeviationBounds'
            sum_of_squares_as_string:
              type: string
            variance_as_string:
              type: string
            variance_population_as_string:
              type: string
            variance_sampling_as_string:
              type: string
            std_deviation_as_string:
              type: string
            std_deviation_bounds_as_string:
              $ref: '#/components/schemas/StandardDeviationBoundsAsString'
          required:
            - std_deviation
            - std_deviation_population
            - std_deviation_sampling
            - sum_of_squares
            - variance
            - variance_population
            - variance_sampling
    ExtendedStatsBucketAggregate:
      allOf:
        - $ref: '#/components/schemas/ExtendedStatsAggregate'
        - type: object
    GeoBoundsAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            bounds:
              $ref: '#/components/schemas/GeoBounds'
    GeoCentroidAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            count:
              type: number
            location:
              $ref: '#/components/schemas/GeoLocation'
          required:
            - count
    HistogramAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseHistogramBucket'
        - type: object
    DateHistogramAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseDateHistogramBucket'
        - type: object
    AutoDateHistogramAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseDateHistogramBucket'
        - type: object
          properties:
            interval:
              $ref: '#/components/schemas/DurationLarge'
          required:
            - interval
    VariableWidthHistogramAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseVariableWidthHistogramBucket'
        - type: object
    StringTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/TermsAggregateBaseStringTermsBucket'
        - type: object
    LongTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/TermsAggregateBaseLongTermsBucket'
        - type: object
    DoubleTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/TermsAggregateBaseDoubleTermsBucket'
        - type: object
    UnmappedTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/TermsAggregateBaseVoid'
        - type: object
    LongRareTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseLongRareTermsBucket'
        - type: object
    StringRareTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseStringRareTermsBucket'
        - type: object
    UnmappedRareTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseVoid'
        - type: object
    MultiTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/TermsAggregateBaseMultiTermsBucket'
        - type: object
    MissingAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    NestedAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            doc_count:
              type: number
    ReverseNestedAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    GlobalAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    FilterAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    ChildrenAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    ParentAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    SamplerAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    UnmappedSamplerAggregate:
      allOf:
        - $ref: '#/components/schemas/SingleBucketAggregateBase'
        - type: object
    GeoHashGridAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseGeoHashGridBucket'
        - type: object
    GeoTileGridAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseGeoTileGridBucket'
        - type: object
    RangeAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseRangeBucket'
        - type: object
    DateRangeAggregate:
      allOf:
        - $ref: '#/components/schemas/RangeAggregate'
        - type: object
    GeoDistanceAggregate:
      allOf:
        - $ref: '#/components/schemas/RangeAggregate'
        - type: object
    IpRangeAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseIpRangeBucket'
        - type: object
    FiltersAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseFiltersBucket'
        - type: object
    AdjacencyMatrixAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseAdjacencyMatrixBucket'
        - type: object
    SignificantLongTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/SignificantTermsAggregateBaseSignificantLongTermsBucket'
        - type: object
    SignificantStringTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/SignificantTermsAggregateBaseSignificantStringTermsBucket'
        - type: object
    UnmappedSignificantTermsAggregate:
      allOf:
        - $ref: '#/components/schemas/SignificantTermsAggregateBaseVoid'
        - type: object
    CompositeAggregate:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseCompositeBucket'
        - type: object
          properties:
            after_key:
              $ref: '#/components/schemas/CompositeAggregateKey'
    ScriptedMetricAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            value:
              type: object
          required:
            - value
    TopHitsAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            hits:
              $ref: '#/components/schemas/HitsMetadata'
          required:
            - hits
    InferenceAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            value:
              $ref: '#/components/schemas/FieldValue'
            feature_importance:
              type: array
              items:
                $ref: '#/components/schemas/InferenceFeatureImportance'
            top_classes:
              type: array
              items:
                $ref: '#/components/schemas/InferenceTopClassEntry'
            warning:
              type: string
    StringStatsAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            count:
              type: number
            min_length:
              type:
                - 'null'
                - number
                - string
            max_length:
              type:
                - 'null'
                - number
                - string
            avg_length:
              type:
                - 'null'
                - number
                - string
            entropy:
              type:
                - 'null'
                - number
                - string
            distribution:
              oneOf:
                - type: 'null'
                - type: object
                  additionalProperties:
                    type: number
                - type: string
            min_length_as_string:
              type: string
            max_length_as_string:
              type: string
            avg_length_as_string:
              type: string
          required:
            - avg_length
            - count
            - entropy
            - max_length
            - min_length
    BoxPlotAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            min:
              type: number
            max:
              type: number
            q1:
              type: number
            q2:
              type: number
            q3:
              type: number
            lower:
              type: number
            upper:
              type: number
            min_as_string:
              type: string
            max_as_string:
              type: string
            q1_as_string:
              type: string
            q2_as_string:
              type: string
            q3_as_string:
              type: string
            lower_as_string:
              type: string
            upper_as_string:
              type: string
          required:
            - lower
            - max
            - min
            - q1
            - q2
            - q3
            - upper
    TopMetricsAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            top:
              type: array
              items:
                $ref: '#/components/schemas/TopMetrics'
          required:
            - top
    TTestAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            value:
              type:
                - 'null'
                - number
                - string
            value_as_string:
              type: string
          required:
            - value
    RateAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            value:
              type: number
            value_as_string:
              type: string
          required:
            - value
    CumulativeCardinalityAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            value:
              type: number
            value_as_string:
              type: string
          required:
            - value
    MatrixStatsAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            doc_count:
              type: number
            fields:
              type: array
              items:
                $ref: '#/components/schemas/MatrixStatsFields'
          required:
            - doc_count
    GeoLineAggregate:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            type:
              type: string
            geometry:
              $ref: '#/components/schemas/GeoLine'
            properties:
              type: object
          required:
            - geometry
            - properties
            - type
    ClusterDetails:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ClusterSearchStatus'
        indices:
          type: string
        took:
          $ref: '#/components/schemas/DurationValueUnitMillis'
        timed_out:
          type: boolean
        failures:
          type: array
          items:
            $ref: '#/components/schemas/ShardFailure'
        underscore_shards:
          $ref: '#/components/schemas/ShardStatistics'
      required:
        - indices
        - status
        - timed_out
    ShardProfile:
      type: object
      properties:
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/AggregationProfile'
        id:
          type: string
        searches:
          type: array
          items:
            $ref: '#/components/schemas/SearchProfile'
        fetch:
          $ref: '#/components/schemas/FetchProfile'
      required:
        - aggregations
        - id
        - searches
    CompletionSuggest:
      allOf:
        - $ref: '#/components/schemas/SuggestBase'
        - type: object
          properties:
            options:
              oneOf:
                - $ref: '#/components/schemas/CompletionSuggestOption'
                - type: array
                  items:
                    $ref: '#/components/schemas/CompletionSuggestOption'
          required:
            - options
    PhraseSuggest:
      allOf:
        - $ref: '#/components/schemas/SuggestBase'
        - type: object
          properties:
            options:
              oneOf:
                - $ref: '#/components/schemas/PhraseSuggestOption'
                - type: array
                  items:
                    $ref: '#/components/schemas/PhraseSuggestOption'
          required:
            - options
    TermSuggest:
      allOf:
        - $ref: '#/components/schemas/SuggestBase'
        - type: object
          properties:
            options:
              oneOf:
                - $ref: '#/components/schemas/TermSuggestOption'
                - type: array
                  items:
                    $ref: '#/components/schemas/TermSuggestOption'
          required:
            - options
    RootCause:
      type: object
      properties:
        type:
          type: string
        reason:
          type: string
      required:
        - reason
        - type
    ScriptBase:
      type: object
      properties:
        params:
          description: |-
            Specifies any named parameters that are passed into the script as variables. 
            Use parameters instead of hard-coded values to decrease compilation time. 
          type: object
          additionalProperties: true
    ScriptLanguage:
      anyOf:
        - title: builtin
          $ref: '#/components/schemas/BuiltinScriptLanguage'
        - title: custom
          type: string
    EpochTimeUnitMillis:
      $ref: '#/components/schemas/UnitMillis'
    BucketPathAggregation:
      allOf:
        - $ref: '#/components/schemas/Aggregation'
        - type: object
          properties:
            buckets_path:
              $ref: '#/components/schemas/BucketsPath'
    CompositeTermsAggregationSource:
      allOf:
        - $ref: '#/components/schemas/CompositeValuesSource'
        - type: object
    CompositeHistogramAggregationSource:
      allOf:
        - $ref: '#/components/schemas/CompositeValuesSource'
        - type: object
          properties:
            interval:
              type: number
              format: double
          required:
            - interval
    CompositeDateHistogramAggregationSource:
      allOf:
        - $ref: '#/components/schemas/CompositeValuesSource'
        - type: object
          properties:
            format:
              type: string
            calendar_interval:
              $ref: '#/components/schemas/DurationLarge'
            fixed_interval:
              $ref: '#/components/schemas/DurationLarge'
            offset:
              $ref: '#/components/schemas/Duration'
            time_zone:
              $ref: '#/components/schemas/TimeZone'
    CompositeGeoTileGridAggregationSource:
      allOf:
        - $ref: '#/components/schemas/CompositeValuesSource'
        - type: object
          properties:
            precision:
              type: integer
              format: int32
            bounds:
              $ref: '#/components/schemas/GeoBounds'
    FieldDateMath:
      description: |-
        A date range limit, represented either as a DateMath expression or a number expressed
        according to the target field's precision.
      oneOf:
        - title: expr
          $ref: '#/components/schemas/DateMath'
        - title: value
          type: number
          format: double
    LatLonGeoLocation:
      type: object
      description: The geographical location specified using latitude and longitude.
      properties:
        lat:
          description: The latitude coordinate.
          type: number
          format: double
        lon:
          description: The longitude coordinate.
          type: number
          format: double
      required:
        - lat
        - lon
    GeoHashLocation:
      type: object
      description: The geographical location specified using a geohash.
      properties:
        geohash:
          $ref: '#/components/schemas/GeoHash'
      required:
        - geohash
    CoordsGeoBounds:
      type: object
      description: The geographical bounds specified using coordinate values.
      properties:
        top:
          type: number
          format: double
          description: The top boundary latitude.
        bottom:
          type: number
          format: double
          description: The bottom boundary latitude.
        left:
          type: number
          format: double
          description: The left boundary longitude.
        right:
          type: number
          format: double
          description: The right boundary longitude.
      required:
        - bottom
        - left
        - right
        - top
    TopLeftBottomRightGeoBounds:
      type: object
      description: The geographical bounds specified using upper-left and lower-right points.
      properties:
        top_left:
          $ref: '#/components/schemas/GeoLocation'
          description: The upper-left corner coordinates.
        bottom_right:
          $ref: '#/components/schemas/GeoLocation'
          description: The lower-right corner coordinates.
      required:
        - bottom_right
        - top_left
    TopRightBottomLeftGeoBounds:
      type: object
      description: The geographical bounds specified using upper-right and lower-left points.
      properties:
        top_right:
          $ref: '#/components/schemas/GeoLocation'
          description: The upper-right corner coordinates.
        bottom_left:
          $ref: '#/components/schemas/GeoLocation'
          description: The lower-left corner coordinates.
      required:
        - bottom_left
        - top_right
    WktGeoBounds:
      type: object
      description: The geographical bounds specified using Well-Known Text (WKT) format.
      properties:
        wkt:
          type: string
          description: The WKT string representation of the geographical bounds.
      required:
        - wkt
    RegressionInferenceOptions:
      type: object
      properties:
        results_field:
          $ref: '#/components/schemas/Field'
        num_top_feature_importance_values:
          description: Specifies the maximum number of feature importance values per document.
          type: integer
          format: int32
    ClassificationInferenceOptions:
      type: object
      properties:
        num_top_classes:
          description: Specifies the number of top class predictions to return. Defaults to 0.
          type: integer
          format: int32
        num_top_feature_importance_values:
          description: Specifies the maximum number of feature importance values per document.
          type: integer
          format: int32
        prediction_field_type:
          description: 'Specifies the type of the predicted field to write. Acceptable values are: string, number, Boolean. When Boolean is provided 1.0 is transformed to true and 0.0 to false.'
          type: string
        results_field:
          description: The field that is added to incoming documents to contain the inference prediction. Defaults to `predicted_value`.
          type: string
        top_classes_results_field:
          description: Specifies the field to which the top classes are written. Defaults to `top_classes`.
          type: string
    MovingAverageAggregationBase:
      allOf:
        - $ref: '#/components/schemas/PipelineAggregationBase'
        - type: object
          properties:
            minimize:
              type: boolean
            predict:
              type: integer
              format: int32
            window:
              type: integer
              format: int32
    EwmaModelSettings:
      type: object
      properties:
        alpha:
          type: number
          format: float
    HoltLinearModelSettings:
      type: object
      properties:
        alpha:
          type: number
          format: float
        beta:
          type: number
          format: float
    HoltWintersModelSettings:
      type: object
      properties:
        alpha:
          type: number
          format: float
        beta:
          type: number
          format: float
        gamma:
          type: number
          format: float
        pad:
          type: boolean
        period:
          type: integer
          format: int32
        type:
          $ref: '#/components/schemas/HoltWintersType'
    TermsPartition:
      type: object
      properties:
        num_partitions:
          description: The number of partitions.
          type: integer
          format: int64
        partition:
          description: The partition number for this request.
          type: integer
          format: int64
      required:
        - num_partitions
        - partition
    BuiltinHighlighterType:
      oneOf:
        - type: string
          const: plain
        - title: fast_vector
          type: string
          const: fvh
        - type: string
          const: unified
    CustomAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - custom
        char_filter:
          type: array
          items:
            type: string
        filter:
          type: array
          items:
            type: string
        position_increment_gap:
          type: integer
        position_offset_gap:
          type: integer
        tokenizer:
          type: string
      required:
        - tokenizer
        - type
    FingerprintAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - fingerprint
        version:
          $ref: '#/components/schemas/VersionString'
        max_output_size:
          type: integer
        preserve_original:
          type: boolean
        separator:
          type: string
        stopwords:
          $ref: '#/components/schemas/StopWords'
        stopwords_path:
          type: string
      required:
        - max_output_size
        - preserve_original
        - separator
        - type
    KeywordAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - keyword
        version:
          $ref: '#/components/schemas/VersionString'
      required:
        - type
    LanguageAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - language
        version:
          $ref: '#/components/schemas/VersionString'
        language:
          $ref: '#/components/schemas/Language'
        stem_exclusion:
          type: array
          items:
            type: string
        stopwords:
          $ref: '#/components/schemas/StopWords'
        stopwords_path:
          type: string
      required:
        - language
        - stem_exclusion
        - type
    NoriAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - nori
        version:
          $ref: '#/components/schemas/VersionString'
        decompound_mode:
          $ref: '#/components/schemas/NoriDecompoundMode'
        stoptags:
          type: array
          items:
            type: string
        user_dictionary:
          type: string
      required:
        - type
    PatternAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - pattern
        version:
          $ref: '#/components/schemas/VersionString'
        flags:
          type: string
        lowercase:
          type: boolean
        pattern:
          type: string
        stopwords:
          $ref: '#/components/schemas/StopWords'
      required:
        - pattern
        - type
    SimpleAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - simple
        version:
          $ref: '#/components/schemas/VersionString'
      required:
        - type
    StandardAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - standard
        max_token_length:
          type: integer
        stopwords:
          $ref: '#/components/schemas/StopWords'
      required:
        - type
    StopAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - stop
        version:
          $ref: '#/components/schemas/VersionString'
        stopwords:
          $ref: '#/components/schemas/StopWords'
        stopwords_path:
          type: string
      required:
        - type
    WhitespaceAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - whitespace
        version:
          $ref: '#/components/schemas/VersionString'
      required:
        - type
    IcuAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - icu_analyzer
        method:
          $ref: '#/components/schemas/IcuNormalizationType'
        mode:
          $ref: '#/components/schemas/IcuNormalizationMode'
      required:
        - method
        - mode
        - type
    KuromojiAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - kuromoji
        mode:
          $ref: '#/components/schemas/KuromojiTokenizationMode'
        user_dictionary:
          type: string
      required:
        - mode
        - type
    SnowballAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - snowball
        version:
          $ref: '#/components/schemas/VersionString'
        language:
          $ref: '#/components/schemas/SnowballLanguage'
        stopwords:
          $ref: '#/components/schemas/StopWords'
      required:
        - language
        - type
    DutchAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - dutch
        stopwords:
          $ref: '#/components/schemas/StopWords'
      required:
        - type
    SmartcnAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - smartcn
    CjkAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - cjk
        stopwords:
          $ref: '#/components/schemas/StopWords'
        stopwords_path:
          type: string
    PhoneAnalyzer:
      type: object
      properties:
        type:
          type: string
          enum:
            - phone
            - phone-search
        phone-region:
          type: string
          description: Optional ISO 3166 country code, defaults to "ZZ" (unknown region).
    DecayFunction:
      allOf:
        - $ref: '#/components/schemas/DecayFunctionBase'
        - type: object
          propertyNames:
            title: field
            type: string
          additionalProperties:
            title: placement
            $ref: '#/components/schemas/DecayPlacement'
          minProperties: 1
    FieldValueFactorScoreFunction:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
        factor:
          description: Optional factor to multiply the field value with.
          type: number
          format: float
        missing:
          description: |-
            Value used if the document doesn't have that field.
            The modifier and factor are still applied to it as though it were read from the document.
          type: number
          format: double
        modifier:
          $ref: '#/components/schemas/FieldValueFactorModifier'
      required:
        - field
    RandomScoreFunction:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
        seed:
          oneOf:
            - type: integer
              format: int32
            - type: string
    ScriptScoreFunction:
      type: object
      properties:
        script:
          $ref: '#/components/schemas/Script'
      required:
        - script
    FieldLookup:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        index:
          $ref: '#/components/schemas/IndexName'
        path:
          $ref: '#/components/schemas/Field'
        routing:
          $ref: '#/components/schemas/Routing'
      required:
        - id
    GeoShape:
      type: object
      properties:
        type:
          type: string
        coordinates:
          type: array
    GeoShapeRelation:
      type: string
      enum:
        - contains
        - disjoint
        - intersects
        - within
    IntervalsContainer:
      type: object
      properties:
        all_of:
          $ref: '#/components/schemas/IntervalsAllOf'
        any_of:
          $ref: '#/components/schemas/IntervalsAnyOf'
        fuzzy:
          $ref: '#/components/schemas/IntervalsFuzzy'
        match:
          $ref: '#/components/schemas/IntervalsMatch'
        prefix:
          $ref: '#/components/schemas/IntervalsPrefix'
        wildcard:
          $ref: '#/components/schemas/IntervalsWildcard'
      minProperties: 1
      maxProperties: 1
    IntervalsFilter:
      type: object
      properties:
        after:
          $ref: '#/components/schemas/IntervalsContainer'
        before:
          $ref: '#/components/schemas/IntervalsContainer'
        contained_by:
          $ref: '#/components/schemas/IntervalsContainer'
        containing:
          $ref: '#/components/schemas/IntervalsContainer'
        not_contained_by:
          $ref: '#/components/schemas/IntervalsContainer'
        not_containing:
          $ref: '#/components/schemas/IntervalsContainer'
        not_overlapping:
          $ref: '#/components/schemas/IntervalsContainer'
        overlapping:
          $ref: '#/components/schemas/IntervalsContainer'
        script:
          $ref: '#/components/schemas/Script'
      minProperties: 1
      maxProperties: 1
    RescoreContext:
      type: object
      properties:
        oversample_factor:
          type: number
          format: float
    LikeDocument:
      type: object
      properties:
        doc:
          description: A document not present in the index.
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
        per_field_analyzer:
          type: object
          additionalProperties:
            type: string
        routing:
          $ref: '#/components/schemas/Routing'
        version:
          $ref: '#/components/schemas/VersionNumber'
        version_type:
          $ref: '#/components/schemas/VersionType'
        underscore_id:
          $ref: '#/components/schemas/Id'
        underscore_index:
          $ref: '#/components/schemas/IndexName'
        underscore_type:
          $ref: '#/components/schemas/Type'
    RangeQueryBase:
      allOf:
        - $ref: '#/components/schemas/QueryBase'
        - type: object
          properties:
            relation:
              $ref: '#/components/schemas/RangeRelation'
    DateFormat:
      type: string
    RankFeatureFunction:
      type: object
    SimpleQueryStringFlag:
      type: string
      enum:
        - ALL
        - AND
        - ESCAPE
        - FUZZY
        - NEAR
        - NONE
        - NOT
        - OR
        - PHRASE
        - PRECEDENCE
        - PREFIX
        - SLOP
        - WHITESPACE
    SpanGapQuery:
      description: Can only be used as a clause in a `span_near` query.
      type: object
      propertyNames:
        $ref: '#/components/schemas/Field'
      additionalProperties:
        title: span_width
        type: integer
        format: int32
      minProperties: 1
      maxProperties: 1
    TermsLookup:
      type: object
      properties:
        index:
          $ref: '#/components/schemas/IndexName'
        id:
          $ref: '#/components/schemas/Id'
        path:
          $ref: '#/components/schemas/Field'
        routing:
          $ref: '#/components/schemas/Routing'
    XyShape:
      type: object
      properties:
        type:
          type: string
        coordinates:
          type: array
    ScriptSortType:
      type: string
      enum:
        - number
        - string
        - version
    NestedSortValue:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/QueryContainer'
        max_children:
          type: integer
          format: int32
        nested:
          $ref: '#/components/schemas/NestedSortValue'
        path:
          $ref: '#/components/schemas/Field'
      required:
        - path
    FieldType:
      type: string
      enum:
        - aggregate_metric_double
        - alias
        - binary
        - boolean
        - byte
        - completion
        - constant_keyword
        - date
        - date_nanos
        - date_range
        - double
        - double_range
        - flat_object
        - float
        - float_range
        - geo_point
        - geo_shape
        - half_float
        - histogram
        - icu_collation_keyword
        - integer
        - integer_range
        - ip
        - ip_range
        - join
        - keyword
        - knn_vector
        - long
        - long_range
        - match_only_text
        - murmur3
        - nested
        - object
        - percolator
        - rank_feature
        - rank_features
        - scaled_float
        - search_as_you_type
        - short
        - text
        - token_count
        - unsigned_long
        - version
        - wildcard
        - xy_point
        - xy_shape
    FieldSortNumericType:
      oneOf:
        - type: string
          const: date
          description: The field contains date values.
        - type: string
          const: date_nanos
          description: The field contains date values with nanosecond precision.
        - type: string
          const: double
          description: The field contains double-precision floating-point values.
        - type: string
          const: long
          description: The field contains long integer values.
    SuggesterBase:
      type: object
      properties:
        analyzer:
          type: string
        field:
          type: string
        size:
          type: integer
          format: int32
      required:
        - field
    CompletionContext:
      oneOf:
        - title: context
          $ref: '#/components/schemas/Context'
        - type: object
          properties:
            boost:
              type: number
              format: double
            context:
              $ref: '#/components/schemas/Context'
            neighbours:
              type: array
              items:
                $ref: '#/components/schemas/GeoHashPrecision'
            precision:
              $ref: '#/components/schemas/GeoHashPrecision'
            prefix:
              type: boolean
          required:
            - context
    SuggestFuzziness:
      type: object
      properties:
        fuzziness:
          type: string
        min_length:
          type: integer
          format: int32
        prefix_length:
          type: integer
          format: int32
        transpositions:
          type: boolean
        unicode_aware:
          type: boolean
      required:
        - fuzziness
        - min_length
        - prefix_length
        - transpositions
        - unicode_aware
    PhraseSuggestCollate:
      type: object
      properties:
        params:
          type: object
          additionalProperties: true
        prune:
          type: boolean
        query:
          $ref: '#/components/schemas/PhraseSuggestCollateQuery'
      required:
        - query
    DirectGenerator:
      type: object
      properties:
        field:
          type: string
        max_edits:
          type: integer
          format: int32
        max_inspections:
          type: number
          format: float
        max_term_freq:
          type: number
          format: float
        min_doc_freq:
          type: number
          format: float
        min_word_length:
          type: integer
          format: int32
        post_filter:
          type: string
        pre_filter:
          type: string
        prefix_length:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        suggest_mode:
          $ref: '#/components/schemas/SuggestMode'
      required:
        - field
    PhraseSuggestHighlight:
      type: object
      properties:
        post_tag:
          type: string
        pre_tag:
          type: string
      required:
        - post_tag
        - pre_tag
    SmoothingModel:
      type: object
      properties:
        laplace:
          $ref: '#/components/schemas/LaplaceSmoothingModel'
        linear_interpolation:
          $ref: '#/components/schemas/LinearInterpolationSmoothingModel'
        stupid_backoff:
          $ref: '#/components/schemas/StupidBackoffSmoothingModel'
      minProperties: 1
      maxProperties: 1
    SuggestSort:
      type: string
      enum:
        - frequency
        - score
    StringDistance:
      type: string
      enum:
        - damerau_levenshtein
        - internal
        - jaro_winkler
        - levenshtein
        - ngram
    TotalHitsRelation:
      oneOf:
        - type: string
          const: eq
          description: Accurate.
        - type: string
          const: gte
          description: Lower bound, including returned events or sequences.
    Explanation:
      type: object
      properties:
        description:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/ExplanationDetail'
        value:
          oneOf:
            - type: integer
              format: int32
            - type: integer
              format: int64
            - type: number
              format: float
            - type: number
              format: double
      required:
        - description
        - details
        - value
    InnerHitsResult:
      type: object
      properties:
        hits:
          $ref: '#/components/schemas/HitsMetadata'
      required:
        - hits
    NestedIdentity:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
        offset:
          type: integer
          format: int32
        underscore_nested:
          $ref: '#/components/schemas/NestedIdentity'
      required:
        - field
        - offset
    AggregateBase:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Metadata'
    PercentilesAggregateBase:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            values:
              $ref: '#/components/schemas/Percentiles'
          required:
            - values
    SingleMetricAggregateBase:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            value:
              description: |-
                The metric value. A missing value generally means that there was no data to aggregate,
                unless specified otherwise.
              type:
                - 'null'
                - number
                - string
            value_as_string:
              type: string
          required:
            - value
    StandardDeviationBounds:
      type: object
      properties:
        upper:
          type:
            - 'null'
            - number
            - string
        lower:
          type:
            - 'null'
            - number
            - string
        upper_population:
          type:
            - 'null'
            - number
            - string
        lower_population:
          type:
            - 'null'
            - number
            - string
        upper_sampling:
          type:
            - 'null'
            - number
            - string
        lower_sampling:
          type:
            - 'null'
            - number
            - string
      required:
        - lower
        - lower_population
        - lower_sampling
        - upper
        - upper_population
        - upper_sampling
    StandardDeviationBoundsAsString:
      type: object
      properties:
        upper:
          type: string
        lower:
          type: string
        upper_population:
          type: string
        lower_population:
          type: string
        upper_sampling:
          type: string
        lower_sampling:
          type: string
      required:
        - lower
        - lower_population
        - lower_sampling
        - upper
        - upper_population
        - upper_sampling
    MultiBucketAggregateBaseHistogramBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsHistogramBucket'
          required:
            - buckets
    MultiBucketAggregateBaseDateHistogramBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsDateHistogramBucket'
          required:
            - buckets
    DurationLarge:
      description: 'A date histogram interval, similar to `Duration`, with support for additional units: `w` (week), `M` (month), `q` (quarter), and `y` (year).'
      type: string
    MultiBucketAggregateBaseVariableWidthHistogramBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsVariableWidthHistogramBucket'
          required:
            - buckets
    TermsAggregateBaseStringTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseStringTermsBucket'
        - type: object
          properties:
            doc_count_error_upper_bound:
              type: number
            sum_other_doc_count:
              type: number
    TermsAggregateBaseLongTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseLongTermsBucket'
        - type: object
          properties:
            doc_count_error_upper_bound:
              type: number
            sum_other_doc_count:
              type: number
    TermsAggregateBaseDoubleTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseDoubleTermsBucket'
        - type: object
          properties:
            doc_count_error_upper_bound:
              type: number
            sum_other_doc_count:
              type: number
    TermsAggregateBaseVoid:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseVoid'
        - type: object
          properties:
            doc_count_error_upper_bound:
              type: number
            sum_other_doc_count:
              type: number
    MultiBucketAggregateBaseLongRareTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsLongRareTermsBucket'
          required:
            - buckets
    MultiBucketAggregateBaseStringRareTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsStringRareTermsBucket'
          required:
            - buckets
    MultiBucketAggregateBaseVoid:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsVoid'
          required:
            - buckets
    TermsAggregateBaseMultiTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseMultiTermsBucket'
        - type: object
          properties:
            doc_count_error_upper_bound:
              type: number
            sum_other_doc_count:
              type: number
    SingleBucketAggregateBase:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            doc_count:
              type: number
          required:
            - doc_count
          additionalProperties:
            $ref: '#/components/schemas/Aggregate'
    MultiBucketAggregateBaseGeoHashGridBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsGeoHashGridBucket'
          required:
            - buckets
    MultiBucketAggregateBaseGeoTileGridBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsGeoTileGridBucket'
          required:
            - buckets
    MultiBucketAggregateBaseRangeBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsRangeBucket'
          required:
            - buckets
    MultiBucketAggregateBaseIpRangeBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsIpRangeBucket'
          required:
            - buckets
    MultiBucketAggregateBaseFiltersBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsFiltersBucket'
          required:
            - buckets
    MultiBucketAggregateBaseAdjacencyMatrixBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsAdjacencyMatrixBucket'
          required:
            - buckets
    SignificantTermsAggregateBaseSignificantLongTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseSignificantLongTermsBucket'
        - type: object
          properties:
            bg_count:
              type: number
            doc_count:
              type: number
    SignificantTermsAggregateBaseSignificantStringTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseSignificantStringTermsBucket'
        - type: object
          properties:
            bg_count:
              type: number
            doc_count:
              type: number
    SignificantTermsAggregateBaseVoid:
      allOf:
        - $ref: '#/components/schemas/MultiBucketAggregateBaseVoid'
        - type: object
          properties:
            bg_count:
              type: number
            doc_count:
              type: number
    MultiBucketAggregateBaseCompositeBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsCompositeBucket'
          required:
            - buckets
    InferenceFeatureImportance:
      type: object
      properties:
        feature_name:
          type: string
        importance:
          type: number
        classes:
          type: array
          items:
            $ref: '#/components/schemas/InferenceClassImportance'
      required:
        - feature_name
    InferenceTopClassEntry:
      type: object
      properties:
        class_name:
          $ref: '#/components/schemas/FieldValue'
        class_probability:
          type: number
        class_score:
          type: number
      required:
        - class_name
        - class_probability
        - class_score
    TopMetrics:
      type: object
      properties:
        sort:
          type: array
          items:
            $ref: '#/components/schemas/FieldValue'
        metrics:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FieldValue'
      required:
        - metrics
        - sort
    MatrixStatsFields:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Field'
        count:
          type: number
        mean:
          type: number
        variance:
          type: number
        skewness:
          type: number
        kurtosis:
          type: number
        covariance:
          type: object
          additionalProperties:
            type: number
        correlation:
          type: object
          additionalProperties:
            type: number
      required:
        - correlation
        - count
        - covariance
        - kurtosis
        - mean
        - name
        - skewness
        - variance
    GeoLine:
      type: object
      properties:
        type:
          description: Always `"LineString"`
          type: string
        coordinates:
          description: An array of `[lon, lat]` coordinates.
          type: array
          items:
            type: array
            items:
              type: number
              format: double
      required:
        - coordinates
        - type
    ClusterSearchStatus:
      type: string
      enum:
        - failed
        - partial
        - running
        - skipped
        - successful
    DurationValueUnitMillis:
      $ref: '#/components/schemas/UnitMillis'
    AggregationProfile:
      type: object
      properties:
        breakdown:
          $ref: '#/components/schemas/AggregationBreakdown'
        description:
          type: string
        time_in_nanos:
          $ref: '#/components/schemas/DurationValueUnitNanos'
        type:
          type: string
        debug:
          $ref: '#/components/schemas/AggregationProfileDebug'
        children:
          type: array
          items:
            $ref: '#/components/schemas/AggregationProfile'
      required:
        - breakdown
        - description
        - time_in_nanos
        - type
    SearchProfile:
      type: object
      properties:
        collector:
          type: array
          items:
            $ref: '#/components/schemas/Collector'
        query:
          type: array
          items:
            $ref: '#/components/schemas/QueryProfile'
        rewrite_time:
          type: integer
          format: int64
      required:
        - collector
        - query
        - rewrite_time
    FetchProfile:
      type: object
      properties:
        type:
          type: string
        description:
          type: string
        time_in_nanos:
          $ref: '#/components/schemas/DurationValueUnitNanos'
        breakdown:
          $ref: '#/components/schemas/FetchProfileBreakdown'
        debug:
          $ref: '#/components/schemas/FetchProfileDebug'
        children:
          type: array
          items:
            $ref: '#/components/schemas/FetchProfile'
      required:
        - breakdown
        - description
        - time_in_nanos
        - type
    SuggestBase:
      type: object
      properties:
        length:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        text:
          type: string
      required:
        - length
        - offset
        - text
    CompletionSuggestOption:
      type: object
      properties:
        collate_match:
          type: boolean
        contexts:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Context'
        fields:
          type: object
          additionalProperties:
            type: object
        text:
          type: string
        score:
          type: number
          format: float
        underscore_id:
          type: string
        underscore_index:
          $ref: '#/components/schemas/IndexName'
        underscore_routing:
          $ref: '#/components/schemas/Routing'
        underscore_score:
          type: number
          format: float
        underscore_source:
          type: object
      required:
        - text
    PhraseSuggestOption:
      type: object
      properties:
        text:
          type: string
        score:
          type: number
          format: double
        highlighted:
          type: string
        collate_match:
          type: boolean
      required:
        - score
        - text
    TermSuggestOption:
      type: object
      properties:
        text:
          type: string
        score:
          type: number
          format: double
        freq:
          type: integer
          format: int64
        highlighted:
          type: string
        collate_match:
          type: boolean
      required:
        - score
        - text
    BuiltinScriptLanguage:
      type: string
      enum:
        - expression
        - java
        - mustache
        - painless
    UnitMillis:
      description: The time unit for milliseconds.
      type: integer
      format: int64
    BucketsPath:
      description: |-
        Buckets path can be expressed in different ways, and an aggregation may accept some or all of these
        forms depending on its type. Refer to each aggregation's documentation to know what buckets
        path forms they accept.
      oneOf:
        - title: single
          type: string
        - title: array
          type: array
          items:
            type: string
        - title: dict
          type: object
          additionalProperties:
            type: string
    CompositeValuesSource:
      type: object
      properties:
        field:
          $ref: '#/components/schemas/Field'
        missing_bucket:
          type: boolean
        missing_order:
          $ref: '#/components/schemas/MissingOrder'
        script:
          $ref: '#/components/schemas/Script'
        value_type:
          $ref: '#/components/schemas/ValueType'
        order:
          $ref: '#/components/schemas/SortOrder'
    GeoHash:
      type: string
      description: The geohash string representation of a geographical location.
    HoltWintersType:
      oneOf:
        - title: additive
          type: string
          const: add
        - title: multiplicative
          type: string
          const: mult
    VersionString:
      type: string
    Language:
      type: string
      enum:
        - Arabic
        - Armenian
        - Basque
        - Brazilian
        - Bulgarian
        - Catalan
        - Chinese
        - Cjk
        - Czech
        - Danish
        - Dutch
        - English
        - Estonian
        - Finnish
        - French
        - Galician
        - German
        - Greek
        - Hindi
        - Hungarian
        - Indonesian
        - Irish
        - Italian
        - Latvian
        - Norwegian
        - Persian
        - Portuguese
        - Romanian
        - Russian
        - Sorani
        - Spanish
        - Swedish
        - Thai
        - Turkish
    NoriDecompoundMode:
      type: string
      enum:
        - discard
        - mixed
        - none
    IcuNormalizationType:
      type: string
      enum:
        - nfc
        - nfkc
        - nfkc_cf
    IcuNormalizationMode:
      type: string
      enum:
        - compose
        - decompose
    KuromojiTokenizationMode:
      type: string
      enum:
        - extended
        - normal
        - search
    SnowballLanguage:
      type: string
      enum:
        - Armenian
        - Basque
        - Catalan
        - Danish
        - Dutch
        - English
        - Finnish
        - French
        - German
        - German2
        - Hungarian
        - Italian
        - Kp
        - Lovins
        - Norwegian
        - Porter
        - Portuguese
        - Romanian
        - Russian
        - Spanish
        - Swedish
        - Turkish
    DecayFunctionBase:
      type: object
      properties:
        multi_value_mode:
          $ref: '#/components/schemas/MultiValueMode'
    DecayPlacement:
      anyOf:
        - $ref: '#/components/schemas/DateDecayPlacement'
        - $ref: '#/components/schemas/GeoDecayPlacement'
        - $ref: '#/components/schemas/NumericDecayPlacement'
    FieldValueFactorModifier:
      type: string
      enum:
        - ln
        - ln1p
        - ln2p
        - log
        - log1p
        - log2p
        - none
        - reciprocal
        - sqrt
        - square
    RangeRelation:
      type: string
      enum:
        - contains
        - intersects
        - within
    Context:
      description: Text or location that we want similar documents for or a lookup to a document's field for the text.
      oneOf:
        - title: category
          type: string
        - title: location
          $ref: '#/components/schemas/GeoLocation'
    PhraseSuggestCollateQuery:
      type: object
      properties:
        id:
          type: string
        source:
          type: string
    LaplaceSmoothingModel:
      type: object
      properties:
        alpha:
          type: number
          format: double
      required:
        - alpha
    LinearInterpolationSmoothingModel:
      type: object
      properties:
        bigram_lambda:
          type: number
          format: double
        trigram_lambda:
          type: number
          format: double
        unigram_lambda:
          type: number
          format: double
      required:
        - bigram_lambda
        - trigram_lambda
        - unigram_lambda
    StupidBackoffSmoothingModel:
      type: object
      properties:
        discount:
          type: number
          format: double
      required:
        - discount
    Percentiles:
      oneOf:
        - $ref: '#/components/schemas/KeyedPercentiles'
        - type: array
          items:
            $ref: '#/components/schemas/ArrayPercentilesItem'
    BucketsHistogramBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/HistogramBucket'
        - type: array
          items:
            $ref: '#/components/schemas/HistogramBucket'
    BucketsDateHistogramBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/DateHistogramBucket'
        - type: array
          items:
            $ref: '#/components/schemas/DateHistogramBucket'
    BucketsVariableWidthHistogramBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/VariableWidthHistogramBucket'
        - type: array
          items:
            $ref: '#/components/schemas/VariableWidthHistogramBucket'
    MultiBucketAggregateBaseStringTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsStringTermsBucket'
          required:
            - buckets
    MultiBucketAggregateBaseLongTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsLongTermsBucket'
          required:
            - buckets
    MultiBucketAggregateBaseDoubleTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsDoubleTermsBucket'
          required:
            - buckets
    BucketsLongRareTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/LongRareTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/LongRareTermsBucket'
    BucketsStringRareTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/StringRareTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/StringRareTermsBucket'
    BucketsVoid:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/Void'
        - type: array
          items:
            $ref: '#/components/schemas/Void'
    MultiBucketAggregateBaseMultiTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsMultiTermsBucket'
          required:
            - buckets
    BucketsGeoHashGridBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/GeoHashGridBucket'
        - type: array
          items:
            $ref: '#/components/schemas/GeoHashGridBucket'
    BucketsGeoTileGridBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/GeoTileGridBucket'
        - type: array
          items:
            $ref: '#/components/schemas/GeoTileGridBucket'
    BucketsRangeBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/RangeBucket'
        - type: array
          items:
            $ref: '#/components/schemas/RangeBucket'
    BucketsIpRangeBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/IpRangeBucket'
        - type: array
          items:
            $ref: '#/components/schemas/IpRangeBucket'
    BucketsFiltersBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/FiltersBucket'
        - type: array
          items:
            $ref: '#/components/schemas/FiltersBucket'
    BucketsAdjacencyMatrixBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/AdjacencyMatrixBucket'
        - type: array
          items:
            $ref: '#/components/schemas/AdjacencyMatrixBucket'
    MultiBucketAggregateBaseSignificantLongTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsSignificantLongTermsBucket'
          required:
            - buckets
    MultiBucketAggregateBaseSignificantStringTermsBucket:
      allOf:
        - $ref: '#/components/schemas/AggregateBase'
        - type: object
          properties:
            buckets:
              $ref: '#/components/schemas/BucketsSignificantStringTermsBucket'
          required:
            - buckets
    BucketsCompositeBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/CompositeBucket'
        - type: array
          items:
            $ref: '#/components/schemas/CompositeBucket'
    InferenceClassImportance:
      type: object
      properties:
        class_name:
          type: string
        importance:
          type: number
      required:
        - class_name
        - importance
    AggregationBreakdown:
      type: object
      properties:
        build_aggregation:
          type: integer
          format: int64
        build_aggregation_count:
          type: integer
          format: int64
        build_leaf_collector:
          type: integer
          format: int64
        build_leaf_collector_count:
          type: integer
          format: int64
        collect:
          type: integer
          format: int64
        collect_count:
          type: integer
          format: int64
        initialize:
          type: integer
          format: int64
        initialize_count:
          type: integer
          format: int64
        post_collection:
          type: integer
          format: int64
        post_collection_count:
          type: integer
          format: int64
        reduce:
          type: integer
          format: int64
        reduce_count:
          type: integer
          format: int64
      required:
        - build_aggregation
        - build_aggregation_count
        - build_leaf_collector
        - build_leaf_collector_count
        - collect
        - collect_count
        - initialize
        - initialize_count
        - reduce
        - reduce_count
    DurationValueUnitNanos:
      $ref: '#/components/schemas/UnitNanos'
    AggregationProfileDebug:
      type: object
      properties:
        segments_with_multi_valued_ords:
          type: integer
          format: int32
        collection_strategy:
          type: string
        segments_with_single_valued_ords:
          type: integer
          format: int32
        total_buckets:
          type: integer
          format: int32
        built_buckets:
          type: integer
          format: int32
        result_strategy:
          type: string
        has_filter:
          type: boolean
        delegate:
          type: string
        delegate_debug:
          $ref: '#/components/schemas/AggregationProfileDelegateDebug'
        chars_fetched:
          type: integer
          format: int32
        extract_count:
          type: integer
          format: int32
        extract_ns:
          type: integer
          format: int32
        values_fetched:
          type: integer
          format: int32
        collect_analyzed_ns:
          type: integer
          format: int32
        collect_analyzed_count:
          type: integer
          format: int32
        surviving_buckets:
          type: integer
          format: int32
        ordinals_collectors_used:
          type: integer
          format: int32
        ordinals_collectors_overhead_too_high:
          type: integer
          format: int32
        string_hashing_collectors_used:
          type: integer
          format: int32
        numeric_collectors_used:
          type: integer
          format: int32
        empty_collectors_used:
          type: integer
          format: int32
        deferred_aggregators:
          type: array
          items:
            type: string
        map_reducer:
          type: string
    Collector:
      type: object
      properties:
        name:
          type: string
        reason:
          type: string
        time_in_nanos:
          $ref: '#/components/schemas/DurationValueUnitNanos'
        children:
          type: array
          items:
            $ref: '#/components/schemas/Collector'
      required:
        - name
        - reason
        - time_in_nanos
    QueryProfile:
      type: object
      properties:
        breakdown:
          $ref: '#/components/schemas/QueryBreakdown'
        description:
          type: string
        time_in_nanos:
          $ref: '#/components/schemas/DurationValueUnitNanos'
        type:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/QueryProfile'
      required:
        - breakdown
        - description
        - time_in_nanos
        - type
    FetchProfileBreakdown:
      type: object
      properties:
        load_source:
          type: integer
          format: int32
        load_source_count:
          type: integer
          format: int32
        load_stored_fields:
          type: integer
          format: int32
        load_stored_fields_count:
          type: integer
          format: int32
        next_reader:
          type: integer
          format: int32
        next_reader_count:
          type: integer
          format: int32
        process_count:
          type: integer
          format: int32
        process:
          type: integer
          format: int32
    FetchProfileDebug:
      type: object
      properties:
        stored_fields:
          type: array
          items:
            type: string
        fast_path:
          type: integer
          format: int32
    MultiValueMode:
      type: string
      enum:
        - avg
        - max
        - min
        - sum
    DateDecayPlacement:
      type: object
      properties:
        decay:
          type: number
          format: double
        offset:
          $ref: '#/components/schemas/Duration'
        origin:
          $ref: '#/components/schemas/DateTime'
        scale:
          $ref: '#/components/schemas/Duration'
    GeoDecayPlacement:
      type: object
      properties:
        decay:
          type: number
          format: double
        offset:
          $ref: '#/components/schemas/Distance'
        origin:
          $ref: '#/components/schemas/GeoLocation'
        scale:
          $ref: '#/components/schemas/Distance'
    NumericDecayPlacement:
      type: object
      properties:
        decay:
          type: number
          format: double
        offset:
          type: number
          format: double
        origin:
          type: number
          format: double
        scale:
          type: number
          format: double
    KeyedPercentiles:
      type: object
      additionalProperties:
        type:
          - 'null'
          - number
          - string
    ArrayPercentilesItem:
      type: object
      properties:
        key:
          type: string
        value:
          type:
            - 'null'
            - number
            - string
        value_as_string:
          type: string
      required:
        - key
        - value
    HistogramBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key_as_string:
              type: string
            key:
              type: number
          required:
            - key
    DateHistogramBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key_as_string:
              type: string
            key:
              $ref: '#/components/schemas/EpochTimeUnitMillis'
          required:
            - key
    VariableWidthHistogramBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            min:
              type: number
            key:
              type: number
            max:
              type: number
            min_as_string:
              type: string
            key_as_string:
              type: string
            max_as_string:
              type: string
          required:
            - key
            - max
            - min
    BucketsStringTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/StringTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/StringTermsBucket'
    BucketsLongTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/LongTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/LongTermsBucket'
    BucketsDoubleTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/DoubleTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/DoubleTermsBucket'
    LongRareTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              type: number
            key_as_string:
              type: string
          required:
            - key
    StringRareTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              type: string
          required:
            - key
    Void:
      description: |-
        The absence of any type. This is commonly used in APIs that don't return a body.

        Although "void" is generally used for a unit type that has only one value, this is interpreted as
        the bottom type, which has no value. Most languages have a unit type, but few have a bottom type.

        See https://en.m.wikipedia.org/wiki/Unit_type and https://en.m.wikipedia.org/wiki/Bottom_type.
      type: object
    BucketsMultiTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/MultiTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/MultiTermsBucket'
    GeoHashGridBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              $ref: '#/components/schemas/GeoHash'
          required:
            - key
    GeoTileGridBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              $ref: '#/components/schemas/GeoTile'
          required:
            - key
    RangeBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            from:
              type: number
            to:
              type: number
            from_as_string:
              type: string
            to_as_string:
              type: string
            key:
              description: The bucket key. Present if the aggregation is not keyed.
              type: string
    IpRangeBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              type: string
            from:
              type: string
            to:
              type: string
    FiltersBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
    AdjacencyMatrixBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              type: string
          required:
            - key
    BucketsSignificantLongTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/SignificantLongTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/SignificantLongTermsBucket'
    BucketsSignificantStringTermsBucket:
      description: |-
        Aggregation buckets. By default they are returned as an array, but if the aggregation has keys configured for
        the different buckets, the result is a dictionary.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/SignificantStringTermsBucket'
        - type: array
          items:
            $ref: '#/components/schemas/SignificantStringTermsBucket'
    CompositeBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              $ref: '#/components/schemas/CompositeAggregateKey'
          required:
            - key
    UnitNanos:
      description: Time unit for nanoseconds.
      type: integer
      format: int64
    AggregationProfileDelegateDebug:
      type: object
      properties:
        segments_with_doc_count_field:
          type: integer
          format: int32
        segments_with_deleted_docs:
          type: integer
          format: int32
        filters:
          type: array
          items:
            $ref: '#/components/schemas/AggregationProfileDelegateDebugFilter'
        segments_counted:
          type: integer
          format: int32
        segments_collected:
          type: integer
          format: int32
    QueryBreakdown:
      type: object
      properties:
        advance:
          type: integer
          format: int64
        advance_count:
          type: integer
          format: int64
        build_scorer:
          type: integer
          format: int64
        build_scorer_count:
          type: integer
          format: int64
        create_weight:
          type: integer
          format: int64
        create_weight_count:
          type: integer
          format: int64
        match:
          type: integer
          format: int64
        match_count:
          type: integer
          format: int64
        shallow_advance:
          type: integer
          format: int64
        shallow_advance_count:
          type: integer
          format: int64
        next_doc:
          type: integer
          format: int64
        next_doc_count:
          type: integer
          format: int64
        score:
          type: integer
          format: int64
        score_count:
          type: integer
          format: int64
        compute_max_score:
          type: integer
          format: int64
        compute_max_score_count:
          type: integer
          format: int64
        set_min_competitive_score:
          type: integer
          format: int64
        set_min_competitive_score_count:
          type: integer
          format: int64
      required:
        - advance
        - advance_count
        - build_scorer
        - build_scorer_count
        - compute_max_score
        - compute_max_score_count
        - create_weight
        - create_weight_count
        - match
        - match_count
        - next_doc
        - next_doc_count
        - score
        - score_count
        - set_min_competitive_score
        - set_min_competitive_score_count
        - shallow_advance
        - shallow_advance_count
    MultiBucketBase:
      type: object
      properties:
        doc_count:
          type: number
      required:
        - doc_count
    StringTermsBucket:
      allOf:
        - $ref: '#/components/schemas/TermsBucketBase'
        - type: object
          properties:
            key:
              $ref: '#/components/schemas/FieldValue'
          required:
            - key
    LongTermsBucket:
      allOf:
        - $ref: '#/components/schemas/TermsBucketBase'
        - type: object
          properties:
            key:
              type: number
            key_as_string:
              type: string
          required:
            - key
    DoubleTermsBucket:
      allOf:
        - $ref: '#/components/schemas/TermsBucketBase'
        - type: object
          properties:
            key:
              type: number
            key_as_string:
              type: string
          required:
            - key
    MultiTermsBucket:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            key:
              type: array
              items:
                $ref: '#/components/schemas/FieldValue'
            key_as_string:
              type: string
            doc_count_error_upper_bound:
              type: number
          required:
            - key
    GeoTile:
      description: A map tile reference, represented as `{zoom}/{x}/{y}`.
      type: string
    SignificantLongTermsBucket:
      allOf:
        - $ref: '#/components/schemas/SignificantTermsBucketBase'
        - type: object
          properties:
            key:
              type: number
            key_as_string:
              type: string
          required:
            - key
    SignificantStringTermsBucket:
      allOf:
        - $ref: '#/components/schemas/SignificantTermsBucketBase'
        - type: object
          properties:
            key:
              type: string
          required:
            - key
    AggregationProfileDelegateDebugFilter:
      type: object
      properties:
        results_from_metadata:
          type: integer
          format: int32
        query:
          type: string
        specialized_for:
          type: string
        segments_counted_in_constant_time:
          type: integer
          format: int32
    TermsBucketBase:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            doc_count_error:
              type: number
    SignificantTermsBucketBase:
      allOf:
        - $ref: '#/components/schemas/MultiBucketBase'
        - type: object
          properties:
            score:
              type: number
            bg_count:
              type: number
          required:
            - bg_count
            - score
