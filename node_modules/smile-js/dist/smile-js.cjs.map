{"version":3,"file":"smile-js.cjs","sources":["../src/main/js/error.ts","../node_modules/.pnpm/bit-buffer@0.2.5/node_modules/bit-buffer/bit-buffer.js","../src/main/js/decoder.ts","../src/main/js/decoderStream.ts","../src/main/js/inputStream.ts","../src/main/js/sharedStringBuffer.ts","../src/main/js/parser.ts"],"sourcesContent":["/**\n * SMILE error.\n */\nexport class SmileError extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n","(function (root) {\n\n/**********************************************************\n *\n * BitView\n *\n * BitView provides a similar interface to the standard\n * DataView, but with support for bit-level reads / writes.\n *\n **********************************************************/\nvar BitView = function (source, byteOffset, byteLength) {\n\tvar isBuffer = source instanceof ArrayBuffer ||\n\t\t(typeof Buffer !== 'undefined' && source instanceof Buffer);\n\n\tif (!isBuffer) {\n\t\tthrow new Error('Must specify a valid ArrayBuffer or Buffer.');\n\t}\n\n\tbyteOffset = byteOffset || 0;\n\tbyteLength = byteLength || source.byteLength /* ArrayBuffer */ || source.length /* Buffer */;\n\n\tthis._view = new Uint8Array(source.buffer || source, byteOffset, byteLength);\n\n\tthis.bigEndian = false;\n};\n\n// Used to massage fp values so we can operate on them\n// at the bit level.\nBitView._scratch = new DataView(new ArrayBuffer(8));\n\nObject.defineProperty(BitView.prototype, 'buffer', {\n\tget: function () { return typeof Buffer !== 'undefined' ?  Buffer.from(this._view.buffer) : this._view.buffer; },\n\tenumerable: true,\n\tconfigurable: false\n});\n\nObject.defineProperty(BitView.prototype, 'byteLength', {\n\tget: function () { return this._view.length; },\n\tenumerable: true,\n\tconfigurable: false\n});\n\nBitView.prototype._setBit = function (offset, on) {\n\tif (on) {\n\t\tthis._view[offset >> 3] |= 1 << (offset & 7);\n\t} else {\n\t\tthis._view[offset >> 3] &= ~(1 << (offset & 7));\n\t}\n};\n\nBitView.prototype.getBits = function (offset, bits, signed) {\n\tvar available = (this._view.length * 8 - offset);\n\n\tif (bits > available) {\n\t\tthrow new Error('Cannot get ' + bits + ' bit(s) from offset ' + offset + ', ' + available + ' available');\n\t}\n\n\tvar value = 0;\n\tfor (var i = 0; i < bits;) {\n\t\tvar remaining = bits - i;\n\t\tvar bitOffset = offset & 7;\n\t\tvar currentByte = this._view[offset >> 3];\n\n\t\t// the max number of bits we can read from the current byte\n\t\tvar read = Math.min(remaining, 8 - bitOffset);\n\n\t\tvar mask, readBits;\n\t\tif (this.bigEndian) {\n\t\t\t// create a mask with the correct bit width\n\t\t\tmask = ~(0xFF << read);\n\t\t\t// shift the bits we want to the start of the byte and mask of the rest\n\t\t\treadBits = (currentByte >> (8 - read - bitOffset)) & mask;\n\n\t\t\tvalue <<= read;\n\t\t\tvalue |= readBits;\n\t\t} else {\n\t\t\t// create a mask with the correct bit width\n\t\t\tmask = ~(0xFF << read);\n\t\t\t// shift the bits we want to the start of the byte and mask off the rest\n\t\t\treadBits = (currentByte >> bitOffset) & mask;\n\n\t\t\tvalue |= readBits << i;\n\t\t}\n\n\t\toffset += read;\n\t\ti += read;\n\t}\n\n\tif (signed) {\n\t\t// If we're not working with a full 32 bits, check the\n\t\t// imaginary MSB for this bit count and convert to a\n\t\t// valid 32-bit signed value if set.\n\t\tif (bits !== 32 && value & (1 << (bits - 1))) {\n\t\t\tvalue |= -1 ^ ((1 << bits) - 1);\n\t\t}\n\n\t\treturn value;\n\t}\n\n\treturn value >>> 0;\n};\n\nBitView.prototype.setBits = function (offset, value, bits) {\n\tvar available = (this._view.length * 8 - offset);\n\n\tif (bits > available) {\n\t\tthrow new Error('Cannot set ' + bits + ' bit(s) from offset ' + offset + ', ' + available + ' available');\n\t}\n\n\tfor (var i = 0; i < bits;) {\n\t\tvar remaining = bits - i;\n\t\tvar bitOffset = offset & 7;\n\t\tvar byteOffset = offset >> 3;\n\t\tvar wrote = Math.min(remaining, 8 - bitOffset);\n\n\t\tvar mask, writeBits, destMask;\n\t\tif (this.bigEndian) {\n\t\t\t// create a mask with the correct bit width\n\t\t\tmask = ~(~0 << wrote);\n\t\t\t// shift the bits we want to the start of the byte and mask of the rest\n\t\t\twriteBits = (value >> (bits - i - wrote)) & mask;\n\n\t\t\tvar destShift = 8 - bitOffset - wrote;\n\t\t\t// destination mask to zero all the bits we're changing first\n\t\t\tdestMask = ~(mask << destShift);\n\n\t\t\tthis._view[byteOffset] =\n\t\t\t\t(this._view[byteOffset] & destMask)\n\t\t\t\t| (writeBits << destShift);\n\n\t\t} else {\n\t\t\t// create a mask with the correct bit width\n\t\t\tmask = ~(0xFF << wrote);\n\t\t\t// shift the bits we want to the start of the byte and mask of the rest\n\t\t\twriteBits = value & mask;\n\t\t\tvalue >>= wrote;\n\n\t\t\t// destination mask to zero all the bits we're changing first\n\t\t\tdestMask = ~(mask << bitOffset);\n\n\t\t\tthis._view[byteOffset] =\n\t\t\t\t(this._view[byteOffset] & destMask)\n\t\t\t\t| (writeBits << bitOffset);\n\t\t}\n\n\t\toffset += wrote;\n\t\ti += wrote;\n\t}\n};\n\nBitView.prototype.getBoolean = function (offset) {\n\treturn this.getBits(offset, 1, false) !== 0;\n};\nBitView.prototype.getInt8 = function (offset) {\n\treturn this.getBits(offset, 8, true);\n};\nBitView.prototype.getUint8 = function (offset) {\n\treturn this.getBits(offset, 8, false);\n};\nBitView.prototype.getInt16 = function (offset) {\n\treturn this.getBits(offset, 16, true);\n};\nBitView.prototype.getUint16 = function (offset) {\n\treturn this.getBits(offset, 16, false);\n};\nBitView.prototype.getInt32 = function (offset) {\n\treturn this.getBits(offset, 32, true);\n};\nBitView.prototype.getUint32 = function (offset) {\n\treturn this.getBits(offset, 32, false);\n};\nBitView.prototype.getFloat32 = function (offset) {\n\tBitView._scratch.setUint32(0, this.getUint32(offset));\n\treturn BitView._scratch.getFloat32(0);\n};\nBitView.prototype.getFloat64 = function (offset) {\n\tBitView._scratch.setUint32(0, this.getUint32(offset));\n\t// DataView offset is in bytes.\n\tBitView._scratch.setUint32(4, this.getUint32(offset+32));\n\treturn BitView._scratch.getFloat64(0);\n};\n\nBitView.prototype.setBoolean = function (offset, value) {\n\tthis.setBits(offset, value ? 1 : 0, 1);\n};\nBitView.prototype.setInt8  =\nBitView.prototype.setUint8 = function (offset, value) {\n\tthis.setBits(offset, value, 8);\n};\nBitView.prototype.setInt16  =\nBitView.prototype.setUint16 = function (offset, value) {\n\tthis.setBits(offset, value, 16);\n};\nBitView.prototype.setInt32  =\nBitView.prototype.setUint32 = function (offset, value) {\n\tthis.setBits(offset, value, 32);\n};\nBitView.prototype.setFloat32 = function (offset, value) {\n\tBitView._scratch.setFloat32(0, value);\n\tthis.setBits(offset, BitView._scratch.getUint32(0), 32);\n};\nBitView.prototype.setFloat64 = function (offset, value) {\n\tBitView._scratch.setFloat64(0, value);\n\tthis.setBits(offset, BitView._scratch.getUint32(0), 32);\n\tthis.setBits(offset+32, BitView._scratch.getUint32(4), 32);\n};\nBitView.prototype.getArrayBuffer = function (offset, byteLength) {\n\tvar buffer = new Uint8Array(byteLength);\n\tfor (var i = 0; i < byteLength; i++) {\n\t\tbuffer[i] = this.getUint8(offset + (i * 8));\n\t}\n\treturn buffer;\n};\n\n/**********************************************************\n *\n * BitStream\n *\n * Small wrapper for a BitView to maintain your position,\n * as well as to handle reading / writing of string data\n * to the underlying buffer.\n *\n **********************************************************/\nvar reader = function (name, size) {\n\treturn function () {\n\t\tif (this._index + size > this._length) {\n\t\t\tthrow new Error('Trying to read past the end of the stream');\n\t\t}\n\t\tvar val = this._view[name](this._index);\n\t\tthis._index += size;\n\t\treturn val;\n\t};\n};\n\nvar writer = function (name, size) {\n\treturn function (value) {\n\t\tthis._view[name](this._index, value);\n\t\tthis._index += size;\n\t};\n};\n\nfunction readASCIIString(stream, bytes) {\n\treturn readString(stream, bytes, false);\n}\n\nfunction readUTF8String(stream, bytes) {\n\treturn readString(stream, bytes, true);\n}\n\nfunction readString(stream, bytes, utf8) {\n\tif (bytes === 0) {\n\t\treturn '';\n\t}\n\tvar i = 0;\n\tvar chars = [];\n\tvar append = true;\n\tvar fixedLength = !!bytes;\n\tif (!bytes) {\n\t\tbytes = Math.floor((stream._length - stream._index) / 8);\n\t}\n\n\t// Read while we still have space available, or until we've\n\t// hit the fixed byte length passed in.\n\twhile (i < bytes) {\n\t\tvar c = stream.readUint8();\n\n\t\t// Stop appending chars once we hit 0x00\n\t\tif (c === 0x00) {\n\t\t\tappend = false;\n\n\t\t\t// If we don't have a fixed length to read, break out now.\n\t\t\tif (!fixedLength) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (append) {\n\t\t\tchars.push(c);\n\t\t}\n\n\t\ti++;\n\t}\n\n\tvar string = String.fromCharCode.apply(null, chars);\n\tif (utf8) {\n\t\ttry {\n\t\t\treturn decodeURIComponent(escape(string)); // https://stackoverflow.com/a/17192845\n\t\t} catch (e) {\n\t\t\treturn string;\n\t\t}\n\t} else {\n\t\treturn string;\n\t}\n}\n\nfunction writeASCIIString(stream, string, bytes) {\n\tvar length = bytes || string.length + 1;  // + 1 for NULL\n\n\tfor (var i = 0; i < length; i++) {\n\t\tstream.writeUint8(i < string.length ? string.charCodeAt(i) : 0x00);\n\t}\n}\n\nfunction writeUTF8String(stream, string, bytes) {\n\tvar byteArray = stringToByteArray(string);\n\n\tvar length = bytes || byteArray.length + 1;  // + 1 for NULL\n\tfor (var i = 0; i < length; i++) {\n\t\tstream.writeUint8(i < byteArray.length ? byteArray[i] : 0x00);\n\t}\n}\n\nfunction stringToByteArray(str) { // https://gist.github.com/volodymyr-mykhailyk/2923227\n\tvar b = [], i, unicode;\n\tfor (i = 0; i < str.length; i++) {\n\t\tunicode = str.charCodeAt(i);\n\t\t// 0x00000000 - 0x0000007f -> 0xxxxxxx\n\t\tif (unicode <= 0x7f) {\n\t\t\tb.push(unicode);\n\t\t\t// 0x00000080 - 0x000007ff -> 110xxxxx 10xxxxxx\n\t\t} else if (unicode <= 0x7ff) {\n\t\t\tb.push((unicode >> 6) | 0xc0);\n\t\t\tb.push((unicode & 0x3F) | 0x80);\n\t\t\t// 0x00000800 - 0x0000ffff -> 1110xxxx 10xxxxxx 10xxxxxx\n\t\t} else if (unicode <= 0xffff) {\n\t\t\tb.push((unicode >> 12) | 0xe0);\n\t\t\tb.push(((unicode >> 6) & 0x3f) | 0x80);\n\t\t\tb.push((unicode & 0x3f) | 0x80);\n\t\t\t// 0x00010000 - 0x001fffff -> 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\t\t} else {\n\t\t\tb.push((unicode >> 18) | 0xf0);\n\t\t\tb.push(((unicode >> 12) & 0x3f) | 0x80);\n\t\t\tb.push(((unicode >> 6) & 0x3f) | 0x80);\n\t\t\tb.push((unicode & 0x3f) | 0x80);\n\t\t}\n\t}\n\n\treturn b;\n}\n\nvar BitStream = function (source, byteOffset, byteLength) {\n\tvar isBuffer = source instanceof ArrayBuffer ||\n\t\t(typeof Buffer !== 'undefined' && source instanceof Buffer);\n\n\tif (!(source instanceof BitView) && !isBuffer) {\n\t\tthrow new Error('Must specify a valid BitView, ArrayBuffer or Buffer');\n\t}\n\n\tif (isBuffer) {\n\t\tthis._view = new BitView(source, byteOffset, byteLength);\n\t} else {\n\t\tthis._view = source;\n\t}\n\n\tthis._index = 0;\n\tthis._startIndex = 0;\n\tthis._length = this._view.byteLength * 8;\n};\n\nObject.defineProperty(BitStream.prototype, 'index', {\n\tget: function () { return this._index - this._startIndex; },\n\tset: function (val) { this._index = val + this._startIndex; },\n\tenumerable: true,\n\tconfigurable: true\n});\n\nObject.defineProperty(BitStream.prototype, 'length', {\n\tget: function () { return this._length - this._startIndex; },\n\tset: function (val) { this._length = val + this._startIndex; },\n\tenumerable  : true,\n\tconfigurable: true\n});\n\nObject.defineProperty(BitStream.prototype, 'bitsLeft', {\n\tget: function () { return this._length - this._index; },\n\tenumerable  : true,\n\tconfigurable: true\n});\n\nObject.defineProperty(BitStream.prototype, 'byteIndex', {\n\t// Ceil the returned value, over compensating for the amount of\n\t// bits written to the stream.\n\tget: function () { return Math.ceil(this._index / 8); },\n\tset: function (val) { this._index = val * 8; },\n\tenumerable: true,\n\tconfigurable: true\n});\n\nObject.defineProperty(BitStream.prototype, 'buffer', {\n\tget: function () { return this._view.buffer; },\n\tenumerable: true,\n\tconfigurable: false\n});\n\nObject.defineProperty(BitStream.prototype, 'view', {\n\tget: function () { return this._view; },\n\tenumerable: true,\n\tconfigurable: false\n});\n\nObject.defineProperty(BitStream.prototype, 'bigEndian', {\n\tget: function () { return this._view.bigEndian; },\n\tset: function (val) { this._view.bigEndian = val; },\n\tenumerable: true,\n\tconfigurable: false\n});\n\nBitStream.prototype.readBits = function (bits, signed) {\n\tvar val = this._view.getBits(this._index, bits, signed);\n\tthis._index += bits;\n\treturn val;\n};\n\nBitStream.prototype.writeBits = function (value, bits) {\n\tthis._view.setBits(this._index, value, bits);\n\tthis._index += bits;\n};\n\nBitStream.prototype.readBoolean = reader('getBoolean', 1);\nBitStream.prototype.readInt8 = reader('getInt8', 8);\nBitStream.prototype.readUint8 = reader('getUint8', 8);\nBitStream.prototype.readInt16 = reader('getInt16', 16);\nBitStream.prototype.readUint16 = reader('getUint16', 16);\nBitStream.prototype.readInt32 = reader('getInt32', 32);\nBitStream.prototype.readUint32 = reader('getUint32', 32);\nBitStream.prototype.readFloat32 = reader('getFloat32', 32);\nBitStream.prototype.readFloat64 = reader('getFloat64', 64);\n\nBitStream.prototype.writeBoolean = writer('setBoolean', 1);\nBitStream.prototype.writeInt8 = writer('setInt8', 8);\nBitStream.prototype.writeUint8 = writer('setUint8', 8);\nBitStream.prototype.writeInt16 = writer('setInt16', 16);\nBitStream.prototype.writeUint16 = writer('setUint16', 16);\nBitStream.prototype.writeInt32 = writer('setInt32', 32);\nBitStream.prototype.writeUint32 = writer('setUint32', 32);\nBitStream.prototype.writeFloat32 = writer('setFloat32', 32);\nBitStream.prototype.writeFloat64 = writer('setFloat64', 64);\n\nBitStream.prototype.readASCIIString = function (bytes) {\n\treturn readASCIIString(this, bytes);\n};\n\nBitStream.prototype.readUTF8String = function (bytes) {\n\treturn readUTF8String(this, bytes);\n};\n\nBitStream.prototype.writeASCIIString = function (string, bytes) {\n\twriteASCIIString(this, string, bytes);\n};\n\nBitStream.prototype.writeUTF8String = function (string, bytes) {\n\twriteUTF8String(this, string, bytes);\n};\nBitStream.prototype.readBitStream = function(bitLength) {\n\tvar slice = new BitStream(this._view);\n\tslice._startIndex = this._index;\n\tslice._index = this._index;\n\tslice.length = bitLength;\n\tthis._index += bitLength;\n\treturn slice;\n};\n\nBitStream.prototype.writeBitStream = function(stream, length) {\n\tif (!length) {\n\t\tlength = stream.bitsLeft;\n\t}\n\n\tvar bitsToWrite;\n\twhile (length > 0) {\n\t\tbitsToWrite = Math.min(length, 32);\n\t\tthis.writeBits(stream.readBits(bitsToWrite), bitsToWrite);\n\t\tlength -= bitsToWrite;\n\t}\n};\n\nBitStream.prototype.readArrayBuffer = function(byteLength) {\n\tvar buffer = this._view.getArrayBuffer(this._index, byteLength);\n\tthis._index += (byteLength * 8);\n\treturn buffer;\n};\n\nBitStream.prototype.writeArrayBuffer = function(buffer, byteLength) {\n\tthis.writeBitStream(new BitStream(buffer), byteLength * 8);\n};\n\n// AMD / RequireJS\nif (typeof define !== 'undefined' && define.amd) {\n\tdefine(function () {\n\t\treturn {\n\t\t\tBitView: BitView,\n\t\t\tBitStream: BitStream\n\t\t};\n\t});\n}\n// Node.js\nelse if (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = {\n\t\tBitView: BitView,\n\t\tBitStream: BitStream\n\t};\n}\n\n}(this));\n","import {SmileError} from './error.js';\nimport {BitView} from 'bit-buffer';\n\nconst bitMask = [0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff];\n\nexport class Decoder {\n    private normalizeInt(value: number | bigint): number | bigint {\n        if (typeof value === 'bigint') {\n            if ((value >= BigInt(Number.MIN_SAFE_INTEGER)) && (value <= BigInt(Number.MAX_SAFE_INTEGER))) {\n                return Number(value);\n            } else {\n                return value;\n            }\n        } else {\n            return value;\n        }\n    }\n\n    public decodeVInt(bytes: Uint8Array): number | bigint {\n        if (bytes.length <= 0) {\n            throw new SmileError('invalid VInt');\n        }\n        let value = BigInt(0);\n        for (let i = 0; i < bytes.length; i++) {\n            const n = bytes[i];\n            if (i < (bytes.length - 1)) {\n                if ((n & 0x80) !== 0x00) {\n                    throw new SmileError('invalid VInt');\n                }\n                value = (value * BigInt(128)) + BigInt(n & 0x7f);\n            } else {\n                if ((n & 0x80) !== 0x80) {\n                    throw new SmileError('invalid VInt');\n                }\n                value = (value * BigInt(64)) + BigInt(n & 0x3f);\n                break;\n            }\n        }\n        return this.normalizeInt(value);\n    }\n\n    public decodeZigZag(value: number | bigint): number | bigint {\n        if (value < 0) {\n            throw new SmileError(\"illegal zigzag value\");\n        }\n        if (typeof value === 'bigint') {\n            if (value <= BigInt(2147483647)) {\n                if ((value % BigInt(2)) === BigInt(1)) {\n                    return this.normalizeInt(-(value >> BigInt(1)) - BigInt(1));\n                } else {\n                    return this.normalizeInt(value >> BigInt(1));\n                }\n            } else {\n                if ((value % BigInt(2)) === BigInt(1)) {\n                    const v = (value - BigInt(1)) / BigInt(2);\n                    return this.normalizeInt(-v - BigInt(1));\n                } else {\n                    const v = value / BigInt(2);\n                    return this.normalizeInt(v);\n                }\n            }\n        } else {\n            if (value <= 2147483647) {\n                if ((value % 2) === 1) {\n                    return -(value >> 1) - 1;\n                } else {\n                    return (value >> 1);\n                }\n            } else {\n                if ((value % 2) === 1) {\n                    return -((value - 1) / 2) - 1;\n                } else {\n                    return value / 2;\n                }\n            }\n        }\n    }\n\n    public decodeAscii(bytes: Uint8Array): string {\n        return new TextDecoder('ascii').decode(bytes);\n    }\n\n    public decodeUtf8(bytes: Uint8Array): string {\n        return new TextDecoder('utf8').decode(bytes);\n    }\n\n    private toDataView(bytes: Uint8Array): DataView {\n        const buffer = new ArrayBuffer(bytes.length);\n        const view = new DataView(buffer);\n        for (let i = 0; i < bytes.length; i++) {\n            view.setUint8(i, bytes[i])\n        }\n        return view;\n    }\n\n    // big-endian encoding\n    public decodeFloat32(bytes: Uint8Array): number {\n        return this.toDataView(bytes).getFloat32(0, false);\n    }\n\n    // big-endian encoding\n    public decodeFloat64(bytes: Uint8Array): number {\n        return this.toDataView(bytes).getFloat64(0, false);\n    }\n\n    public decodeFixedLengthBigEndianEncodedBytes(bytes: Uint8Array, decodedByteLen: number): Uint8Array {\n        const arrayBuffer = new ArrayBuffer(decodedByteLen);\n        const bitView = new BitView(arrayBuffer);\n        bitView.bigEndian = true;\n        let bitOffset = 0;\n        let remainingBits = decodedByteLen * 8;\n        for (let i = 0; i < bytes.length; i++) {\n            const b = bytes[i];\n            const bitsToWrite = Math.min(remainingBits, i === 0 ? 7 - ((bytes.length * 7) - (decodedByteLen * 8)) : 7);\n            bitView.setBits(bitOffset, b, bitsToWrite);\n            bitOffset += bitsToWrite;\n            remainingBits -= bitsToWrite;\n        }\n        return new Uint8Array(arrayBuffer);\n    }\n\n    public decodeSafeBinaryEncodedBits(bytes: Uint8Array, decodedByteLen: number): Uint8Array {\n        const arrayBuffer = new ArrayBuffer(decodedByteLen);\n        const bitView = new BitView(arrayBuffer);\n        bitView.bigEndian = true;\n        let bitOffset = 0;\n        let remainingBits = decodedByteLen * 8;\n        for (let i = 0; i < bytes.length; i++) {\n            const b = bytes[i];\n            const bitsToWrite = Math.min(remainingBits, 7);\n            bitView.setBits(bitOffset, b, bitsToWrite);\n            bitOffset += bitsToWrite;\n            remainingBits -= bitsToWrite;\n        }\n        return new Uint8Array(arrayBuffer);\n    }\n}\n","import {InputStream} from './inputStream.js';\nimport {Decoder} from './decoder.js';\nimport {SmileError} from './error.js';\n\nexport class DecoderStream {\n    private readonly inputStream: InputStream;\n    private readonly decoder: Decoder;\n\n    constructor(inputStream: InputStream) {\n        this.inputStream = inputStream;\n        this.decoder = new Decoder();\n    }\n\n    public isEof(): boolean {\n        return this.inputStream.isEof();\n    }\n\n    public read(): number {\n        return this.inputStream.read();\n    }\n\n    public peek(): number {\n        return this.inputStream.peek();\n    }\n\n    private readVIntBytes(): Uint8Array {\n        const bytes: number[] = [];\n        while (true) {\n            const n = this.read();\n            bytes.push(n);\n            if ((n & 0x80) === 0x80) {\n                break;\n            }\n        }\n        return new Uint8Array(bytes);\n    }\n\n    public readUnsignedVint(): number | bigint {\n        const bytes = this.readVIntBytes();\n        return this.decoder.decodeVInt(bytes);\n    }\n\n    public readSignedVint(): number | bigint {\n        return this.decoder.decodeZigZag(this.readUnsignedVint());\n    }\n\n    public readAscii(len: number): string {\n        return this.decoder.decodeAscii(this.inputStream.readArray(len));\n    }\n\n    public readUtf8(len: number): string {\n        return this.decoder.decodeUtf8(this.inputStream.readArray(len));\n    }\n\n    public readFloat32(): number {\n        return this.decoder.decodeFloat32(this.readFixedLengthBigEndianEncodedBytes(4));\n    }\n\n    public readFloat64(): number {\n        return this.decoder.decodeFloat64(this.readFixedLengthBigEndianEncodedBytes(8));\n    }\n\n    public readFixedLengthBigEndianEncodedBytes(decodedByteLen: number): Uint8Array {\n        const encodedByteLen = Math.ceil(decodedByteLen * 8 / 7);\n        const bytes = this.inputStream.readArray(encodedByteLen);\n        return this.decoder.decodeFixedLengthBigEndianEncodedBytes(bytes, decodedByteLen);\n    }\n\n    public readSafeBinary(): Uint8Array {\n        const decodedByteLen = this.readUnsignedVint();\n        if (typeof (decodedByteLen) === 'bigint') {\n            throw new SmileError('invalid length');\n        }\n        const encodedByteLen = Math.ceil(decodedByteLen * 8 / 7);\n        const bytes = this.inputStream.readArray(encodedByteLen);\n        return this.decoder.decodeSafeBinaryEncodedBits(bytes, decodedByteLen);\n    }\n\n    public readBigInt(): bigint {\n        const bytes = this.readSafeBinary();\n        let n = BigInt(0);\n        if (bytes.length === 0) {\n            return n;\n        }\n        const isNegative = (bytes[0] & 0x80) === 0x80;\n        for (let i = 0; i < bytes.length; i++) {\n            n = (n * BigInt(256)) + BigInt(isNegative ? bytes[i] ^ 0xff : bytes[i]);\n        }\n        if (isNegative) {\n            n = -n - BigInt(1);\n        }\n        return n;\n    }\n\n    public readBigDecimal(): number {\n        const scale = this.readSignedVint();\n        if (typeof (scale) === 'bigint') {\n            throw new SmileError('invalid scale');\n        }\n        const magnitude = this.readBigInt();\n        return Number(magnitude) * Math.pow(10, scale);\n    }\n\n    public readLongString(): Uint8Array {\n        const buffer: number[] = [];\n        while (true) {\n            const c = this.inputStream.read();\n            if (c === 0xfc) {\n                break;\n            }\n            buffer.push(c);\n        }\n        return new Uint8Array(buffer);\n    }\n\n    public readLongAscii() {\n        return this.decoder.decodeAscii(this.readLongString());\n    }\n\n    public readLongUtf8() {\n        return this.decoder.decodeUtf8(this.readLongString());\n    }\n\n    public readBytes(len: number): Uint8Array {\n        return this.inputStream.readArray(len);\n    }\n}\n","import {SmileError} from './error.js';\n\nexport const eofError = new SmileError('end of input stream reached');\n\nexport class InputStream {\n    private readonly array: Uint8Array;\n    private index: number = 0;\n\n    constructor(array: Uint8Array) {\n        this.array = array;\n    }\n\n    public isEof(): boolean {\n        return (this.index >= this.array.length);\n    }\n\n    public read(): number {\n        if (this.isEof()) {\n            throw eofError;\n        }\n        const v = this.array[this.index];\n        this.index++;\n        return v;\n    }\n\n    public readArray(n: number): Uint8Array {\n        if (this.isEof()) {\n            throw eofError;\n        }\n        if (n < 0) {\n            throw new SmileError('invalid read amount');\n        }\n        const endIndex = Math.min(this.array.length, this.index + n);\n        const readData = this.array.subarray(this.index, endIndex);\n        this.index = endIndex;\n        return readData;\n    }\n\n    public peek(): number {\n        if (this.isEof()) {\n            throw eofError;\n        }\n        return this.array[this.index];\n    }\n\n    public skip(n: number) {\n        if (this.isEof()) {\n            throw eofError;\n        }\n        if (n < 0) {\n            throw new SmileError('invalid skip amount');\n        }\n        this.index += n;\n    }\n}\n","import {SmileError} from './error.js';\n\nexport class SharedStringBuffer {\n    private readonly name: string;\n    private readonly enabled: boolean;\n    private readonly maxStrings: number;\n    private strings: string[];\n    private stringMap: { [key: string]: number };\n\n    constructor(name: string, enabled: boolean, maxStrings: number) {\n        this.name = name;\n        this.enabled = enabled;\n        this.maxStrings = maxStrings;\n        this.strings = [];\n        this.stringMap = {};\n        this.reset();\n    }\n\n    private reset(): void {\n        //console.log(`[${this.name}] ssb: reset`);\n        this.strings = [];\n        this.stringMap = {};\n    }\n\n    public static newValues(enabled: boolean): SharedStringBuffer {\n        return new SharedStringBuffer('values', enabled, 1024);\n    }\n\n    public static newKeyNames(enabled: boolean): SharedStringBuffer {\n        return new SharedStringBuffer('keyNames', enabled, 1024);\n    }\n\n    public addString(s: string): number {\n        if (!this.enabled) {\n            return -1;\n        }\n        const bytes = new TextEncoder().encode(s);\n        if (bytes.length > 64) {\n            return -1;\n        }\n        if (s in this.stringMap) {\n            return this.stringMap[s];\n        }\n        if (this.strings.length >= this.maxStrings) {\n            this.reset();\n        }\n        const index = this.strings.length;\n        //console.log(`[${this.name}] ssb: add [${index}] '${s}'`);\n        this.strings.push(s);\n        this.stringMap[s] = index;\n        return index;\n    };\n\n    public getString(index: number): string {\n        //console.log(`[${this.name}] ssb: get [${index}] '${this.strings[index]}'`);\n        if (!this.enabled) {\n            throw new SmileError('shared strings are not enabled');\n        }\n        if (index >= this.strings.length) {\n            throw new SmileError(`shared string reference out of range`);\n        }\n        return this.strings[index];\n    };\n}\n","import {DecoderStream} from './decoderStream.js';\nimport {InputStream} from './inputStream.js';\nimport {SmileError} from './error.js';\nimport {SharedStringBuffer} from './sharedStringBuffer.js';\nimport {Decoder} from './decoder.js';\n\n/**\n * Parser options.\n */\nexport interface ParserOptions {\n}\n\n/**\n * Parse SMILE-encoded data.\n *\n * @param data SMILE-encoded data\n * @param options parser options\n */\nexport function parse(data: Uint8Array, options?: ParserOptions): any {\n    return new ParserContext(data, options).parse();\n}\n\nclass ParserContext {\n    private readonly decoderStream: DecoderStream;\n    private readonly options?: ParserOptions;\n    private readonly decoder: Decoder;\n    private sharedPropertyName: boolean;\n    private sharedStringValue: boolean;\n    private rawBinary: boolean;\n    private version: number;\n    private sharedPropertyNames: SharedStringBuffer;\n    private sharedStringValues: SharedStringBuffer;\n\n    constructor(data: Uint8Array, options?: ParserOptions) {\n        this.decoderStream = new DecoderStream(new InputStream(data));\n        this.options = options;\n        this.decoder = new Decoder();\n\n        this.sharedPropertyName = false;\n        this.sharedStringValue = false;\n        this.rawBinary = false;\n        this.version = 0;\n\n        // TODO\n        this.sharedPropertyNames = SharedStringBuffer.newKeyNames(false);\n        this.sharedStringValues = SharedStringBuffer.newValues(false);\n    }\n\n    public parse(): any {\n        // parse header\n        const b0 = this.decoderStream.read();\n        const b1 = this.decoderStream.read();\n        const b2 = this.decoderStream.read();\n\n        if ((b0 !== 0x3a) || (b1 !== 0x29) || (b2 !== 0x0a)) {\n            throw new SmileError('invalid Smile header');\n        }\n\n        const b3 = this.decoderStream.read();\n        this.sharedPropertyName = (b3 & 0x01) === 0x01;\n        this.sharedStringValue = (b3 & 0x02) === 0x02;\n        this.rawBinary = (b3 & 0x04) === 0x04;\n        this.version = b3 >> 4;\n\n        this.sharedPropertyNames = SharedStringBuffer.newKeyNames(this.sharedPropertyName);\n        this.sharedStringValues = SharedStringBuffer.newValues(this.sharedStringValue);\n\n        return this.readValue();\n    };\n\n    private readValue(): any {\n        const token = this.decoderStream.read();\n        const tokenClass = token >> 5;\n        const tokenValue = token & 0x1f;\n        switch (tokenClass) {\n            case 0: { // Short Shared Value String reference (single byte)\n                return this.sharedStringValues.getString(tokenValue - 1);\n            }\n            case 1: { // Simple literals, numbers\n                return this.readSimpleLiteralValue(token);\n            }\n            case 2: { // Tiny ASCII (1 - 32 bytes == chars)\n                const value = this.decoderStream.readAscii(tokenValue + 1);\n                this.sharedStringValues.addString(value);\n                return value;\n            }\n            case 3: { // Short ASCII (33 - 64 bytes == chars)\n                const value = this.decoderStream.readAscii(tokenValue + 33);\n                this.sharedStringValues.addString(value);\n                return value;\n            }\n            case 4: { // Tiny Unicode (2 - 33 bytes; <= 33 characters)\n                const value = this.decoderStream.readUtf8(tokenValue + 2);\n                this.sharedStringValues.addString(value);\n                return value;\n            }\n            case 5: { // Short Unicode (34 - 64 bytes; <= 64 characters)\n                const value = this.decoderStream.readUtf8(tokenValue + 34);\n                this.sharedStringValues.addString(value);\n                return value;\n            }\n            case 6: { // Small integers (single byte)\n                return this.decoder.decodeZigZag(tokenValue);\n            }\n            case 7: { // Binary / Long text / structure markers\n                return this.readBinaryLongTextStructureValues(token);\n            }\n            default: {\n                throw new SmileError(`unknown token class: ${tokenClass}`);\n            }\n        }\n    }\n\n    private readSimpleLiteralValue(token: number): any {\n        if (token === 0x20) { // empty string\n            return '';\n        } else if (token === 0x21) { // null\n            return null;\n        } else if (token === 0x22) { // false\n            return false;\n        } else if (token === 0x23) { // true\n            return true;\n        } else if (token === 0x24) { // 32-bit integer; zigzag encoded, 1 - 5 data bytes\n            return this.decoderStream.readSignedVint();\n        } else if (token === 0x25) { // 64-bit integer; zigzag encoded, 5 - 10 data bytes\n            return this.decoderStream.readSignedVint();\n        } else if (token === 0x26) { // BigInteger\n            return this.decoderStream.readBigInt();\n        } else if (token === 0x28) { // 32-bit float\n            return this.decoderStream.readFloat32();\n        } else if (token === 0x29) { // 64-bit double\n            return this.decoderStream.readFloat64();\n        } else if (token === 0x2a) { // BigDecimal\n            return this.decoderStream.readBigDecimal();\n        } else {\n            throw new SmileError('invalid value token 0x' + token.toString(16));\n        }\n    }\n\n    private readBinaryLongTextStructureValues(token: number): any {\n        if (token === 0xe0) { // Long (variable length) ASCII text\n            return this.decoderStream.readLongAscii();\n        } else if (token === 0xe4) { // Long (variable length) Unicode text\n            return this.decoderStream.readLongUtf8();\n        } else if (token === 0xe8) { // Binary, 7-bit encoded\n            return this.decoderStream.readSafeBinary();\n        } else if ((token >= 0xec) && (token <= 0xef)) { // Shared String reference, long\n            const reference = ((token & 0x03) << 8) | this.decoderStream.read();\n            return this.sharedStringValues.getString(reference);\n        } else if (token === 0xf8) { // START_ARRAY\n            const array: any[] = [];\n            while (this.decoderStream.peek() !== 0xf9) { // END_ARRAY\n                array.push(this.readValue());\n            }\n            this.decoderStream.read(); // consume END_ARRAY\n            return array;\n        } else if (token === 0xfa) { // START_OBJECT\n            const object: { [key: string]: any } = {};\n            while (this.decoderStream.peek() !== 0xfb) { // END_OBJECT\n                const key = this.readKey();\n                const value = this.readValue();\n                object[key] = value;\n            }\n            this.decoderStream.read(); // consume END_OBJECT\n            return object;\n        } else if (token === 0xfd) { // Binary (raw)\n            const len = this.decoderStream.readUnsignedVint();\n            if (typeof(len) === 'bigint') {\n                throw new SmileError('invalid length');\n            }\n            return this.decoderStream.readBytes(len);\n        } else {\n            throw new SmileError('invalid value token 0x' + token.toString(16));\n        }\n    }\n\n    private readKey(): string {\n        const token = this.decoderStream.read();\n        if (token === 0x20) { // Special constant name '' (empty String)\n            return '';\n        } else if ((token >= 0x30) && (token <= 0x33)) { // 'Long' shared key name reference (2 byte token)\n            const reference = ((token & 0x03) << 8) | this.decoderStream.read();\n            return this.sharedPropertyNames.getString(reference);\n        } else if (token === 0x34) { // Long (not-yet-shared) Unicode name\n            return this.decoderStream.readLongUtf8();\n        } else if ((token >= 0x40) && (token <= 0x7f)) { // 'Short' shared key name reference\n            const reference = token & 0x3f;\n            return this.sharedPropertyNames.getString(reference);\n        } else if ((token >= 0x80) && (token <= 0xbf)) { // Short Ascii names\n            const s = this.decoderStream.readAscii((token & 0x3f) + 1);\n            this.sharedPropertyNames.addString(s);\n            return s;\n        } else if ((token >= 0xc0) && (token <= 0xf7)) { // Short Unicode names\n            const s = this.decoderStream.readUtf8((token & 0x3f) + 2);\n            this.sharedPropertyNames.addString(s);\n            return s;\n        } else {\n            throw new SmileError('invalid key token 0x' + token.toString(16));\n        }\n    }\n}\n"],"names":["SmileError","msg","root","BitView","source","byteOffset","byteLength","isBuffer","offset","on","bits","signed","available","value","i","remaining","bitOffset","currentByte","read","mask","readBits","wrote","writeBits","destMask","destShift","buffer","reader","name","size","val","writer","readASCIIString","stream","bytes","readString","readUTF8String","utf8","chars","append","fixedLength","c","string","writeASCIIString","length","writeUTF8String","byteArray","stringToByteArray","str","b","unicode","BitStream","bitLength","slice","bitsToWrite","module","Decoder","v","view","decodedByteLen","arrayBuffer","bitView","remainingBits","DecoderStream","inputStream","n","len","encodedByteLen","isNegative","scale","magnitude","eofError","InputStream","array","endIndex","readData","SharedStringBuffer","enabled","maxStrings","s","index","parse","data","options","ParserContext","b0","b1","b2","b3","token","tokenClass","tokenValue","reference","object","key"],"mappings":"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","x_google_ignoreList":[1]}