{"version":3,"file":"smile-js.js","sources":["../src/main/js/error.ts","../node_modules/.pnpm/bit-buffer@0.2.5/node_modules/bit-buffer/bit-buffer.js","../src/main/js/decoder.ts","../src/main/js/decoderStream.ts","../src/main/js/inputStream.ts","../src/main/js/sharedStringBuffer.ts","../src/main/js/parser.ts"],"sourcesContent":["/**\n * SMILE error.\n */\nexport class SmileError extends Error {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n","(function (root) {\n\n/**********************************************************\n *\n * BitView\n *\n * BitView provides a similar interface to the standard\n * DataView, but with support for bit-level reads / writes.\n *\n **********************************************************/\nvar BitView = function (source, byteOffset, byteLength) {\n\tvar isBuffer = source instanceof ArrayBuffer ||\n\t\t(typeof Buffer !== 'undefined' && source instanceof Buffer);\n\n\tif (!isBuffer) {\n\t\tthrow new Error('Must specify a valid ArrayBuffer or Buffer.');\n\t}\n\n\tbyteOffset = byteOffset || 0;\n\tbyteLength = byteLength || source.byteLength /* ArrayBuffer */ || source.length /* Buffer */;\n\n\tthis._view = new Uint8Array(source.buffer || source, byteOffset, byteLength);\n\n\tthis.bigEndian = false;\n};\n\n// Used to massage fp values so we can operate on them\n// at the bit level.\nBitView._scratch = new DataView(new ArrayBuffer(8));\n\nObject.defineProperty(BitView.prototype, 'buffer', {\n\tget: function () { return typeof Buffer !== 'undefined' ?  Buffer.from(this._view.buffer) : this._view.buffer; },\n\tenumerable: true,\n\tconfigurable: false\n});\n\nObject.defineProperty(BitView.prototype, 'byteLength', {\n\tget: function () { return this._view.length; },\n\tenumerable: true,\n\tconfigurable: false\n});\n\nBitView.prototype._setBit = function (offset, on) {\n\tif (on) {\n\t\tthis._view[offset >> 3] |= 1 << (offset & 7);\n\t} else {\n\t\tthis._view[offset >> 3] &= ~(1 << (offset & 7));\n\t}\n};\n\nBitView.prototype.getBits = function (offset, bits, signed) {\n\tvar available = (this._view.length * 8 - offset);\n\n\tif (bits > available) {\n\t\tthrow new Error('Cannot get ' + bits + ' bit(s) from offset ' + offset + ', ' + available + ' available');\n\t}\n\n\tvar value = 0;\n\tfor (var i = 0; i < bits;) {\n\t\tvar remaining = bits - i;\n\t\tvar bitOffset = offset & 7;\n\t\tvar currentByte = this._view[offset >> 3];\n\n\t\t// the max number of bits we can read from the current byte\n\t\tvar read = Math.min(remaining, 8 - bitOffset);\n\n\t\tvar mask, readBits;\n\t\tif (this.bigEndian) {\n\t\t\t// create a mask with the correct bit width\n\t\t\tmask = ~(0xFF << read);\n\t\t\t// shift the bits we want to the start of the byte and mask of the rest\n\t\t\treadBits = (currentByte >> (8 - read - bitOffset)) & mask;\n\n\t\t\tvalue <<= read;\n\t\t\tvalue |= readBits;\n\t\t} else {\n\t\t\t// create a mask with the correct bit width\n\t\t\tmask = ~(0xFF << read);\n\t\t\t// shift the bits we want to the start of the byte and mask off the rest\n\t\t\treadBits = (currentByte >> bitOffset) & mask;\n\n\t\t\tvalue |= readBits << i;\n\t\t}\n\n\t\toffset += read;\n\t\ti += read;\n\t}\n\n\tif (signed) {\n\t\t// If we're not working with a full 32 bits, check the\n\t\t// imaginary MSB for this bit count and convert to a\n\t\t// valid 32-bit signed value if set.\n\t\tif (bits !== 32 && value & (1 << (bits - 1))) {\n\t\t\tvalue |= -1 ^ ((1 << bits) - 1);\n\t\t}\n\n\t\treturn value;\n\t}\n\n\treturn value >>> 0;\n};\n\nBitView.prototype.setBits = function (offset, value, bits) {\n\tvar available = (this._view.length * 8 - offset);\n\n\tif (bits > available) {\n\t\tthrow new Error('Cannot set ' + bits + ' bit(s) from offset ' + offset + ', ' + available + ' available');\n\t}\n\n\tfor (var i = 0; i < bits;) {\n\t\tvar remaining = bits - i;\n\t\tvar bitOffset = offset & 7;\n\t\tvar byteOffset = offset >> 3;\n\t\tvar wrote = Math.min(remaining, 8 - bitOffset);\n\n\t\tvar mask, writeBits, destMask;\n\t\tif (this.bigEndian) {\n\t\t\t// create a mask with the correct bit width\n\t\t\tmask = ~(~0 << wrote);\n\t\t\t// shift the bits we want to the start of the byte and mask of the rest\n\t\t\twriteBits = (value >> (bits - i - wrote)) & mask;\n\n\t\t\tvar destShift = 8 - bitOffset - wrote;\n\t\t\t// destination mask to zero all the bits we're changing first\n\t\t\tdestMask = ~(mask << destShift);\n\n\t\t\tthis._view[byteOffset] =\n\t\t\t\t(this._view[byteOffset] & destMask)\n\t\t\t\t| (writeBits << destShift);\n\n\t\t} else {\n\t\t\t// create a mask with the correct bit width\n\t\t\tmask = ~(0xFF << wrote);\n\t\t\t// shift the bits we want to the start of the byte and mask of the rest\n\t\t\twriteBits = value & mask;\n\t\t\tvalue >>= wrote;\n\n\t\t\t// destination mask to zero all the bits we're changing first\n\t\t\tdestMask = ~(mask << bitOffset);\n\n\t\t\tthis._view[byteOffset] =\n\t\t\t\t(this._view[byteOffset] & destMask)\n\t\t\t\t| (writeBits << bitOffset);\n\t\t}\n\n\t\toffset += wrote;\n\t\ti += wrote;\n\t}\n};\n\nBitView.prototype.getBoolean = function (offset) {\n\treturn this.getBits(offset, 1, false) !== 0;\n};\nBitView.prototype.getInt8 = function (offset) {\n\treturn this.getBits(offset, 8, true);\n};\nBitView.prototype.getUint8 = function (offset) {\n\treturn this.getBits(offset, 8, false);\n};\nBitView.prototype.getInt16 = function (offset) {\n\treturn this.getBits(offset, 16, true);\n};\nBitView.prototype.getUint16 = function (offset) {\n\treturn this.getBits(offset, 16, false);\n};\nBitView.prototype.getInt32 = function (offset) {\n\treturn this.getBits(offset, 32, true);\n};\nBitView.prototype.getUint32 = function (offset) {\n\treturn this.getBits(offset, 32, false);\n};\nBitView.prototype.getFloat32 = function (offset) {\n\tBitView._scratch.setUint32(0, this.getUint32(offset));\n\treturn BitView._scratch.getFloat32(0);\n};\nBitView.prototype.getFloat64 = function (offset) {\n\tBitView._scratch.setUint32(0, this.getUint32(offset));\n\t// DataView offset is in bytes.\n\tBitView._scratch.setUint32(4, this.getUint32(offset+32));\n\treturn BitView._scratch.getFloat64(0);\n};\n\nBitView.prototype.setBoolean = function (offset, value) {\n\tthis.setBits(offset, value ? 1 : 0, 1);\n};\nBitView.prototype.setInt8  =\nBitView.prototype.setUint8 = function (offset, value) {\n\tthis.setBits(offset, value, 8);\n};\nBitView.prototype.setInt16  =\nBitView.prototype.setUint16 = function (offset, value) {\n\tthis.setBits(offset, value, 16);\n};\nBitView.prototype.setInt32  =\nBitView.prototype.setUint32 = function (offset, value) {\n\tthis.setBits(offset, value, 32);\n};\nBitView.prototype.setFloat32 = function (offset, value) {\n\tBitView._scratch.setFloat32(0, value);\n\tthis.setBits(offset, BitView._scratch.getUint32(0), 32);\n};\nBitView.prototype.setFloat64 = function (offset, value) {\n\tBitView._scratch.setFloat64(0, value);\n\tthis.setBits(offset, BitView._scratch.getUint32(0), 32);\n\tthis.setBits(offset+32, BitView._scratch.getUint32(4), 32);\n};\nBitView.prototype.getArrayBuffer = function (offset, byteLength) {\n\tvar buffer = new Uint8Array(byteLength);\n\tfor (var i = 0; i < byteLength; i++) {\n\t\tbuffer[i] = this.getUint8(offset + (i * 8));\n\t}\n\treturn buffer;\n};\n\n/**********************************************************\n *\n * BitStream\n *\n * Small wrapper for a BitView to maintain your position,\n * as well as to handle reading / writing of string data\n * to the underlying buffer.\n *\n **********************************************************/\nvar reader = function (name, size) {\n\treturn function () {\n\t\tif (this._index + size > this._length) {\n\t\t\tthrow new Error('Trying to read past the end of the stream');\n\t\t}\n\t\tvar val = this._view[name](this._index);\n\t\tthis._index += size;\n\t\treturn val;\n\t};\n};\n\nvar writer = function (name, size) {\n\treturn function (value) {\n\t\tthis._view[name](this._index, value);\n\t\tthis._index += size;\n\t};\n};\n\nfunction readASCIIString(stream, bytes) {\n\treturn readString(stream, bytes, false);\n}\n\nfunction readUTF8String(stream, bytes) {\n\treturn readString(stream, bytes, true);\n}\n\nfunction readString(stream, bytes, utf8) {\n\tif (bytes === 0) {\n\t\treturn '';\n\t}\n\tvar i = 0;\n\tvar chars = [];\n\tvar append = true;\n\tvar fixedLength = !!bytes;\n\tif (!bytes) {\n\t\tbytes = Math.floor((stream._length - stream._index) / 8);\n\t}\n\n\t// Read while we still have space available, or until we've\n\t// hit the fixed byte length passed in.\n\twhile (i < bytes) {\n\t\tvar c = stream.readUint8();\n\n\t\t// Stop appending chars once we hit 0x00\n\t\tif (c === 0x00) {\n\t\t\tappend = false;\n\n\t\t\t// If we don't have a fixed length to read, break out now.\n\t\t\tif (!fixedLength) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (append) {\n\t\t\tchars.push(c);\n\t\t}\n\n\t\ti++;\n\t}\n\n\tvar string = String.fromCharCode.apply(null, chars);\n\tif (utf8) {\n\t\ttry {\n\t\t\treturn decodeURIComponent(escape(string)); // https://stackoverflow.com/a/17192845\n\t\t} catch (e) {\n\t\t\treturn string;\n\t\t}\n\t} else {\n\t\treturn string;\n\t}\n}\n\nfunction writeASCIIString(stream, string, bytes) {\n\tvar length = bytes || string.length + 1;  // + 1 for NULL\n\n\tfor (var i = 0; i < length; i++) {\n\t\tstream.writeUint8(i < string.length ? string.charCodeAt(i) : 0x00);\n\t}\n}\n\nfunction writeUTF8String(stream, string, bytes) {\n\tvar byteArray = stringToByteArray(string);\n\n\tvar length = bytes || byteArray.length + 1;  // + 1 for NULL\n\tfor (var i = 0; i < length; i++) {\n\t\tstream.writeUint8(i < byteArray.length ? byteArray[i] : 0x00);\n\t}\n}\n\nfunction stringToByteArray(str) { // https://gist.github.com/volodymyr-mykhailyk/2923227\n\tvar b = [], i, unicode;\n\tfor (i = 0; i < str.length; i++) {\n\t\tunicode = str.charCodeAt(i);\n\t\t// 0x00000000 - 0x0000007f -> 0xxxxxxx\n\t\tif (unicode <= 0x7f) {\n\t\t\tb.push(unicode);\n\t\t\t// 0x00000080 - 0x000007ff -> 110xxxxx 10xxxxxx\n\t\t} else if (unicode <= 0x7ff) {\n\t\t\tb.push((unicode >> 6) | 0xc0);\n\t\t\tb.push((unicode & 0x3F) | 0x80);\n\t\t\t// 0x00000800 - 0x0000ffff -> 1110xxxx 10xxxxxx 10xxxxxx\n\t\t} else if (unicode <= 0xffff) {\n\t\t\tb.push((unicode >> 12) | 0xe0);\n\t\t\tb.push(((unicode >> 6) & 0x3f) | 0x80);\n\t\t\tb.push((unicode & 0x3f) | 0x80);\n\t\t\t// 0x00010000 - 0x001fffff -> 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\t\t} else {\n\t\t\tb.push((unicode >> 18) | 0xf0);\n\t\t\tb.push(((unicode >> 12) & 0x3f) | 0x80);\n\t\t\tb.push(((unicode >> 6) & 0x3f) | 0x80);\n\t\t\tb.push((unicode & 0x3f) | 0x80);\n\t\t}\n\t}\n\n\treturn b;\n}\n\nvar BitStream = function (source, byteOffset, byteLength) {\n\tvar isBuffer = source instanceof ArrayBuffer ||\n\t\t(typeof Buffer !== 'undefined' && source instanceof Buffer);\n\n\tif (!(source instanceof BitView) && !isBuffer) {\n\t\tthrow new Error('Must specify a valid BitView, ArrayBuffer or Buffer');\n\t}\n\n\tif (isBuffer) {\n\t\tthis._view = new BitView(source, byteOffset, byteLength);\n\t} else {\n\t\tthis._view = source;\n\t}\n\n\tthis._index = 0;\n\tthis._startIndex = 0;\n\tthis._length = this._view.byteLength * 8;\n};\n\nObject.defineProperty(BitStream.prototype, 'index', {\n\tget: function () { return this._index - this._startIndex; },\n\tset: function (val) { this._index = val + this._startIndex; },\n\tenumerable: true,\n\tconfigurable: true\n});\n\nObject.defineProperty(BitStream.prototype, 'length', {\n\tget: function () { return this._length - this._startIndex; },\n\tset: function (val) { this._length = val + this._startIndex; },\n\tenumerable  : true,\n\tconfigurable: true\n});\n\nObject.defineProperty(BitStream.prototype, 'bitsLeft', {\n\tget: function () { return this._length - this._index; },\n\tenumerable  : true,\n\tconfigurable: true\n});\n\nObject.defineProperty(BitStream.prototype, 'byteIndex', {\n\t// Ceil the returned value, over compensating for the amount of\n\t// bits written to the stream.\n\tget: function () { return Math.ceil(this._index / 8); },\n\tset: function (val) { this._index = val * 8; },\n\tenumerable: true,\n\tconfigurable: true\n});\n\nObject.defineProperty(BitStream.prototype, 'buffer', {\n\tget: function () { return this._view.buffer; },\n\tenumerable: true,\n\tconfigurable: false\n});\n\nObject.defineProperty(BitStream.prototype, 'view', {\n\tget: function () { return this._view; },\n\tenumerable: true,\n\tconfigurable: false\n});\n\nObject.defineProperty(BitStream.prototype, 'bigEndian', {\n\tget: function () { return this._view.bigEndian; },\n\tset: function (val) { this._view.bigEndian = val; },\n\tenumerable: true,\n\tconfigurable: false\n});\n\nBitStream.prototype.readBits = function (bits, signed) {\n\tvar val = this._view.getBits(this._index, bits, signed);\n\tthis._index += bits;\n\treturn val;\n};\n\nBitStream.prototype.writeBits = function (value, bits) {\n\tthis._view.setBits(this._index, value, bits);\n\tthis._index += bits;\n};\n\nBitStream.prototype.readBoolean = reader('getBoolean', 1);\nBitStream.prototype.readInt8 = reader('getInt8', 8);\nBitStream.prototype.readUint8 = reader('getUint8', 8);\nBitStream.prototype.readInt16 = reader('getInt16', 16);\nBitStream.prototype.readUint16 = reader('getUint16', 16);\nBitStream.prototype.readInt32 = reader('getInt32', 32);\nBitStream.prototype.readUint32 = reader('getUint32', 32);\nBitStream.prototype.readFloat32 = reader('getFloat32', 32);\nBitStream.prototype.readFloat64 = reader('getFloat64', 64);\n\nBitStream.prototype.writeBoolean = writer('setBoolean', 1);\nBitStream.prototype.writeInt8 = writer('setInt8', 8);\nBitStream.prototype.writeUint8 = writer('setUint8', 8);\nBitStream.prototype.writeInt16 = writer('setInt16', 16);\nBitStream.prototype.writeUint16 = writer('setUint16', 16);\nBitStream.prototype.writeInt32 = writer('setInt32', 32);\nBitStream.prototype.writeUint32 = writer('setUint32', 32);\nBitStream.prototype.writeFloat32 = writer('setFloat32', 32);\nBitStream.prototype.writeFloat64 = writer('setFloat64', 64);\n\nBitStream.prototype.readASCIIString = function (bytes) {\n\treturn readASCIIString(this, bytes);\n};\n\nBitStream.prototype.readUTF8String = function (bytes) {\n\treturn readUTF8String(this, bytes);\n};\n\nBitStream.prototype.writeASCIIString = function (string, bytes) {\n\twriteASCIIString(this, string, bytes);\n};\n\nBitStream.prototype.writeUTF8String = function (string, bytes) {\n\twriteUTF8String(this, string, bytes);\n};\nBitStream.prototype.readBitStream = function(bitLength) {\n\tvar slice = new BitStream(this._view);\n\tslice._startIndex = this._index;\n\tslice._index = this._index;\n\tslice.length = bitLength;\n\tthis._index += bitLength;\n\treturn slice;\n};\n\nBitStream.prototype.writeBitStream = function(stream, length) {\n\tif (!length) {\n\t\tlength = stream.bitsLeft;\n\t}\n\n\tvar bitsToWrite;\n\twhile (length > 0) {\n\t\tbitsToWrite = Math.min(length, 32);\n\t\tthis.writeBits(stream.readBits(bitsToWrite), bitsToWrite);\n\t\tlength -= bitsToWrite;\n\t}\n};\n\nBitStream.prototype.readArrayBuffer = function(byteLength) {\n\tvar buffer = this._view.getArrayBuffer(this._index, byteLength);\n\tthis._index += (byteLength * 8);\n\treturn buffer;\n};\n\nBitStream.prototype.writeArrayBuffer = function(buffer, byteLength) {\n\tthis.writeBitStream(new BitStream(buffer), byteLength * 8);\n};\n\n// AMD / RequireJS\nif (typeof define !== 'undefined' && define.amd) {\n\tdefine(function () {\n\t\treturn {\n\t\t\tBitView: BitView,\n\t\t\tBitStream: BitStream\n\t\t};\n\t});\n}\n// Node.js\nelse if (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = {\n\t\tBitView: BitView,\n\t\tBitStream: BitStream\n\t};\n}\n\n}(this));\n","import {SmileError} from './error.js';\nimport {BitView} from 'bit-buffer';\n\nconst bitMask = [0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff];\n\nexport class Decoder {\n    private normalizeInt(value: number | bigint): number | bigint {\n        if (typeof value === 'bigint') {\n            if ((value >= BigInt(Number.MIN_SAFE_INTEGER)) && (value <= BigInt(Number.MAX_SAFE_INTEGER))) {\n                return Number(value);\n            } else {\n                return value;\n            }\n        } else {\n            return value;\n        }\n    }\n\n    public decodeVInt(bytes: Uint8Array): number | bigint {\n        if (bytes.length <= 0) {\n            throw new SmileError('invalid VInt');\n        }\n        let value = BigInt(0);\n        for (let i = 0; i < bytes.length; i++) {\n            const n = bytes[i];\n            if (i < (bytes.length - 1)) {\n                if ((n & 0x80) !== 0x00) {\n                    throw new SmileError('invalid VInt');\n                }\n                value = (value * BigInt(128)) + BigInt(n & 0x7f);\n            } else {\n                if ((n & 0x80) !== 0x80) {\n                    throw new SmileError('invalid VInt');\n                }\n                value = (value * BigInt(64)) + BigInt(n & 0x3f);\n                break;\n            }\n        }\n        return this.normalizeInt(value);\n    }\n\n    public decodeZigZag(value: number | bigint): number | bigint {\n        if (value < 0) {\n            throw new SmileError(\"illegal zigzag value\");\n        }\n        if (typeof value === 'bigint') {\n            if (value <= BigInt(2147483647)) {\n                if ((value % BigInt(2)) === BigInt(1)) {\n                    return this.normalizeInt(-(value >> BigInt(1)) - BigInt(1));\n                } else {\n                    return this.normalizeInt(value >> BigInt(1));\n                }\n            } else {\n                if ((value % BigInt(2)) === BigInt(1)) {\n                    const v = (value - BigInt(1)) / BigInt(2);\n                    return this.normalizeInt(-v - BigInt(1));\n                } else {\n                    const v = value / BigInt(2);\n                    return this.normalizeInt(v);\n                }\n            }\n        } else {\n            if (value <= 2147483647) {\n                if ((value % 2) === 1) {\n                    return -(value >> 1) - 1;\n                } else {\n                    return (value >> 1);\n                }\n            } else {\n                if ((value % 2) === 1) {\n                    return -((value - 1) / 2) - 1;\n                } else {\n                    return value / 2;\n                }\n            }\n        }\n    }\n\n    public decodeAscii(bytes: Uint8Array): string {\n        return new TextDecoder('ascii').decode(bytes);\n    }\n\n    public decodeUtf8(bytes: Uint8Array): string {\n        return new TextDecoder('utf8').decode(bytes);\n    }\n\n    private toDataView(bytes: Uint8Array): DataView {\n        const buffer = new ArrayBuffer(bytes.length);\n        const view = new DataView(buffer);\n        for (let i = 0; i < bytes.length; i++) {\n            view.setUint8(i, bytes[i])\n        }\n        return view;\n    }\n\n    // big-endian encoding\n    public decodeFloat32(bytes: Uint8Array): number {\n        return this.toDataView(bytes).getFloat32(0, false);\n    }\n\n    // big-endian encoding\n    public decodeFloat64(bytes: Uint8Array): number {\n        return this.toDataView(bytes).getFloat64(0, false);\n    }\n\n    public decodeFixedLengthBigEndianEncodedBytes(bytes: Uint8Array, decodedByteLen: number): Uint8Array {\n        const arrayBuffer = new ArrayBuffer(decodedByteLen);\n        const bitView = new BitView(arrayBuffer);\n        bitView.bigEndian = true;\n        let bitOffset = 0;\n        let remainingBits = decodedByteLen * 8;\n        for (let i = 0; i < bytes.length; i++) {\n            const b = bytes[i];\n            const bitsToWrite = Math.min(remainingBits, i === 0 ? 7 - ((bytes.length * 7) - (decodedByteLen * 8)) : 7);\n            bitView.setBits(bitOffset, b, bitsToWrite);\n            bitOffset += bitsToWrite;\n            remainingBits -= bitsToWrite;\n        }\n        return new Uint8Array(arrayBuffer);\n    }\n\n    public decodeSafeBinaryEncodedBits(bytes: Uint8Array, decodedByteLen: number): Uint8Array {\n        const arrayBuffer = new ArrayBuffer(decodedByteLen);\n        const bitView = new BitView(arrayBuffer);\n        bitView.bigEndian = true;\n        let bitOffset = 0;\n        let remainingBits = decodedByteLen * 8;\n        for (let i = 0; i < bytes.length; i++) {\n            const b = bytes[i];\n            const bitsToWrite = Math.min(remainingBits, 7);\n            bitView.setBits(bitOffset, b, bitsToWrite);\n            bitOffset += bitsToWrite;\n            remainingBits -= bitsToWrite;\n        }\n        return new Uint8Array(arrayBuffer);\n    }\n}\n","import {InputStream} from './inputStream.js';\nimport {Decoder} from './decoder.js';\nimport {SmileError} from './error.js';\n\nexport class DecoderStream {\n    private readonly inputStream: InputStream;\n    private readonly decoder: Decoder;\n\n    constructor(inputStream: InputStream) {\n        this.inputStream = inputStream;\n        this.decoder = new Decoder();\n    }\n\n    public isEof(): boolean {\n        return this.inputStream.isEof();\n    }\n\n    public read(): number {\n        return this.inputStream.read();\n    }\n\n    public peek(): number {\n        return this.inputStream.peek();\n    }\n\n    private readVIntBytes(): Uint8Array {\n        const bytes: number[] = [];\n        while (true) {\n            const n = this.read();\n            bytes.push(n);\n            if ((n & 0x80) === 0x80) {\n                break;\n            }\n        }\n        return new Uint8Array(bytes);\n    }\n\n    public readUnsignedVint(): number | bigint {\n        const bytes = this.readVIntBytes();\n        return this.decoder.decodeVInt(bytes);\n    }\n\n    public readSignedVint(): number | bigint {\n        return this.decoder.decodeZigZag(this.readUnsignedVint());\n    }\n\n    public readAscii(len: number): string {\n        return this.decoder.decodeAscii(this.inputStream.readArray(len));\n    }\n\n    public readUtf8(len: number): string {\n        return this.decoder.decodeUtf8(this.inputStream.readArray(len));\n    }\n\n    public readFloat32(): number {\n        return this.decoder.decodeFloat32(this.readFixedLengthBigEndianEncodedBytes(4));\n    }\n\n    public readFloat64(): number {\n        return this.decoder.decodeFloat64(this.readFixedLengthBigEndianEncodedBytes(8));\n    }\n\n    public readFixedLengthBigEndianEncodedBytes(decodedByteLen: number): Uint8Array {\n        const encodedByteLen = Math.ceil(decodedByteLen * 8 / 7);\n        const bytes = this.inputStream.readArray(encodedByteLen);\n        return this.decoder.decodeFixedLengthBigEndianEncodedBytes(bytes, decodedByteLen);\n    }\n\n    public readSafeBinary(): Uint8Array {\n        const decodedByteLen = this.readUnsignedVint();\n        if (typeof (decodedByteLen) === 'bigint') {\n            throw new SmileError('invalid length');\n        }\n        const encodedByteLen = Math.ceil(decodedByteLen * 8 / 7);\n        const bytes = this.inputStream.readArray(encodedByteLen);\n        return this.decoder.decodeSafeBinaryEncodedBits(bytes, decodedByteLen);\n    }\n\n    public readBigInt(): bigint {\n        const bytes = this.readSafeBinary();\n        let n = BigInt(0);\n        if (bytes.length === 0) {\n            return n;\n        }\n        const isNegative = (bytes[0] & 0x80) === 0x80;\n        for (let i = 0; i < bytes.length; i++) {\n            n = (n * BigInt(256)) + BigInt(isNegative ? bytes[i] ^ 0xff : bytes[i]);\n        }\n        if (isNegative) {\n            n = -n - BigInt(1);\n        }\n        return n;\n    }\n\n    public readBigDecimal(): number {\n        const scale = this.readSignedVint();\n        if (typeof (scale) === 'bigint') {\n            throw new SmileError('invalid scale');\n        }\n        const magnitude = this.readBigInt();\n        return Number(magnitude) * Math.pow(10, scale);\n    }\n\n    public readLongString(): Uint8Array {\n        const buffer: number[] = [];\n        while (true) {\n            const c = this.inputStream.read();\n            if (c === 0xfc) {\n                break;\n            }\n            buffer.push(c);\n        }\n        return new Uint8Array(buffer);\n    }\n\n    public readLongAscii() {\n        return this.decoder.decodeAscii(this.readLongString());\n    }\n\n    public readLongUtf8() {\n        return this.decoder.decodeUtf8(this.readLongString());\n    }\n\n    public readBytes(len: number): Uint8Array {\n        return this.inputStream.readArray(len);\n    }\n}\n","import {SmileError} from './error.js';\n\nexport const eofError = new SmileError('end of input stream reached');\n\nexport class InputStream {\n    private readonly array: Uint8Array;\n    private index: number = 0;\n\n    constructor(array: Uint8Array) {\n        this.array = array;\n    }\n\n    public isEof(): boolean {\n        return (this.index >= this.array.length);\n    }\n\n    public read(): number {\n        if (this.isEof()) {\n            throw eofError;\n        }\n        const v = this.array[this.index];\n        this.index++;\n        return v;\n    }\n\n    public readArray(n: number): Uint8Array {\n        if (this.isEof()) {\n            throw eofError;\n        }\n        if (n < 0) {\n            throw new SmileError('invalid read amount');\n        }\n        const endIndex = Math.min(this.array.length, this.index + n);\n        const readData = this.array.subarray(this.index, endIndex);\n        this.index = endIndex;\n        return readData;\n    }\n\n    public peek(): number {\n        if (this.isEof()) {\n            throw eofError;\n        }\n        return this.array[this.index];\n    }\n\n    public skip(n: number) {\n        if (this.isEof()) {\n            throw eofError;\n        }\n        if (n < 0) {\n            throw new SmileError('invalid skip amount');\n        }\n        this.index += n;\n    }\n}\n","import {SmileError} from './error.js';\n\nexport class SharedStringBuffer {\n    private readonly name: string;\n    private readonly enabled: boolean;\n    private readonly maxStrings: number;\n    private strings: string[];\n    private stringMap: { [key: string]: number };\n\n    constructor(name: string, enabled: boolean, maxStrings: number) {\n        this.name = name;\n        this.enabled = enabled;\n        this.maxStrings = maxStrings;\n        this.strings = [];\n        this.stringMap = {};\n        this.reset();\n    }\n\n    private reset(): void {\n        //console.log(`[${this.name}] ssb: reset`);\n        this.strings = [];\n        this.stringMap = {};\n    }\n\n    public static newValues(enabled: boolean): SharedStringBuffer {\n        return new SharedStringBuffer('values', enabled, 1024);\n    }\n\n    public static newKeyNames(enabled: boolean): SharedStringBuffer {\n        return new SharedStringBuffer('keyNames', enabled, 1024);\n    }\n\n    public addString(s: string): number {\n        if (!this.enabled) {\n            return -1;\n        }\n        const bytes = new TextEncoder().encode(s);\n        if (bytes.length > 64) {\n            return -1;\n        }\n        if (s in this.stringMap) {\n            return this.stringMap[s];\n        }\n        if (this.strings.length >= this.maxStrings) {\n            this.reset();\n        }\n        const index = this.strings.length;\n        //console.log(`[${this.name}] ssb: add [${index}] '${s}'`);\n        this.strings.push(s);\n        this.stringMap[s] = index;\n        return index;\n    };\n\n    public getString(index: number): string {\n        //console.log(`[${this.name}] ssb: get [${index}] '${this.strings[index]}'`);\n        if (!this.enabled) {\n            throw new SmileError('shared strings are not enabled');\n        }\n        if (index >= this.strings.length) {\n            throw new SmileError(`shared string reference out of range`);\n        }\n        return this.strings[index];\n    };\n}\n","import {DecoderStream} from './decoderStream.js';\nimport {InputStream} from './inputStream.js';\nimport {SmileError} from './error.js';\nimport {SharedStringBuffer} from './sharedStringBuffer.js';\nimport {Decoder} from './decoder.js';\n\n/**\n * Parser options.\n */\nexport interface ParserOptions {\n}\n\n/**\n * Parse SMILE-encoded data.\n *\n * @param data SMILE-encoded data\n * @param options parser options\n */\nexport function parse(data: Uint8Array, options?: ParserOptions): any {\n    return new ParserContext(data, options).parse();\n}\n\nclass ParserContext {\n    private readonly decoderStream: DecoderStream;\n    private readonly options?: ParserOptions;\n    private readonly decoder: Decoder;\n    private sharedPropertyName: boolean;\n    private sharedStringValue: boolean;\n    private rawBinary: boolean;\n    private version: number;\n    private sharedPropertyNames: SharedStringBuffer;\n    private sharedStringValues: SharedStringBuffer;\n\n    constructor(data: Uint8Array, options?: ParserOptions) {\n        this.decoderStream = new DecoderStream(new InputStream(data));\n        this.options = options;\n        this.decoder = new Decoder();\n\n        this.sharedPropertyName = false;\n        this.sharedStringValue = false;\n        this.rawBinary = false;\n        this.version = 0;\n\n        // TODO\n        this.sharedPropertyNames = SharedStringBuffer.newKeyNames(false);\n        this.sharedStringValues = SharedStringBuffer.newValues(false);\n    }\n\n    public parse(): any {\n        // parse header\n        const b0 = this.decoderStream.read();\n        const b1 = this.decoderStream.read();\n        const b2 = this.decoderStream.read();\n\n        if ((b0 !== 0x3a) || (b1 !== 0x29) || (b2 !== 0x0a)) {\n            throw new SmileError('invalid Smile header');\n        }\n\n        const b3 = this.decoderStream.read();\n        this.sharedPropertyName = (b3 & 0x01) === 0x01;\n        this.sharedStringValue = (b3 & 0x02) === 0x02;\n        this.rawBinary = (b3 & 0x04) === 0x04;\n        this.version = b3 >> 4;\n\n        this.sharedPropertyNames = SharedStringBuffer.newKeyNames(this.sharedPropertyName);\n        this.sharedStringValues = SharedStringBuffer.newValues(this.sharedStringValue);\n\n        return this.readValue();\n    };\n\n    private readValue(): any {\n        const token = this.decoderStream.read();\n        const tokenClass = token >> 5;\n        const tokenValue = token & 0x1f;\n        switch (tokenClass) {\n            case 0: { // Short Shared Value String reference (single byte)\n                return this.sharedStringValues.getString(tokenValue - 1);\n            }\n            case 1: { // Simple literals, numbers\n                return this.readSimpleLiteralValue(token);\n            }\n            case 2: { // Tiny ASCII (1 - 32 bytes == chars)\n                const value = this.decoderStream.readAscii(tokenValue + 1);\n                this.sharedStringValues.addString(value);\n                return value;\n            }\n            case 3: { // Short ASCII (33 - 64 bytes == chars)\n                const value = this.decoderStream.readAscii(tokenValue + 33);\n                this.sharedStringValues.addString(value);\n                return value;\n            }\n            case 4: { // Tiny Unicode (2 - 33 bytes; <= 33 characters)\n                const value = this.decoderStream.readUtf8(tokenValue + 2);\n                this.sharedStringValues.addString(value);\n                return value;\n            }\n            case 5: { // Short Unicode (34 - 64 bytes; <= 64 characters)\n                const value = this.decoderStream.readUtf8(tokenValue + 34);\n                this.sharedStringValues.addString(value);\n                return value;\n            }\n            case 6: { // Small integers (single byte)\n                return this.decoder.decodeZigZag(tokenValue);\n            }\n            case 7: { // Binary / Long text / structure markers\n                return this.readBinaryLongTextStructureValues(token);\n            }\n            default: {\n                throw new SmileError(`unknown token class: ${tokenClass}`);\n            }\n        }\n    }\n\n    private readSimpleLiteralValue(token: number): any {\n        if (token === 0x20) { // empty string\n            return '';\n        } else if (token === 0x21) { // null\n            return null;\n        } else if (token === 0x22) { // false\n            return false;\n        } else if (token === 0x23) { // true\n            return true;\n        } else if (token === 0x24) { // 32-bit integer; zigzag encoded, 1 - 5 data bytes\n            return this.decoderStream.readSignedVint();\n        } else if (token === 0x25) { // 64-bit integer; zigzag encoded, 5 - 10 data bytes\n            return this.decoderStream.readSignedVint();\n        } else if (token === 0x26) { // BigInteger\n            return this.decoderStream.readBigInt();\n        } else if (token === 0x28) { // 32-bit float\n            return this.decoderStream.readFloat32();\n        } else if (token === 0x29) { // 64-bit double\n            return this.decoderStream.readFloat64();\n        } else if (token === 0x2a) { // BigDecimal\n            return this.decoderStream.readBigDecimal();\n        } else {\n            throw new SmileError('invalid value token 0x' + token.toString(16));\n        }\n    }\n\n    private readBinaryLongTextStructureValues(token: number): any {\n        if (token === 0xe0) { // Long (variable length) ASCII text\n            return this.decoderStream.readLongAscii();\n        } else if (token === 0xe4) { // Long (variable length) Unicode text\n            return this.decoderStream.readLongUtf8();\n        } else if (token === 0xe8) { // Binary, 7-bit encoded\n            return this.decoderStream.readSafeBinary();\n        } else if ((token >= 0xec) && (token <= 0xef)) { // Shared String reference, long\n            const reference = ((token & 0x03) << 8) | this.decoderStream.read();\n            return this.sharedStringValues.getString(reference);\n        } else if (token === 0xf8) { // START_ARRAY\n            const array: any[] = [];\n            while (this.decoderStream.peek() !== 0xf9) { // END_ARRAY\n                array.push(this.readValue());\n            }\n            this.decoderStream.read(); // consume END_ARRAY\n            return array;\n        } else if (token === 0xfa) { // START_OBJECT\n            const object: { [key: string]: any } = {};\n            while (this.decoderStream.peek() !== 0xfb) { // END_OBJECT\n                const key = this.readKey();\n                const value = this.readValue();\n                object[key] = value;\n            }\n            this.decoderStream.read(); // consume END_OBJECT\n            return object;\n        } else if (token === 0xfd) { // Binary (raw)\n            const len = this.decoderStream.readUnsignedVint();\n            if (typeof(len) === 'bigint') {\n                throw new SmileError('invalid length');\n            }\n            return this.decoderStream.readBytes(len);\n        } else {\n            throw new SmileError('invalid value token 0x' + token.toString(16));\n        }\n    }\n\n    private readKey(): string {\n        const token = this.decoderStream.read();\n        if (token === 0x20) { // Special constant name '' (empty String)\n            return '';\n        } else if ((token >= 0x30) && (token <= 0x33)) { // 'Long' shared key name reference (2 byte token)\n            const reference = ((token & 0x03) << 8) | this.decoderStream.read();\n            return this.sharedPropertyNames.getString(reference);\n        } else if (token === 0x34) { // Long (not-yet-shared) Unicode name\n            return this.decoderStream.readLongUtf8();\n        } else if ((token >= 0x40) && (token <= 0x7f)) { // 'Short' shared key name reference\n            const reference = token & 0x3f;\n            return this.sharedPropertyNames.getString(reference);\n        } else if ((token >= 0x80) && (token <= 0xbf)) { // Short Ascii names\n            const s = this.decoderStream.readAscii((token & 0x3f) + 1);\n            this.sharedPropertyNames.addString(s);\n            return s;\n        } else if ((token >= 0xc0) && (token <= 0xf7)) { // Short Unicode names\n            const s = this.decoderStream.readUtf8((token & 0x3f) + 2);\n            this.sharedPropertyNames.addString(s);\n            return s;\n        } else {\n            throw new SmileError('invalid key token 0x' + token.toString(16));\n        }\n    }\n}\n"],"names":["SmileError","msg","root","BitView","source","byteOffset","byteLength","isBuffer","offset","on","bits","signed","available","value","i","remaining","bitOffset","currentByte","read","mask","readBits","wrote","writeBits","destMask","destShift","buffer","reader","name","size","val","writer","readASCIIString","stream","bytes","readString","readUTF8String","utf8","chars","append","fixedLength","c","string","writeASCIIString","length","writeUTF8String","byteArray","stringToByteArray","str","b","unicode","BitStream","bitLength","slice","bitsToWrite","module","Decoder","v","view","decodedByteLen","arrayBuffer","bitView","remainingBits","DecoderStream","inputStream","n","len","encodedByteLen","isNegative","scale","magnitude","eofError","InputStream","array","endIndex","readData","SharedStringBuffer","enabled","maxStrings","s","index","parse","data","options","ParserContext","b0","b1","b2","b3","token","tokenClass","tokenValue","reference","object","key"],"mappings":"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","x_google_ignoreList":[1]}